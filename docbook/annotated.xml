<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="ja">
<title>クラス一覧</title>
クラス・構造体・共用体・インターフェースの一覧です。<link linkend="_struct_operator_1_1_add">Operator::Add&lt; T &gt;</link>
<para>加算 </para>
<link linkend="_struct_angel_beats">AngelBeats</link>
<para>Segment Tree Beat! <link xlink:href="https://nyaannyaan.github.io/library/segment-tree/segment-tree-beats.hpp">https://nyaannyaan.github.io/library/segment-tree/segment-tree-beats.hpp</link> </para>
<link linkend="_struct_range_query_1_1_apply_add">RangeQuery::ApplyAdd&lt; T &gt;</link><link linkend="_struct_range_query_1_1_apply_add___get_max">RangeQuery::ApplyAdd_GetMax&lt; T, min_value &gt;</link>
<para>区間加算 / 区間max </para>
<link linkend="_struct_range_query_1_1_apply_add___get_min">RangeQuery::ApplyAdd_GetMin&lt; T, max_value &gt;</link>
<para>区間加算 / 区間min </para>
<link linkend="_struct_range_query_1_1_apply_add___get_sum">RangeQuery::ApplyAdd_GetSum&lt; T &gt;</link>
<para>区間加算 / 区間和 </para>
<link linkend="_struct_range_query_1_1_apply_update">RangeQuery::ApplyUpdate&lt; T &gt;</link><link linkend="_struct_range_query_1_1_apply_update___get_max">RangeQuery::ApplyUpdate_GetMax&lt; T, min_value, not_exist &gt;</link>
<para>区間更新 / 区間max </para>
<link linkend="_struct_range_query_1_1_apply_update___get_min">RangeQuery::ApplyUpdate_GetMin&lt; T, max_value, not_exist &gt;</link>
<para>区間更新 / 区間min </para>
<link linkend="_struct_range_query_1_1_apply_update___get_sum">RangeQuery::ApplyUpdate_GetSum&lt; T, not_exist &gt;</link>
<para>区間更新 / 区間和 </para>
<link linkend="_struct_arithmetic_progression">ArithmeticProgression</link>
<para>等差数列 </para>
<link linkend="_struct_bezout_identity">BezoutIdentity</link>
<para>一次不定方程式 ax+by=c を解く verify: <link xlink:href="https://atcoder.jp/contests/abc340/submissions/62495050">https://atcoder.jp/contests/abc340/submissions/62495050</link> </para>
<link linkend="_struct_bi_info">BiInfo</link>
<para>二部グラフのパラメータ </para>
<link linkend="_struct_binary_trie">BinaryTrie&lt; T, Log &gt;</link>
<para>Binary <link linkend="_struct_trie">Trie</link> </para>
<link linkend="_struct_bridge_info">BridgeInfo</link>
<para>橋と関節点の情報 </para>
<link linkend="_struct_burning_burying">BurningBurying&lt; Cost &gt;</link>
<para>燃やす埋める </para>
<link linkend="_struct_c_h_t">CHT&lt; T, MIN &gt;</link>
<para>Convex Hull Trick verify : <link xlink:href="https://judge.yosupo.jp/problem/line_add_get_min">https://judge.yosupo.jp/problem/line_add_get_min</link> <link xlink:href="https://hcpc-hokudai.github.io/archive/algorithm_convex_hull_trick_001.pdf">https://hcpc-hokudai.github.io/archive/algorithm_convex_hull_trick_001.pdf</link> </para>
<link linkend="_struct_geometry_1_1_circle">Geometry::Circle</link>
<para>円 </para>
<link linkend="_struct_combination_lucas">CombinationLucas</link>
<para>Lucas の定理を用いた二項係数計算用ライブラリ </para>
<link linkend="_struct_combinatorics">Combinatorics&lt; T &gt;</link>
<para>二項係数・階乗計算 </para>
<link linkend="_struct_cumulative_sum2_d">CumulativeSum2D&lt; T &gt;</link>
<para>2次元累積和 </para>
<link linkend="_struct_doubling">Doubling&lt; Log &gt;</link>
<para>ダブリング </para>
<link linkend="_struct_doubling_fold">DoublingFold&lt; Monoid, Log &gt;</link>
<para>ダブリング（モノイド合成） </para>
<link linkend="_struct_d_s_u">DSU</link>
<para>Disjoint <link linkend="_struct_set">Set</link> Union </para>
<link linkend="_struct_dsu_base_semigroup">DsuBaseSemigroup</link><link linkend="_struct_dsu_merging">DsuMerging&lt; Semigroup &gt;</link>
<para>値をマージする <link linkend="_struct_d_s_u">DSU</link> </para>
<link linkend="_struct_dsu_potentialized">DsuPotentialized&lt; Group &gt;</link>
<para>ポテンシャル付き <link linkend="_struct_d_s_u">DSU</link> </para>
<link linkend="_struct_dsu_rollback">DsuRollback</link>
<para>ロールバック可能DSU </para>
<link linkend="_struct_dynamic_connectivity">DynamicConnectivity</link>
<para>オフラインのDinamic Connectivity </para>
<link linkend="_struct_dynamic_mod_int">DynamicModInt</link>
<para>実行時に mod を変更できる <link linkend="_struct_mod_int">ModInt</link> </para>
<link linkend="_struct_max_flow_1_1_edge">MaxFlow::Edge</link>
<para>辺構造体 </para>
<link linkend="_struct_min_cost_flow_1_1_edge">MinCostFlow::Edge</link>
<para>辺構造体 </para>
<link linkend="_struct_erasable_p_q">ErasablePQ&lt; T, MAX &gt;</link>
<para>削除可能な優先度付きキュー </para>
<link linkend="_classexp_1_1_expander">exp.Expander</link>
<para><link linkend="_classexp_1_1_expander">Expander</link> class is responsible for expanding libraries in the source code </para>
<link linkend="_classexp___a_h_c_1_1_expander">exp_AHC.Expander</link>
<para><link linkend="_classexp___a_h_c_1_1_expander">Expander</link> class is responsible for expanding libraries in the source code </para>
<link linkend="_struct_factors">Factors</link>
<para>エラトステネスの篩を利用した高速な素因数分解・約数列挙（Osa_k 法） <link xlink:href="https://osak.jp/diary/diary_201310.html#20131017">https://osak.jp/diary/diary_201310.html#20131017</link> <link xlink:href="https://qiita.com/drken/items/3beb679e54266f20ab63">https://qiita.com/drken/items/3beb679e54266f20ab63</link> </para>
<link linkend="_struct_fenwick_tree">FenwickTree&lt; Abel &gt;</link>
<para>Fenwick Tree </para>
<link linkend="_struct_fraction">Fraction&lt; T &gt;</link>
<para>有理数構造体 </para>
<link linkend="_struct_hash">Hash</link><link linkend="_struct_h_l_d">HLD</link>
<para>HL分解 解説:https://hcpc-hokudai.github.io/archive/graph_tree_001.pdf </para>
<link linkend="_struct_insertable_reversible_array">InsertableReversibleArray&lt; T &gt;</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">InsertableReversibleArrayImpl::LazyReversibleRBSTNode&lt; T, E &gt;</link><link linkend="_struct_l_c_a">LCA</link>
<para><link linkend="_struct_l_c_a">LCA</link> </para>
<link linkend="_struct_lca_edge">LcaEdge&lt; Monoid &gt;</link>
<para>辺属性LCA </para>
<link linkend="_struct_lca_vertex">LcaVertex&lt; Monoid &gt;</link>
<para>頂点属性 <link linkend="_struct_l_c_a">LCA</link> </para>
<link linkend="_struct_geometry_1_1_line">Geometry::Line</link>
<para>直線 </para>
<link linkend="_struct_monoid_1_1_max">Monoid::Max&lt; T, min_value &gt;</link>
<para>Maxモノイド </para>
<link linkend="_struct_range_query_1_1_max">RangeQuery::Max&lt; T, min_value &gt;</link>
<para>1点変更 / 区間 max </para>
<link linkend="_struct_range_query_1_1_max_dynamic">RangeQuery::MaxDynamic&lt; T, min_value &gt;</link>
<para>1点変更 / 区間 max </para>
<link linkend="_struct_max_flow">MaxFlow</link>
<para>最大流 </para>
<link linkend="_struct_merge_sort_tree">MergeSortTree&lt; T &gt;</link>
<para>マージソート木 </para>
<link linkend="_struct_monoid_1_1_min">Monoid::Min&lt; T, max_value &gt;</link>
<para>Minモノイド </para>
<link linkend="_struct_range_query_1_1_min">RangeQuery::Min&lt; T, max_value &gt;</link>
<para>1点変更 / 区間 min </para>
<link linkend="_struct_min_cost_flow">MinCostFlow</link>
<para>最小費用流 </para>
<link linkend="_struct_range_query_1_1_min_dynamic">RangeQuery::MinDynamic&lt; T, max_value &gt;</link>
<para>1点変更 / 区間 min </para>
<link linkend="_struct_mo">Mo</link>
<para><link linkend="_struct_mo">Mo</link>&apos;s Algorithm <link xlink:href="https://ei1333.hateblo.jp/entry/2017/09/11/211011">https://ei1333.hateblo.jp/entry/2017/09/11/211011</link> </para>
<link linkend="_struct_mod_int">ModInt&lt; MOD &gt;</link>
<para><link linkend="_struct_mod_int">ModInt</link> </para>
<link linkend="_struct_multi_set">MultiSet&lt; T &gt;</link>
<para>Std::multiset ラッパー </para>
<link linkend="_struct_angel_beats_1_1_node">AngelBeats::Node</link><link linkend="_struct_seg_tree_dynamic_1_1_node">SegTreeDynamic&lt; Monoid &gt;::Node</link><link linkend="_struct_trie_1_1_node">Trie::Node</link><link linkend="_class_n_t_t">NTT&lt; MOD, primitive_root &gt;</link>
<para><link linkend="_class_n_t_t">NTT</link> Friendly 素数用 <link linkend="_class_n_t_t">NTT</link> 構造体 </para>
<link linkend="_struct_offset_vector">OffsetVector&lt; T &gt;</link><link linkend="_struct_geometry_1_1_point">Geometry::Point</link>
<para>２次元平面上の位置ベクトル </para>
<link linkend="_struct_range_set">RangeSet</link>
<para>区間を set で管理するデータ構造 verify:https://yukicoder.me/submissions/1021763 </para>
<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase&lt; Node &gt;</link><link linkend="_struct_rolling_hash">RollingHash</link>
<para>Rolling <link linkend="_struct_hash">Hash</link> </para>
<link linkend="_struct_scc_info">SccInfo</link>
<para>強連結成分分解の情報 </para>
<link linkend="_struct_geometry_1_1_segment">Geometry::Segment</link>
<para>線分 </para>
<link linkend="_struct_segment_tree2_d">SegmentTree2D&lt; Monoid &gt;</link><link linkend="_struct_seg_tree">SegTree&lt; Monoid &gt;</link>
<para>セグメント木 </para>
<link linkend="_struct_seg_tree_dual">SegTreeDual&lt; CommutativeOperator &gt;</link>
<para>双対セグメント木 </para>
<link linkend="_struct_seg_tree_dynamic">SegTreeDynamic&lt; Monoid &gt;</link>
<para>動的セグ木 </para>
<link linkend="_struct_seg_tree_lazy">SegTreeLazy&lt; Monoid, Operator, mapping &gt;</link>
<para>遅延評価セグメント木 </para>
<link linkend="_struct_set">Set&lt; T &gt;</link>
<para>Std::set ラッパー </para>
<link linkend="_struct_sorted_multi_tree">SortedMultiTree&lt; T &gt;</link><link linkend="_struct_sorted_tree">SortedTree&lt; T &gt;</link><link linkend="_struct_sparse_table">SparseTable&lt; Band &gt;</link>
<para>スパーステーブル </para>
<link linkend="_struct_sparse_table_disjoint">SparseTableDisjoint&lt; Semigroup &gt;</link>
<para>スパーステーブル（Disjoint） </para>
<link linkend="_struct_sqrt_tree">SqrtTree&lt; Abel &gt;</link>
<para>更新 O(1) クエリ O(sqrt(N)) の改造版セグ木 </para>
<link linkend="_struct_succinct_bit_vector">SuccinctBitVector</link><link linkend="_struct_abel_1_1_sum">Abel::Sum&lt; T &gt;</link>
<para>和 </para>
<link linkend="_struct_monoid_1_1_sum">Monoid::Sum&lt; T &gt;</link>
<para>和 </para>
<link linkend="_struct_range_query_1_1_sum">RangeQuery::Sum&lt; T &gt;</link>
<para>1点変更 / 区間和 </para>
<link linkend="_struct_range_query_1_1_sum_dynamic">RangeQuery::SumDynamic&lt; T &gt;</link>
<para>1点変更 / 区間和 </para>
<link linkend="_struct_monoid_1_1_sum_pair">Monoid::SumPair&lt; T &gt;</link>
<para>（和，区間の長さ） </para>
<link linkend="_struct_timer">Timer</link>
<para>タイマー </para>
<link linkend="_struct_trie">Trie</link><link linkend="_struct_two_sat">TwoSat</link>
<para>2-SAT </para>
<link linkend="_struct_operator_1_1_update">Operator::Update&lt; T, not_exist &gt;</link>
<para>更新 </para>
<link linkend="_struct_operator_1_1_update_time_stamp">Operator::UpdateTimeStamp&lt; T &gt;</link>
<para>可換な更新（タイムスタンプ） </para>
<link linkend="_struct_wavelet_matrix">WaveletMatrix</link>
<para>Wavelet Matrix <link xlink:href="https://github.com/MitI-7/WaveletMatrix/tree/master/WaveletMatrix">https://github.com/MitI-7/WaveletMatrix/tree/master/WaveletMatrix</link> <link xlink:href="https://miti-7.hatenablog.com/entry/2019/02/01/152131">https://miti-7.hatenablog.com/entry/2019/02/01/152131</link> </para>
<link linkend="_struct_abel_1_1_xor">Abel::Xor&lt; T &gt;</link>
<para>XOR </para>
</section>
