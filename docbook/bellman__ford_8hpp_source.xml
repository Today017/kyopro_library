<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_bellman__ford_8hpp_source" xml:lang="ja">
<title>bellman_ford.hpp</title>
<indexterm><primary>graph/shortest_path/bellman_ford.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_bellman__ford_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_bellman__ford_8hpp_source_1l00002"/>00002 
<anchor xml:id="_bellman__ford_8hpp_source_1l00003"/>00003 <emphasis role="comment">/**</emphasis>
00004 <emphasis role="comment">&#32;*&#32;@brief&#32;ベルマンフォード法</emphasis>
00005 <emphasis role="comment">&#32;*&#32;@details&#32;負の閉路が存在するか否かの&#32;bool&#32;値と、各頂点までの最短距離を記録した配列の組を返す</emphasis>
00006 <emphasis role="comment">&#32;*&#32;@note&#32;O(VE)</emphasis>
00007 <emphasis role="comment">&#32;*&#32;@attention</emphasis>
00008 <emphasis role="comment">&#32;*&#32;負閉路が存在する場合、最短経路が正しく計算されない場合がある。</emphasis>
00009 <emphasis role="comment">&#32;*&#32;このときは逆辺を張ったグラフで&#32;BFS&#32;等を行い、目的の終点から到達可能である頂点を列挙し、</emphasis>
00010 <emphasis role="comment">&#32;*&#32;そのような頂点のみでベルマンフォード法を実行して調べる必要がある。</emphasis>
00011 <emphasis role="comment">&#32;*&#32;@ref&#32;https://yukicoder.me/submissions/967952</emphasis>
00012 <emphasis role="comment">&#32;*&#32;@ref&#32;https://mhrb-minase.hatenablog.com/entry/2019/08/20/003915</emphasis>
00013 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_bellman__ford_8hpp_source_1l00014"/><link linkend="_bellman__ford_8hpp_1a318906f76126189de2950a13fcc66c6c">00014</link> <link linkend="_bellman__ford_8hpp_1a318906f76126189de2950a13fcc66c6c">pair</link>&lt;<emphasis role="keywordtype">bool</emphasis>,<link linkend="_bellman__ford_8hpp_1a318906f76126189de2950a13fcc66c6c">VL</link>&gt;&#32;<link linkend="_bellman__ford_8hpp_1a318906f76126189de2950a13fcc66c6c">BellmanFord</link>(<emphasis role="keyword">const</emphasis>&#32;WG&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start)&#32;{
<anchor xml:id="_bellman__ford_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_bellman__ford_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;VL&#32;dst(n,<link linkend="_template_8hpp_1a1f713edb7a826e3710159658d6ef9815">INFL</link>);&#32;dst[start]=0;
<anchor xml:id="_bellman__ford_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i=0;
<anchor xml:id="_bellman__ford_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;&#32;i&lt;n;&#32;i++)&#32;{
<anchor xml:id="_bellman__ford_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;update=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_bellman__ford_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&lt;n;&#32;j++)&#32;{
<anchor xml:id="_bellman__ford_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;[nxt,cost]:g[j])&#32;{
<anchor xml:id="_bellman__ford_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dst[j]!=INFL&amp;&amp;dst[j]+cost&lt;dst[nxt])&#32;{
<anchor xml:id="_bellman__ford_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dst[nxt]=dst[j]+cost;
<anchor xml:id="_bellman__ford_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;update=<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_bellman__ford_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_bellman__ford_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_bellman__ford_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_bellman__ford_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!update)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_bellman__ford_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;}
<anchor xml:id="_bellman__ford_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{i==n,dst};
<anchor xml:id="_bellman__ford_8hpp_source_1l00031"/>00031 }
</programlisting></section>
