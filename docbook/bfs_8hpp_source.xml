<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_bfs_8hpp_source" xml:lang="ja">
<title>bfs.hpp</title>
<indexterm><primary>graph/shortest_path/bfs.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_bfs_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_bfs_8hpp_source_1l00002"/>00002 
<anchor xml:id="_bfs_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;重みなしグラフ&#32;g&#32;の頂点&#32;start&#32;からの最短距離を求める</emphasis>
<anchor xml:id="_bfs_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@note&#32;O(E+V)</emphasis>
<anchor xml:id="_bfs_8hpp_source_1l00005"/><link linkend="_bfs_8hpp_1a640c64414ac3359a9bfee2d11d83962a">00005</link> <link linkend="_bfs_8hpp_1a640c64414ac3359a9bfee2d11d83962a">VL</link>&#32;<link linkend="_bfs_8hpp_1a640c64414ac3359a9bfee2d11d83962a">BFS</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start=0)&#32;{
<anchor xml:id="_bfs_8hpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_bfs_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;VL&#32;ret(n,<link linkend="_template_8hpp_1a14c9dbab105f1b8b8182a022d73e610c">INF</link>);&#32;ret[start]=0;
<anchor xml:id="_bfs_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;queue&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;que;&#32;que.push(start);
<anchor xml:id="_bfs_8hpp_source_1l00009"/>00009 
<anchor xml:id="_bfs_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(!que.empty())&#32;{
<anchor xml:id="_bfs_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;now=que.front();que.pop();
<anchor xml:id="_bfs_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:g[now])&#32;<emphasis role="keywordflow">if</emphasis>(chmin(ret[nxt],ret[now]+1))&#32;que.push(nxt);
<anchor xml:id="_bfs_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;}
<anchor xml:id="_bfs_8hpp_source_1l00014"/>00014 
<anchor xml:id="_bfs_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_bfs_8hpp_source_1l00016"/>00016 }
</programlisting></section>
