<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_bipartite__matching_8hpp_source" xml:lang="ja">
<title>bipartite_matching.hpp</title>
<indexterm><primary>graph/bipartite_matching.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_bipartite__matching_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/graph/flow/max_flow.hpp&quot;</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00003"/>00003 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;二部グラフの最大マッチングを返す</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@note&#32;O(E*sqrt(V))</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00006"/>00006 <emphasis role="comment">///&#32;@attention&#32;G&#32;は二部グラフであること</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00007"/><link linkend="_bipartite__matching_8hpp_1aceb8bd6097e9654a9f9b08968c7e6049">00007</link> <link linkend="_bipartite__matching_8hpp_1aceb8bd6097e9654a9f9b08968c7e6049">vector</link>&lt;<link linkend="_bipartite__matching_8hpp_1aceb8bd6097e9654a9f9b08968c7e6049">pair</link>&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;<link linkend="_bipartite__matching_8hpp_1aceb8bd6097e9654a9f9b08968c7e6049">BipartiteMatching</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g)&#32;{
<anchor xml:id="_bipartite__matching_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_bipartite__matching_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<link linkend="_struct_max_flow">MaxFlow</link>&#32;mxf<link linkend="_struct_max_flow_1a110c5a586e8fe54f4fbb8cfc03219d3b">(</link>n+2<link linkend="_struct_max_flow_1a110c5a586e8fe54f4fbb8cfc03219d3b">)</link>;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;s=n,t=n+1;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_bipartite__matching_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j:g[i])&#32;mxf.add_edge(i,j,1);
<anchor xml:id="_bipartite__matching_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mxf<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">.</link><link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">add_edge</link><link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">(</link>s<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">,</link>i<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">,</link>1<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">)</link>;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mxf<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">.</link><link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">add_edge</link><link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">(</link>i<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">,</link>t<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">,</link>1<link linkend="_struct_max_flow_1ac8661e215fa18b0710f8934378de29b0">)</link>;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="_bipartite__matching_8hpp_source_1l00016"/>00016 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;mxf<link linkend="_struct_max_flow_1a9ae6af96026a4568d4e0c01c003a753f">.</link><link linkend="_struct_max_flow_1a9ae6af96026a4568d4e0c01c003a753f">flow</link><link linkend="_struct_max_flow_1a9ae6af96026a4568d4e0c01c003a753f">(</link>s<link linkend="_struct_max_flow_1a9ae6af96026a4568d4e0c01c003a753f">,</link>t<link linkend="_struct_max_flow_1a9ae6af96026a4568d4e0c01c003a753f">)</link>;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00018"/>00018 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;vector&lt;pair&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;ret;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;edges=mxf.get_edges();
<anchor xml:id="_bipartite__matching_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;e:edges)&#32;{
<anchor xml:id="_bipartite__matching_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(e.from==s)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(e.to==t)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(e.flow==1)&#32;ret.push_back({e.from,e.to});
<anchor xml:id="_bipartite__matching_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="_bipartite__matching_8hpp_source_1l00026"/>00026 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00028"/>00028 }
<anchor xml:id="_bipartite__matching_8hpp_source_1l00029"/>00029 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00030"/>00030 <emphasis role="comment">///&#32;@brief&#32;二部グラフのパラメータ</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00031"/><link linkend="_struct_bi_info">00031</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_bi_info">BiInfo</link>&#32;{
<anchor xml:id="_bipartite__matching_8hpp_source_1l00032"/><link linkend="_struct_bi_info_1a1dcdc34950c9b5d1da1722947a1bc5a8">00032</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_bi_info_1a1dcdc34950c9b5d1da1722947a1bc5a8">max_matching</link>;&#32;<emphasis role="comment">///&lt;&#32;最大マッチング</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00033"/><link linkend="_struct_bi_info_1a5abd51537fbadf9591f5b7ffbba56c61">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_bi_info_1a5abd51537fbadf9591f5b7ffbba56c61">min_edge_cover</link>;&#32;<emphasis role="comment">///&lt;&#32;最小辺被覆</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00034"/><link linkend="_struct_bi_info_1a55dc89a0de093ae7e4e17ed1a93356f7">00034</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_bi_info_1a55dc89a0de093ae7e4e17ed1a93356f7">max_independent_set</link>;&#32;<emphasis role="comment">///&lt;&#32;最大独立集合</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00035"/><link linkend="_struct_bi_info_1a6a8d383b96380447ef6f9dc284f0e527">00035</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_bi_info_1a6a8d383b96380447ef6f9dc284f0e527">min_vertex_cover</link>;&#32;<emphasis role="comment">///&lt;&#32;最小頂点被覆</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;min_edge_cover=-1&#32;のときは孤立点がある</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00037"/>00037 };
<anchor xml:id="_bipartite__matching_8hpp_source_1l00038"/>00038 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00039"/>00039 <emphasis role="comment">///&#32;@brief&#32;二部グラフのパラメータを求める</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00040"/>00040 <emphasis role="comment">///&#32;@note&#32;O(E*sqrt(V))</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00041"/>00041 <emphasis role="comment">///&#32;@attention&#32;G&#32;は二部グラフであること</emphasis>
<anchor xml:id="_bipartite__matching_8hpp_source_1l00042"/><link linkend="_bipartite__matching_8hpp_1a96afd81a65980bfc86d7273bf3ec482a">00042</link> <link linkend="_struct_bi_info">BiInfo</link>&#32;<link linkend="_bipartite__matching_8hpp_1a96afd81a65980bfc86d7273bf3ec482a">GetBiInfo</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g)&#32;{
<anchor xml:id="_bipartite__matching_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_bipartite__matching_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;isolation=0;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;<emphasis role="keywordflow">if</emphasis>(g[i].size()==0)&#32;isolation++;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00046"/>00046 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<link linkend="_struct_bi_info">BiInfo</link>&#32;ret;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=BipartiteMatching(g).size();
<anchor xml:id="_bipartite__matching_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;ret<link linkend="_struct_bi_info_1a1dcdc34950c9b5d1da1722947a1bc5a8">.</link><link linkend="_struct_bi_info_1a1dcdc34950c9b5d1da1722947a1bc5a8">max_matching</link>=m;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;ret<link linkend="_struct_bi_info_1a5abd51537fbadf9591f5b7ffbba56c61">.</link><link linkend="_struct_bi_info_1a5abd51537fbadf9591f5b7ffbba56c61">min_edge_cover</link>=isolation==0?n-m:-1;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;ret<link linkend="_struct_bi_info_1a6a8d383b96380447ef6f9dc284f0e527">.</link><link linkend="_struct_bi_info_1a6a8d383b96380447ef6f9dc284f0e527">min_vertex_cover</link>=m;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;ret<link linkend="_struct_bi_info_1a55dc89a0de093ae7e4e17ed1a93356f7">.</link><link linkend="_struct_bi_info_1a55dc89a0de093ae7e4e17ed1a93356f7">max_independent_set</link>=n-m;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00053"/>00053 
<anchor xml:id="_bipartite__matching_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_bipartite__matching_8hpp_source_1l00055"/>00055 }
</programlisting></section>
