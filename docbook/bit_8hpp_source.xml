<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_bit_8hpp_source" xml:lang="ja">
<title>bit.hpp</title>
<indexterm><primary>others/bit.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_bit_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis>&#32;<emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00002"/>00002 
<anchor xml:id="_bit_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;ビット演算</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00004"/><link linkend="_namespace_bit">00004</link> <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_bit">Bit</link>{
<anchor xml:id="_bit_8hpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1であるビットの個数を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00006"/><link linkend="_namespace_bit_1a1c596333431a2b9557848add9aaec912">00006</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a1c596333431a2b9557848add9aaec912">PopCount</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_popcount(n);&#32;}
<anchor xml:id="_bit_8hpp_source_1l00007"/>00007 
<anchor xml:id="_bit_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1であるビットの個数を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00009"/><link linkend="_namespace_bit_1a72c1df96643f535ccb12e866f1022726">00009</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a72c1df96643f535ccb12e866f1022726">PopCount</link>(ll&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_popcountll(n);&#32;}
<anchor xml:id="_bit_8hpp_source_1l00010"/>00010 
<anchor xml:id="_bit_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;popcountの偶奇を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00012"/><link linkend="_namespace_bit_1a39936fdc1d9e615dd4cffc483c1dca8c">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a39936fdc1d9e615dd4cffc483c1dca8c">Parity</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_parity(n);&#32;}
<anchor xml:id="_bit_8hpp_source_1l00013"/>00013 
<anchor xml:id="_bit_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;popcountの偶奇を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00015"/><link linkend="_namespace_bit_1a7d701e06b98bd3273126ccb3bb8bba5b">00015</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a7d701e06b98bd3273126ccb3bb8bba5b">Parity</link>(ll&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_parityll(n);&#32;}
<anchor xml:id="_bit_8hpp_source_1l00016"/>00016 
<anchor xml:id="_bit_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最上位ビットの位置を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00018"/><link linkend="_namespace_bit_1a385f3d9f37540986c5af0dea755fbfdb">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a385f3d9f37540986c5af0dea755fbfdb">TopBit</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n?31-__builtin_clz(n):-1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00019"/>00019 
<anchor xml:id="_bit_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最上位ビットの位置を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00021"/><link linkend="_namespace_bit_1a38f7f49874426ffdda91602476c71396">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a38f7f49874426ffdda91602476c71396">TopBit</link>(ll&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n?63-__builtin_clzll(n):-1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00022"/>00022 
<anchor xml:id="_bit_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;2進表現の長さを返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00024"/><link linkend="_namespace_bit_1a870a0bc19f2526f8179a4da45dc52efc">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a870a0bc19f2526f8179a4da45dc52efc">BitLength</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n?32-__builtin_clz(n):1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00025"/>00025 
<anchor xml:id="_bit_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">////&#32;@brief&#32;2進表現の長さを返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00027"/><link linkend="_namespace_bit_1a489e2250c1755c4b0efe77c8b27f116c">00027</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1a489e2250c1755c4b0efe77c8b27f116c">BitLength</link>(ll&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n?64-__builtin_clzll(n):1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00028"/>00028 
<anchor xml:id="_bit_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最下位ビットの位置を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00030"/><link linkend="_namespace_bit_1af393abef4ae81565dcf932bceafec533">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1af393abef4ae81565dcf932bceafec533">LowBit</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n?__builtin_ctz(n):-1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00031"/>00031 
<anchor xml:id="_bit_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最下位ビットの位置を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00033"/><link linkend="_namespace_bit_1adfb65c7d7cafdb482df24671d93f7a74">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespace_bit_1adfb65c7d7cafdb482df24671d93f7a74">LowBit</link>(ll&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n?__builtin_ctzll(n):-1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00034"/>00034 
<anchor xml:id="_bit_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;2のべき乗か否かを返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00036"/><link linkend="_namespace_bit_1a40cfacaf824921dc87de6a5297491fde">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_bit_1a40cfacaf824921dc87de6a5297491fde">IsPowerOfTwo</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n&amp;&amp;(n&amp;-n)==n;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00037"/>00037 
<anchor xml:id="_bit_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;0~n-1&#32;ビットを立てたビットマスクを返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00039"/><link linkend="_namespace_bit_1acd8e1799dd385e69d34df3bea530b920">00039</link> &#32;&#32;&#32;&#32;ll&#32;<link linkend="_namespace_bit_1acd8e1799dd385e69d34df3bea530b920">Mask</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(1LL&lt;&lt;n)-1;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00040"/>00040 
<anchor xml:id="_bit_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;iビット目が立っているか否かを返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00042"/><link linkend="_namespace_bit_1a0af6dce857ec8aa6cef9e6ac1d4410e6">00042</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_bit_1a0af6dce857ec8aa6cef9e6ac1d4410e6">HasBit</link>(ll&#32;n,<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(n&gt;&gt;i&amp;1);&#32;}
<anchor xml:id="_bit_8hpp_source_1l00043"/>00043 
<anchor xml:id="_bit_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;整数　ｎ&#32;の2進表現を返す</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;len&#32;ビット数</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;rev&#32;反転するか否か</emphasis>
<anchor xml:id="_bit_8hpp_source_1l00047"/><link linkend="_namespace_bit_1ab14c175590d01b3c7a01971de3218c7a">00047</link> &#32;&#32;&#32;&#32;<link linkend="_namespace_bit_1ab14c175590d01b3c7a01971de3218c7a">string</link>&#32;<link linkend="_namespace_bit_1ab14c175590d01b3c7a01971de3218c7a">ToBinary</link>(ll&#32;n,<emphasis role="keywordtype">int</emphasis>&#32;len=32,<emphasis role="keywordtype">bool</emphasis>&#32;rev=<emphasis role="keyword">false</emphasis>)&#32;{
<anchor xml:id="_bit_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string&#32;ret;
<anchor xml:id="_bit_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;len;&#32;i++)&#32;ret+=<link linkend="_namespace_bit_1a0af6dce857ec8aa6cef9e6ac1d4410e6">HasBit</link><link linkend="_namespace_bit_1a0af6dce857ec8aa6cef9e6ac1d4410e6">(</link>n<link linkend="_namespace_bit_1a0af6dce857ec8aa6cef9e6ac1d4410e6">,</link>rev?len-1-i:i<link linkend="_namespace_bit_1a0af6dce857ec8aa6cef9e6ac1d4410e6">)</link>?<emphasis role="stringliteral">&apos;1&apos;</emphasis>:<emphasis role="stringliteral">&apos;0&apos;</emphasis>;
<anchor xml:id="_bit_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_bit_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_bit_8hpp_source_1l00052"/>00052 }
</programlisting></section>
