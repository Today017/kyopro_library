<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_convolution__ll_8hpp_source" xml:lang="ja">
<title>convolution_ll.hpp</title>
<indexterm><primary>math/convolution_ll.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_convolution__ll_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/modcal.hpp&quot;</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00003"/>00003 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/math/ntt.hpp&quot;</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00004"/>00004 
<anchor xml:id="_convolution__ll_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@brief&#32;x=ai&#32;mod&#32;mi&#32;を満たす&#32;x&#32;mod&#32;m&#32;を返す</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00006"/><link linkend="_convolution__ll_8hpp_1ae7aab791c88b29ea69a9d13a610596f8">00006</link> ll&#32;<link linkend="_convolution__ll_8hpp_1ae7aab791c88b29ea69a9d13a610596f8">Garner</link>(VL&#32;a,&#32;VL&#32;m,&#32;ll&#32;mod=<link linkend="_template_8hpp_1a1f713edb7a826e3710159658d6ef9815">INFL</link>+3)&#32;{
<anchor xml:id="_convolution__ll_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;m.push_back(mod);
<anchor xml:id="_convolution__ll_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_convolution__ll_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;VL&#32;kp(n+1),&#32;rm(n+1,1ll);
<anchor xml:id="_convolution__ll_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_convolution__ll_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;x=((a[i]-kp[i]+m[i])%m[i])*ModInv(rm[i],m[i]);
<anchor xml:id="_convolution__ll_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x%=m[i];
<anchor xml:id="_convolution__ll_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(j,i+1,n+1)&#32;{
<anchor xml:id="_convolution__ll_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(kp[j]+=rm[j]*x)%=m[j];
<anchor xml:id="_convolution__ll_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(rm[j]*=m[i])%=m[j];
<anchor xml:id="_convolution__ll_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_convolution__ll_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;}
<anchor xml:id="_convolution__ll_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;kp[n];
<anchor xml:id="_convolution__ll_8hpp_source_1l00019"/>00019 }
<anchor xml:id="_convolution__ll_8hpp_source_1l00020"/>00020 
<anchor xml:id="_convolution__ll_8hpp_source_1l00021"/>00021 <emphasis role="comment">///&#32;@brief&#32;a,&#32;b&#32;の自然数での畳み込みを返す</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00022"/>00022 <emphasis role="comment">///&#32;@tparam&#32;USE&#32;使う素数の個数</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00023"/>00023 <emphasis role="comment">///&#32;@brief&#32;`USE=1`&#32;最終的な配列の値が&#32;`X&#32;&lt;&#32;1224736769&#32;=&#32;1.2*10^9&#32;=&#32;2^30`</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00024"/>00024 <emphasis role="comment">///&#32;@brief&#32;`USE=2`&#32;最終的な配列の値が&#32;`X&#32;&lt;&#32;575334854091079681&#32;=&#32;5.8*10^17&#32;=&#32;2^59`</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00025"/>00025 <emphasis role="comment">///&#32;@brief&#32;`USE=3`&#32;最終的な配列の値が&#32;`X&#32;&lt;&#32;2^86`</emphasis>
<anchor xml:id="_convolution__ll_8hpp_source_1l00026"/>00026 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;USE&gt;
<anchor xml:id="_convolution__ll_8hpp_source_1l00027"/><link linkend="_convolution__ll_8hpp_1ae046307f7d332f472530fe7c34b118f6">00027</link> <link linkend="_convolution__ll_8hpp_1ae046307f7d332f472530fe7c34b118f6">VL</link>&#32;<link linkend="_convolution__ll_8hpp_1ae046307f7d332f472530fe7c34b118f6">ConvolveInt64</link>(VL&#32;a,&#32;VL&#32;b,&#32;ll&#32;mod=<link linkend="_template_8hpp_1a1f713edb7a826e3710159658d6ef9815">INFL</link>+3)&#32;{
<anchor xml:id="_convolution__ll_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;ll&#32;MOD1=1224736769,&#32;P1=3;
<anchor xml:id="_convolution__ll_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;ll&#32;MOD2=469762049,&#32;P2=3;
<anchor xml:id="_convolution__ll_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;ll&#32;MOD3=167772161,&#32;P3=3;
<anchor xml:id="_convolution__ll_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_n_t_t">NTT</link>&lt;MOD1,P1&gt;&#32;ntt1;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_n_t_t">NTT</link>&lt;MOD2,P2&gt;&#32;ntt2;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_n_t_t">NTT</link>&lt;MOD3,P3&gt;&#32;ntt3;
<anchor xml:id="_convolution__ll_8hpp_source_1l00032"/>00032 
<anchor xml:id="_convolution__ll_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(USE==1)&#32;{
<anchor xml:id="_convolution__ll_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c=ntt1.convolve(a,b);
<anchor xml:id="_convolution__ll_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VL&#32;ret(c.size());
<anchor xml:id="_convolution__ll_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,ret.size())&#32;ret[i]=c[i]%mod;
<anchor xml:id="_convolution__ll_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_convolution__ll_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;}
<anchor xml:id="_convolution__ll_8hpp_source_1l00039"/>00039 
<anchor xml:id="_convolution__ll_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(USE==2)&#32;{
<anchor xml:id="_convolution__ll_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c1=ntt1.convolve(a,b);
<anchor xml:id="_convolution__ll_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c2=ntt2.convolve(a,b);
<anchor xml:id="_convolution__ll_8hpp_source_1l00043"/>00043 
<anchor xml:id="_convolution__ll_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VL&#32;ret(c1.size());
<anchor xml:id="_convolution__ll_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,ret.size())&#32;ret[i]=Garner({c1[i],c2[i]},&#32;{MOD1,MOD2},&#32;mod);
<anchor xml:id="_convolution__ll_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_convolution__ll_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;}
<anchor xml:id="_convolution__ll_8hpp_source_1l00048"/>00048 
<anchor xml:id="_convolution__ll_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c1=ntt1.convolve(a,b);
<anchor xml:id="_convolution__ll_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c2=ntt2.convolve(a,b);
<anchor xml:id="_convolution__ll_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;c3=ntt3.convolve(a,b);
<anchor xml:id="_convolution__ll_8hpp_source_1l00052"/>00052 
<anchor xml:id="_convolution__ll_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;VL&#32;ret(c1.size());
<anchor xml:id="_convolution__ll_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,ret.size())&#32;ret[i]=Garner({c1[i],c2[i],c3[i]},&#32;{MOD1,MOD2,MOD3},&#32;mod);
<anchor xml:id="_convolution__ll_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_convolution__ll_8hpp_source_1l00056"/>00056 }
</programlisting></section>
