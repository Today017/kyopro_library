<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_debug_8hpp" xml:lang="ja">
<title>debug.hpp ファイル</title>
<indexterm><primary>debug.hpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;../kyopro_library/data_structure/fenwick_tree.hpp&quot;<?linebreak?>#include &quot;../kyopro_library/data_structure/segtree.hpp&quot;<?linebreak?>#include &quot;../kyopro_library/data_structure/segtree_lazy.hpp&quot;<?linebreak?>#include &quot;../kyopro_library/data_structure/segtree_dual.hpp&quot;<?linebreak?>#include &quot;../kyopro_library/graph/dsu.hpp&quot;<?linebreak?>#include &quot;../kyopro_library/others/int128.hpp&quot;<?linebreak?>#include &quot;../atcoder/modint&quot;<?linebreak?>#include &quot;../atcoder/segtree&quot;<?linebreak?>#include &quot;../atcoder/lazysegtree&quot;<?linebreak?>#include &quot;../atcoder/fenwicktree&quot;<?linebreak?>#include &quot;../atcoder/dsu&quot;<?linebreak?></programlisting><simplesect>
    <title>マクロ定義    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_debug_8hpp_1a03e896b87233163e2dc3399c65cdfc2d">print_line</link>&#160;&#160;&#160;cerr&lt;&lt;&quot;--------------------&quot;&lt;&lt;__LINE__&lt;&lt;&quot;--------------------&quot;&lt;&lt;&quot;\n&quot;</para>
</listitem>
            <listitem><para>#define <link linkend="_debug_8hpp_1a86ee3ff44c537d94ccbabf941a613688">debug</link>(...)</para>
</listitem>
            <listitem><para>#define <link linkend="_debug_8hpp_1a65b69c2a8630e2df66d8ae1a807bb71e">getName</link>(VariableName)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>関数    </title>
        <itemizedlist>
            <listitem><para>ostream &amp; <link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">operator&lt;&lt;</link> (ostream &amp;os, atcoder::modint998244353 a)</para>
</listitem>
            <listitem><para>ostream &amp; <link linkend="_debug_8hpp_1ae1f6cc1e46e1d7ca58e0bf60b205b0ec">operator&lt;&lt;</link> (ostream &amp;os, atcoder::modint1000000007 a)</para>
</listitem>
            <listitem><para>template&lt;typename T, T(*)(T, T) op, T(*)() e&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a5e4d606e7f9635ca065bc829d5284773">operator&lt;&lt;</link> (ostream &amp;os, atcoder::segtree&lt; T, op, e &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T, T(*)(T, T) op, T(*)() e, typename F, T(*)(F, T) mapping, F(*)(F, F) composition, F(*)() id&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1aa121af4594dd2f7c24ff086347b822d5">operator&lt;&lt;</link> (ostream &amp;os, atcoder::lazy_segtree&lt; T, op, e, F, mapping, composition, id &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">operator&lt;&lt;</link> (ostream &amp;os, atcoder::fenwick_tree&lt; T &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T1, typename T2&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11">operator&lt;&lt;</link> (ostream &amp;os, const pair&lt; T1, T2 &gt; &amp;p)</para>
</listitem>
            <listitem><para>template&lt;typename T1, typename T2, typename T3&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1aa8cd22b64cf2ebd061652b1708c88915">operator&lt;&lt;</link> (ostream &amp;os, const tuple&lt; T1, T2, T3 &gt; &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T1, typename T2, typename T3, typename T4&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a81d634ffdfdbbaab51c2d28a2fbcdf3c">operator&lt;&lt;</link> (ostream &amp;os, const tuple&lt; T1, T2, T3, T4 &gt; &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator&lt;&lt;</link> (ostream &amp;os, const vector&lt; vector&lt; vector&lt; T &gt; &gt; &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1ac23a3c4ae599ff6567870c096d21ec84">operator&lt;&lt;</link> (ostream &amp;os, const vector&lt; vector&lt; T &gt; &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a86c4a70ae315392e6ed1b5bcb17bf438">operator&lt;&lt;</link> (ostream &amp;os, const vector&lt; T &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a22f3aed69a6aa7f064d75c6998d30712">operator&lt;&lt;</link> (ostream &amp;os, const set&lt; T &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1aba2f7360fff717ea7c272b4b635c7bd3">operator&lt;&lt;</link> (ostream &amp;os, const multiset&lt; T &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a256f2cc52289c188512b417acf7ae980">operator&lt;&lt;</link> (ostream &amp;os, const deque&lt; T &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T1, typename T2&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a7732900ab0701fc3db4be35e776008fc">operator&lt;&lt;</link> (ostream &amp;os, const map&lt; T1, T2 &gt; &amp;a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a4cc54be4453c597e063ede2a7e6e49ec">operator&lt;&lt;</link> (ostream &amp;os, queue&lt; T &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a9c5af95a818637d08e5650b9f88c1576">operator&lt;&lt;</link> (ostream &amp;os, priority_queue&lt; T &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a5f45a34236ffe3f89befdc0b5a46834d">operator&lt;&lt;</link> (ostream &amp;os, <link linkend="_template_8hpp_1ae5ef38025fe230c42996fedcb333507a">rpriority_queue</link>&lt; T &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T, auto N&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a91e2cdb2969c33672890cabe9e9d4192">operator&lt;&lt;</link> (ostream &amp;os, array&lt; T, N &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a8a800eb09dba42a30a8db83c30d98a66">operator&lt;&lt;</link> (ostream &amp;os, <link linkend="_struct_fenwick_tree">FenwickTree</link>&lt; T &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a17bb956047d9039736f87ea02be1bf26">operator&lt;&lt;</link> (ostream &amp;os, <link linkend="_struct_seg_tree">SegTree</link>&lt; T &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T, typename U, auto M&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a6c9344bef51278c280248a1a4e2de2a7">operator&lt;&lt;</link> (ostream &amp;os, <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; T, U, M &gt; a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>ostream &amp; <link linkend="_debug_8hpp_1a5954642203d9ea8e5b467819d0cf678f">operator&lt;&lt;</link> (ostream &amp;os, <link linkend="_struct_seg_tree_dual">SegTreeDual</link>&lt; T &gt; a)</para>
</listitem>
            <listitem><para>ostream &amp; <link linkend="_debug_8hpp_1aac60a8c6e6839c4d4cd97e87241e7ad5">operator&lt;&lt;</link> (ostream &amp;os, <link linkend="_struct_d_s_u">DSU</link> a)</para>
</listitem>
            <listitem><para>ostream &amp; <link linkend="_debug_8hpp_1ac2fcdc6b38da4dbf782c94d651461112">operator&lt;&lt;</link> (ostream &amp;os, atcoder::dsu a)</para>
</listitem>
            <listitem><para>template&lt;typename T&gt; </para><para>void <link linkend="_debug_8hpp_1affe6a40813d5ceb07f91f0d70d0ec97e">DebugPring</link> (int i, T name)</para>
</listitem>
            <listitem><para>template&lt;typename T1, typename T2, typename... T3&gt; </para><para>void <link linkend="_debug_8hpp_1aaefa44588b21ef2ac4d9ca32783b9f33">DebugPring</link> (int i, const T1 &amp;name, const T2 &amp;a, const T3 &amp;...b)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>マクロ定義詳解</title>
<anchor xml:id="_debug_8hpp_1a03e896b87233163e2dc3399c65cdfc2d"/><section>
    <title>print_line</title>
<indexterm><primary>print_line</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>print_line</secondary></indexterm>
<para><computeroutput>#define print_line&#160;&#160;&#160;cerr&lt;&lt;&quot;--------------------&quot;&lt;&lt;__LINE__&lt;&lt;&quot;--------------------&quot;&lt;&lt;&quot;\n&quot;</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00246">246</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a86ee3ff44c537d94ccbabf941a613688"/><section>
    <title>debug</title>
<indexterm><primary>debug</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>debug</secondary></indexterm>
<para><computeroutput>#define debug( ...)</computeroutput></para><emphasis role="strong">値:</emphasis><programlisting linenumbering="unnumbered"><link linkend="_debug_8hpp_1affe6a40813d5ceb07f91f0d70d0ec97e">DebugPring</link>(0,#__VA_ARGS__,__VA_ARGS__)
</programlisting><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00247">247</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a65b69c2a8630e2df66d8ae1a807bb71e"/><section>
    <title>getName</title>
<indexterm><primary>getName</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>getName</secondary></indexterm>
<para><computeroutput>#define getName( VariableName)</computeroutput></para><emphasis role="strong">値:</emphasis><programlisting linenumbering="unnumbered"><emphasis role="preprocessor">#VariableName</emphasis>
</programlisting><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00248">248</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3"/><section>
    <title>operator&lt;&lt;()<computeroutput>[1/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, atcoder::modint998244353 a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00013">13</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1ae1f6cc1e46e1d7ca58e0bf60b205b0ec"/><section>
    <title>operator&lt;&lt;()<computeroutput>[2/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, atcoder::modint1000000007 a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00017">17</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a5e4d606e7f9635ca065bc829d5284773"/><section>
    <title>operator&lt;&lt;()<computeroutput>[3/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T, T(*)(T, T) op, T(*)() e&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, atcoder::segtree&lt; T, op, e &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00022">22</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1aa121af4594dd2f7c24ff086347b822d5"/><section>
    <title>operator&lt;&lt;()<computeroutput>[4/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T, T(*)(T, T) op, T(*)() e, typename F, T(*)(F, T) mapping, F(*)(F, F) composition, F(*)() id&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, atcoder::lazy_segtree&lt; T, op, e, F, mapping, composition, id &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00033">33</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52"/><section>
    <title>operator&lt;&lt;()<computeroutput>[5/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, atcoder::fenwick_tree&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00044">44</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11"/><section>
    <title>operator&lt;&lt;()<computeroutput>[6/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T1, typename T2&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const pair&lt; T1, T2 &gt; &amp; p)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00055">55</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1aa8cd22b64cf2ebd061652b1708c88915"/><section>
    <title>operator&lt;&lt;()<computeroutput>[7/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T1, typename T2, typename T3&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const tuple&lt; T1, T2, T3 &gt; &amp; t)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00060">60</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a81d634ffdfdbbaab51c2d28a2fbcdf3c"/><section>
    <title>operator&lt;&lt;()<computeroutput>[8/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T1, typename T2, typename T3, typename T4&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const tuple&lt; T1, T2, T3, T4 &gt; &amp; t)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00065">65</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b"/><section>
    <title>operator&lt;&lt;()<computeroutput>[9/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const vector&lt; vector&lt; vector&lt; T &gt; &gt; &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00070">70</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1ac23a3c4ae599ff6567870c096d21ec84"/><section>
    <title>operator&lt;&lt;()<computeroutput>[10/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const vector&lt; vector&lt; T &gt; &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00091">91</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a86c4a70ae315392e6ed1b5bcb17bf438"/><section>
    <title>operator&lt;&lt;()<computeroutput>[11/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const vector&lt; T &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00107">107</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a22f3aed69a6aa7f064d75c6998d30712"/><section>
    <title>operator&lt;&lt;()<computeroutput>[12/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const set&lt; T &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00118">118</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1aba2f7360fff717ea7c272b4b635c7bd3"/><section>
    <title>operator&lt;&lt;()<computeroutput>[13/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const multiset&lt; T &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00126">126</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a256f2cc52289c188512b417acf7ae980"/><section>
    <title>operator&lt;&lt;()<computeroutput>[14/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const deque&lt; T &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00134">134</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a7732900ab0701fc3db4be35e776008fc"/><section>
    <title>operator&lt;&lt;()<computeroutput>[15/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T1, typename T2&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, const map&lt; T1, T2 &gt; &amp; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00142">142</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a4cc54be4453c597e063ede2a7e6e49ec"/><section>
    <title>operator&lt;&lt;()<computeroutput>[16/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, queue&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00149">149</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a9c5af95a818637d08e5650b9f88c1576"/><section>
    <title>operator&lt;&lt;()<computeroutput>[17/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, priority_queue&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00160">160</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a5f45a34236ffe3f89befdc0b5a46834d"/><section>
    <title>operator&lt;&lt;()<computeroutput>[18/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, <link linkend="_template_8hpp_1ae5ef38025fe230c42996fedcb333507a">rpriority_queue</link>&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00171">171</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a91e2cdb2969c33672890cabe9e9d4192"/><section>
    <title>operator&lt;&lt;()<computeroutput>[19/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T, auto N&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, array&lt; T, N &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00182">182</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a8a800eb09dba42a30a8db83c30d98a66"/><section>
    <title>operator&lt;&lt;()<computeroutput>[20/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, <link linkend="_struct_fenwick_tree">FenwickTree</link>&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00192">192</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a17bb956047d9039736f87ea02be1bf26"/><section>
    <title>operator&lt;&lt;()<computeroutput>[21/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, <link linkend="_struct_seg_tree">SegTree</link>&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00203">203</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a6c9344bef51278c280248a1a4e2de2a7"/><section>
    <title>operator&lt;&lt;()<computeroutput>[22/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T, typename U, auto M&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; T, U, M &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00214">214</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1a5954642203d9ea8e5b467819d0cf678f"/><section>
    <title>operator&lt;&lt;()<computeroutput>[23/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, <link linkend="_struct_seg_tree_dual">SegTreeDual</link>&lt; T &gt; a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00225">225</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1aac60a8c6e6839c4d4cd97e87241e7ad5"/><section>
    <title>operator&lt;&lt;()<computeroutput>[24/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, <link linkend="_struct_d_s_u">DSU</link> a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00235">235</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1ac2fcdc6b38da4dbf782c94d651461112"/><section>
    <title>operator&lt;&lt;()<computeroutput>[25/25]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>ostream &amp; operator&lt;&lt; (ostream &amp; os, atcoder::dsu a)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00240">240</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1affe6a40813d5ceb07f91f0d70d0ec97e"/><section>
    <title>DebugPring()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>DebugPring</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>DebugPring</secondary></indexterm>
<computeroutput>template&lt;typename T&gt; </computeroutput><para><computeroutput>void DebugPring (int i, T name)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00251">251</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_debug_8hpp_1aaefa44588b21ef2ac4d9ca32783b9f33"/><section>
    <title>DebugPring()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>DebugPring</primary><secondary>debug.hpp</secondary></indexterm>
<indexterm><primary>debug.hpp</primary><secondary>DebugPring</secondary></indexterm>
<computeroutput>template&lt;typename T1, typename T2, typename... T3&gt; </computeroutput><para><computeroutput>void DebugPring (int i, const T1 &amp; name, const T2 &amp; a, const T3 &amp;... b)</computeroutput></para><para>
 <link linkend="_debug_8hpp_source">debug.hpp</link> の <link linkend="_debug_8hpp_source_1l00253">253</link> 行目に定義があります。</para>
</section>
</section>
</section>
