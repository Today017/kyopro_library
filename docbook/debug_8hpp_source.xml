<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_debug_8hpp_source" xml:lang="ja">
<title>debug.hpp</title>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_debug_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../kyopro_library/data_structure/fenwick_tree.hpp&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../kyopro_library/data_structure/segtree.hpp&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00003"/>00003 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../kyopro_library/data_structure/segtree_lazy.hpp&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../kyopro_library/data_structure/segtree_dual.hpp&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00005"/>00005 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../kyopro_library/graph/dsu.hpp&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00006"/>00006 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../kyopro_library/others/int128.hpp&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00007"/>00007 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../atcoder/modint&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00008"/>00008 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../atcoder/segtree&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00009"/>00009 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../atcoder/lazysegtree&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00010"/>00010 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../atcoder/fenwicktree&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00011"/>00011 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../atcoder/dsu&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00012"/>00012 
<anchor xml:id="_debug_8hpp_source_1l00013"/><link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">00013</link> <link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;atcoder::modint998244353&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;os&lt;&lt;a.val();
<anchor xml:id="_debug_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00016"/>00016 }
<anchor xml:id="_debug_8hpp_source_1l00017"/><link linkend="_debug_8hpp_1ae1f6cc1e46e1d7ca58e0bf60b205b0ec">00017</link> <link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;atcoder::modint1000000007&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;os&lt;&lt;a.val();
<anchor xml:id="_debug_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00020"/>00020 }
<anchor xml:id="_debug_8hpp_source_1l00021"/>00021 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T(*op)(T,T),&#32;T(*e)()&gt;
<anchor xml:id="_debug_8hpp_source_1l00022"/><link linkend="_debug_8hpp_1a5e4d606e7f9635ca065bc829d5284773">00022</link> <link linkend="_debug_8hpp_1a5e4d606e7f9635ca065bc829d5284773">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a5e4d606e7f9635ca065bc829d5284773">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;atcoder::segtree&lt;T,op,e&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.get_size();
<anchor xml:id="_debug_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a.prod(i,i+1);
<anchor xml:id="_debug_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00031"/>00031 }
<anchor xml:id="_debug_8hpp_source_1l00032"/>00032 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T(*op)(T,T),&#32;T(*e)(),&#32;<emphasis role="keyword">typename</emphasis>&#32;F,&#32;T(*mapping)(F,T),&#32;F(*composition)(F,F),&#32;F(*id)()&gt;
<anchor xml:id="_debug_8hpp_source_1l00033"/><link linkend="_debug_8hpp_1aa121af4594dd2f7c24ff086347b822d5">00033</link> <link linkend="_debug_8hpp_1aa121af4594dd2f7c24ff086347b822d5">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aa121af4594dd2f7c24ff086347b822d5">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;atcoder::lazy_segtree&lt;T,op,e,F,mapping,composition,id&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.get_size();
<anchor xml:id="_debug_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a.get(i);
<anchor xml:id="_debug_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00042"/>00042 }
<anchor xml:id="_debug_8hpp_source_1l00043"/>00043 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00044"/><link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">00044</link> <link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;atcoder::fenwick_tree&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a.sum(i,i+1);
<anchor xml:id="_debug_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00053"/>00053 }
<anchor xml:id="_debug_8hpp_source_1l00054"/>00054 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_debug_8hpp_source_1l00055"/><link linkend="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11">00055</link> <link linkend="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;T1,T2&gt;&amp;&#32;p)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&lt;&lt;p.first&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&lt;&lt;p.second&lt;&lt;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00058"/>00058 }
<anchor xml:id="_debug_8hpp_source_1l00059"/>00059 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2,&#32;<emphasis role="keyword">typename</emphasis>&#32;T3&gt;
<anchor xml:id="_debug_8hpp_source_1l00060"/><link linkend="_debug_8hpp_1aa8cd22b64cf2ebd061652b1708c88915">00060</link> <link linkend="_debug_8hpp_1aa8cd22b64cf2ebd061652b1708c88915">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aa8cd22b64cf2ebd061652b1708c88915">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;tuple&lt;T1,T2,T3&gt;&amp;&#32;t)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&lt;&lt;get&lt;0&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&lt;&lt;get&lt;1&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&lt;&lt;get&lt;2&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00063"/>00063 }
<anchor xml:id="_debug_8hpp_source_1l00064"/>00064 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2,&#32;<emphasis role="keyword">typename</emphasis>&#32;T3,&#32;<emphasis role="keyword">typename</emphasis>&#32;T4&gt;
<anchor xml:id="_debug_8hpp_source_1l00065"/><link linkend="_debug_8hpp_1a81d634ffdfdbbaab51c2d28a2fbcdf3c">00065</link> <link linkend="_debug_8hpp_1a81d634ffdfdbbaab51c2d28a2fbcdf3c">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a81d634ffdfdbbaab51c2d28a2fbcdf3c">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;tuple&lt;T1,T2,T3,T4&gt;&amp;&#32;t)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;(&quot;</emphasis>&lt;&lt;get&lt;0&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&lt;&lt;get&lt;1&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&lt;&lt;get&lt;2&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>&lt;&lt;get&lt;3&gt;(t)&lt;&lt;<emphasis role="stringliteral">&quot;)&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00068"/>00068 }
<anchor xml:id="_debug_8hpp_source_1l00069"/>00069 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00070"/><link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">00070</link> <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;vector&lt;vector&lt;T&gt;&gt;&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;I=a.size();
<anchor xml:id="_debug_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[\n&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,I)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&lt;&lt;i&lt;&lt;<emphasis role="stringliteral">&quot;:[\n&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;J=a[i].size();
<anchor xml:id="_debug_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,J)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&quot;</emphasis>&lt;&lt;j&lt;&lt;<emphasis role="stringliteral">&quot;:[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;K=a[i][j].size();
<anchor xml:id="_debug_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(k,K)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i][j][k];
<anchor xml:id="_debug_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(k!=K-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]\n&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;&#32;]\n&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00089"/>00089 }
<anchor xml:id="_debug_8hpp_source_1l00090"/>00090 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00091"/><link linkend="_debug_8hpp_1ac23a3c4ae599ff6567870c096d21ec84">00091</link> <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;vector&lt;T&gt;&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[\n&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;I=a.size();
<anchor xml:id="_debug_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,I)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>&lt;&lt;i&lt;&lt;<emphasis role="stringliteral">&quot;:[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;J=a[i].size();
<anchor xml:id="_debug_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,J)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i][j];
<anchor xml:id="_debug_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j!=J-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]\n&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00105"/>00105 }
<anchor xml:id="_debug_8hpp_source_1l00106"/>00106 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00107"/><link linkend="_debug_8hpp_1a86c4a70ae315392e6ed1b5bcb17bf438">00107</link> <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;T&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i];
<anchor xml:id="_debug_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00116"/>00116 }
<anchor xml:id="_debug_8hpp_source_1l00117"/>00117 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00118"/><link linkend="_debug_8hpp_1a22f3aed69a6aa7f064d75c6998d30712">00118</link> <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;set&lt;T&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(T&#32;x:a)&#32;os&lt;&lt;x&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00124"/>00124 }
<anchor xml:id="_debug_8hpp_source_1l00125"/>00125 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00126"/><link linkend="_debug_8hpp_1aba2f7360fff717ea7c272b4b635c7bd3">00126</link> <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;multiset&lt;T&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(T&#32;x:a)&#32;os&lt;&lt;x&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00132"/>00132 }
<anchor xml:id="_debug_8hpp_source_1l00133"/>00133 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00134"/><link linkend="_debug_8hpp_1a256f2cc52289c188512b417acf7ae980">00134</link> <link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1ae05ad88af9fd92b106b2d09af76b3b2b">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;deque&lt;T&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(T&#32;x:a)&#32;os&lt;&lt;x&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00140"/>00140 }
<anchor xml:id="_debug_8hpp_source_1l00141"/>00141 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
<anchor xml:id="_debug_8hpp_source_1l00142"/><link linkend="_debug_8hpp_1a7732900ab0701fc3db4be35e776008fc">00142</link> <link linkend="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a64933e45419bfa3a837931d86ef85c11">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;map&lt;T1,T2&gt;&amp;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(pair&lt;T1,T2&gt;&#32;x:a)&#32;os&lt;&lt;x&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00147"/>00147 }
<anchor xml:id="_debug_8hpp_source_1l00148"/>00148 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00149"/><link linkend="_debug_8hpp_1a4cc54be4453c597e063ede2a7e6e49ec">00149</link> <link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;queue&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(!a.empty())&#32;{
<anchor xml:id="_debug_8hpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a.front()&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a.pop();
<anchor xml:id="_debug_8hpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00158"/>00158 }
<anchor xml:id="_debug_8hpp_source_1l00159"/>00159 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00160"/><link linkend="_debug_8hpp_1a9c5af95a818637d08e5650b9f88c1576">00160</link> <link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;priority_queue&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(!a.empty())&#32;{
<anchor xml:id="_debug_8hpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a.top()&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a.pop();
<anchor xml:id="_debug_8hpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00169"/>00169 }
<anchor xml:id="_debug_8hpp_source_1l00170"/>00170 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00171"/><link linkend="_debug_8hpp_1a5f45a34236ffe3f89befdc0b5a46834d">00171</link> <link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aba7dd0ae54f6004956fe578695f1fc52">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;rpriority_queue&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(!a.empty())&#32;{
<anchor xml:id="_debug_8hpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a.top()&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;a.pop();
<anchor xml:id="_debug_8hpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00180"/>00180 }
<anchor xml:id="_debug_8hpp_source_1l00181"/>00181 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">auto</emphasis>&#32;N&gt;
<anchor xml:id="_debug_8hpp_source_1l00182"/><link linkend="_debug_8hpp_1a91e2cdb2969c33672890cabe9e9d4192">00182</link> <link linkend="_debug_8hpp_1a91e2cdb2969c33672890cabe9e9d4192">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a91e2cdb2969c33672890cabe9e9d4192">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;array&lt;T,N&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,N)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i];
<anchor xml:id="_debug_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=N-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00190"/>00190 }
<anchor xml:id="_debug_8hpp_source_1l00191"/>00191 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00192"/><link linkend="_debug_8hpp_1a8a800eb09dba42a30a8db83c30d98a66">00192</link> <link linkend="_debug_8hpp_1a8a800eb09dba42a30a8db83c30d98a66">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a8a800eb09dba42a30a8db83c30d98a66">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<link linkend="_struct_fenwick_tree">FenwickTree</link>&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i];
<anchor xml:id="_debug_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00201"/>00201 }
<anchor xml:id="_debug_8hpp_source_1l00202"/>00202 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00203"/><link linkend="_debug_8hpp_1a17bb956047d9039736f87ea02be1bf26">00203</link> <link linkend="_debug_8hpp_1a17bb956047d9039736f87ea02be1bf26">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a17bb956047d9039736f87ea02be1bf26">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<link linkend="_struct_seg_tree">SegTree</link>&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i];
<anchor xml:id="_debug_8hpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00212"/>00212 }
<anchor xml:id="_debug_8hpp_source_1l00213"/>00213 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;U,&#32;<emphasis role="keyword">auto</emphasis>&#32;M&gt;
<anchor xml:id="_debug_8hpp_source_1l00214"/><link linkend="_debug_8hpp_1a6c9344bef51278c280248a1a4e2de2a7">00214</link> <link linkend="_debug_8hpp_1a6c9344bef51278c280248a1a4e2de2a7">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a6c9344bef51278c280248a1a4e2de2a7">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;SegTreeLazy&lt;T,U,M&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i];
<anchor xml:id="_debug_8hpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00223"/>00223 }
<anchor xml:id="_debug_8hpp_source_1l00224"/>00224 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00225"/><link linkend="_debug_8hpp_1a5954642203d9ea8e5b467819d0cf678f">00225</link> <link linkend="_debug_8hpp_1a5954642203d9ea8e5b467819d0cf678f">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a5954642203d9ea8e5b467819d0cf678f">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<link linkend="_struct_seg_tree_dual">SegTreeDual</link>&lt;T&gt;&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=a.size();
<anchor xml:id="_debug_8hpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;[&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os&lt;&lt;a[i];
<anchor xml:id="_debug_8hpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=n-1)&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00232"/>00232 &#32;&#32;&#32;&#32;os&lt;&lt;<emphasis role="stringliteral">&quot;]&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00234"/>00234 }
<anchor xml:id="_debug_8hpp_source_1l00235"/><link linkend="_debug_8hpp_1aac60a8c6e6839c4d4cd97e87241e7ad5">00235</link> <link linkend="_debug_8hpp_1aac60a8c6e6839c4d4cd97e87241e7ad5">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1aac60a8c6e6839c4d4cd97e87241e7ad5">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;<link linkend="_struct_d_s_u">DSU</link>&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;VVI&#32;group=a.groups();
<anchor xml:id="_debug_8hpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;os&lt;&lt;group;
<anchor xml:id="_debug_8hpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00239"/>00239 }
<anchor xml:id="_debug_8hpp_source_1l00240"/><link linkend="_debug_8hpp_1ac2fcdc6b38da4dbf782c94d651461112">00240</link> <link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">ostream</link>&amp;&#32;<link linkend="_debug_8hpp_1a88f2ebecce988a8545a35ec721a452b3">operator</link>&lt;&lt;(ostream&amp;&#32;os,&#32;atcoder::dsu&#32;a)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;VVI&#32;group=a.groups();
<anchor xml:id="_debug_8hpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;os&lt;&lt;group;
<anchor xml:id="_debug_8hpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os;
<anchor xml:id="_debug_8hpp_source_1l00244"/>00244 }
<anchor xml:id="_debug_8hpp_source_1l00245"/>00245 
<anchor xml:id="_debug_8hpp_source_1l00246"/><link linkend="_debug_8hpp_1a03e896b87233163e2dc3399c65cdfc2d">00246</link> <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">define</emphasis>&#32;<emphasis role="preprocessor">print_line</emphasis>&#32;<emphasis role="preprocessor">cerr</emphasis><emphasis role="preprocessor">&lt;&lt;</emphasis><emphasis role="stringliteral">&quot;--------------------&quot;</emphasis><emphasis role="preprocessor">&lt;&lt;</emphasis><emphasis role="preprocessor">__LINE__</emphasis><emphasis role="preprocessor">&lt;&lt;</emphasis><emphasis role="stringliteral">&quot;--------------------&quot;</emphasis><emphasis role="preprocessor">&lt;&lt;</emphasis><emphasis role="stringliteral">&quot;\n&quot;</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00247"/><link linkend="_debug_8hpp_1a86ee3ff44c537d94ccbabf941a613688">00247</link> <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">define</emphasis>&#32;<emphasis role="preprocessor">debug</emphasis><emphasis role="preprocessor">(</emphasis><emphasis role="preprocessor">...</emphasis><emphasis role="preprocessor">)</emphasis>&#32;<emphasis role="preprocessor">DebugPring</emphasis><emphasis role="preprocessor">(</emphasis>0<emphasis role="preprocessor">,</emphasis><emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">__VA_ARGS__</emphasis><emphasis role="preprocessor">,</emphasis><emphasis role="preprocessor">__VA_ARGS__</emphasis><emphasis role="preprocessor">)</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00248"/><link linkend="_debug_8hpp_1a65b69c2a8630e2df66d8ae1a807bb71e">00248</link> <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">define</emphasis>&#32;<emphasis role="preprocessor">getName</emphasis><emphasis role="preprocessor">(</emphasis><emphasis role="preprocessor">VariableName</emphasis><emphasis role="preprocessor">)</emphasis>&#32;<emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">VariableName</emphasis>
<anchor xml:id="_debug_8hpp_source_1l00249"/>00249 
<anchor xml:id="_debug_8hpp_source_1l00250"/>00250 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_debug_8hpp_source_1l00251"/><link linkend="_debug_8hpp_1affe6a40813d5ceb07f91f0d70d0ec97e">00251</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_debug_8hpp_1affe6a40813d5ceb07f91f0d70d0ec97e">DebugPring</link>(<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;T&#32;name)&#32;{&#32;cerr&lt;&lt;endl;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00252"/>00252 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2,&#32;<emphasis role="keyword">typename</emphasis>...T3&gt;
<anchor xml:id="_debug_8hpp_source_1l00253"/><link linkend="_debug_8hpp_1aaefa44588b21ef2ac4d9ca32783b9f33">00253</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_debug_8hpp_1aaefa44588b21ef2ac4d9ca32783b9f33">DebugPring</link>(<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keyword">const</emphasis>&#32;T1&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;T2&amp;&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;T3&amp;&#32;...b)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;cerr&lt;&lt;<emphasis role="stringliteral">&quot;\033[31m&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tmp=0;
<anchor xml:id="_debug_8hpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="_debug_8hpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(name[i]==<emphasis role="stringliteral">&apos;\0&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tmp==0&amp;&amp;name[i]==<emphasis role="stringliteral">&apos;,&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cerr&lt;&lt;name[i];
<anchor xml:id="_debug_8hpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(name[i]==<emphasis role="stringliteral">&apos;(&apos;</emphasis>)&#32;tmp++;
<anchor xml:id="_debug_8hpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(name[i]==<emphasis role="stringliteral">&apos;)&apos;</emphasis>)&#32;tmp--;
<anchor xml:id="_debug_8hpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="_debug_8hpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debug_8hpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;cerr&lt;&lt;<emphasis role="stringliteral">&quot;\033[32m&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;cerr&lt;&lt;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&lt;&lt;a&lt;&lt;<emphasis role="stringliteral">&quot;,&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;cerr&lt;&lt;<emphasis role="stringliteral">&quot;\033[0m&quot;</emphasis>;
<anchor xml:id="_debug_8hpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;DebugPring(i+1,name,b...);
<anchor xml:id="_debug_8hpp_source_1l00268"/>00268 }
</programlisting></section>
