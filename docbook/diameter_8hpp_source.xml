<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_diameter_8hpp_source" xml:lang="ja">
<title>diameter.hpp</title>
<indexterm><primary>graph/tree/diameter.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_diameter_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_diameter_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/graph/shortest_path/dijkstra.hpp&quot;</emphasis>
<anchor xml:id="_diameter_8hpp_source_1l00003"/>00003 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/graph/shortest_path/bfs.hpp&quot;</emphasis>
<anchor xml:id="_diameter_8hpp_source_1l00004"/>00004 
<anchor xml:id="_diameter_8hpp_source_1l00005"/><link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">00005</link> <link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">pair</link>&lt;<link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">VI</link>,<link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">ll</link>&gt;&#32;<link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">TreeDiameter</link>(<emphasis role="keyword">const</emphasis>&#32;WG&amp;&#32;g)&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;VL&#32;dist=Dijkstra(g);
<anchor xml:id="_diameter_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;s=max_element(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(dist))-dist.begin();
<anchor xml:id="_diameter_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;dist=Dijkstra(g,s);
<anchor xml:id="_diameter_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t=max_element(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(dist))-dist.begin();
<anchor xml:id="_diameter_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;VI&#32;path;
<anchor xml:id="_diameter_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;now=t;
<anchor xml:id="_diameter_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(now!=s)&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path.push_back(now);
<anchor xml:id="_diameter_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>[nxt,cost]:g[now])&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dist[now]==dist[nxt]+cost)&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;now=nxt;
<anchor xml:id="_diameter_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_diameter_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_diameter_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_diameter_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;}
<anchor xml:id="_diameter_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;path.push_back(s);
<anchor xml:id="_diameter_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;ll&#32;diameter=dist[t];
<anchor xml:id="_diameter_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{path,diameter};
<anchor xml:id="_diameter_8hpp_source_1l00024"/>00024 }
<anchor xml:id="_diameter_8hpp_source_1l00025"/>00025 
<anchor xml:id="_diameter_8hpp_source_1l00026"/><link linkend="_diameter_8hpp_1a316f2499444d82bfb41454b6df45216a">00026</link> <link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">pair</link>&lt;<link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">VI</link>,<link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">ll</link>&gt;<link linkend="_diameter_8hpp_1a24ee70241e9b08a7a6f279c8c1e151ce">TreeDiameter</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g)&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;VL&#32;dist=BFS(g);
<anchor xml:id="_diameter_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;s=max_element(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(dist))-dist.begin();
<anchor xml:id="_diameter_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;dist=BFS(g,s);
<anchor xml:id="_diameter_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t=max_element(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(dist))-dist.begin();
<anchor xml:id="_diameter_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;VI&#32;path;
<anchor xml:id="_diameter_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;now=t;
<anchor xml:id="_diameter_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(now!=s)&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path.push_back(now);
<anchor xml:id="_diameter_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:g[now])&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dist[now]==dist[nxt]+1)&#32;{
<anchor xml:id="_diameter_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;now=nxt;
<anchor xml:id="_diameter_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_diameter_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_diameter_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_diameter_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="_diameter_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;path.push_back(s);
<anchor xml:id="_diameter_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;ll&#32;diameter=dist[t];
<anchor xml:id="_diameter_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{path,diameter};
<anchor xml:id="_diameter_8hpp_source_1l00045"/>00045 }
</programlisting></section>
