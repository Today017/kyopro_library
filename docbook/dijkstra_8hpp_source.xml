<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_dijkstra_8hpp_source" xml:lang="ja">
<title>dijkstra.hpp</title>
<indexterm><primary>graph/shortest_path/dijkstra.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_dijkstra_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_dijkstra_8hpp_source_1l00002"/>00002 
<anchor xml:id="_dijkstra_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;ダイクストラ法</emphasis>
<anchor xml:id="_dijkstra_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;グラフ&#32;g&#32;に対し、頂点&#32;start&#32;から各頂点までの最短距離を求める</emphasis>
<anchor xml:id="_dijkstra_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@note&#32;O(E&#32;log&#32;V)</emphasis>
<anchor xml:id="_dijkstra_8hpp_source_1l00006"/><link linkend="_dijkstra_8hpp_1acfdfb589a639d25a8d7ec3d0e9613925">00006</link> <link linkend="_dijkstra_8hpp_1acfdfb589a639d25a8d7ec3d0e9613925">VL</link>&#32;<link linkend="_dijkstra_8hpp_1acfdfb589a639d25a8d7ec3d0e9613925">Dijkstra</link>(<emphasis role="keyword">const</emphasis>&#32;WG&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;start=0)&#32;{
<anchor xml:id="_dijkstra_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_dijkstra_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;VL&#32;ret(n,<link linkend="_template_8hpp_1a1f713edb7a826e3710159658d6ef9815">INFL</link>);&#32;ret[start]=0;
<anchor xml:id="_dijkstra_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;rpriority_queue&lt;pair&lt;ll,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;pq;&#32;pq.push({0,start});
<anchor xml:id="_dijkstra_8hpp_source_1l00010"/>00010 
<anchor xml:id="_dijkstra_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(!pq.empty())&#32;{
<anchor xml:id="_dijkstra_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[tmp,now]=pq.top();pq.pop();
<anchor xml:id="_dijkstra_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(ret[now]&lt;tmp)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_dijkstra_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;[nxt,cost]:g[now])&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_template_8hpp_1afab395ab2eac3679be924c315291bf58">chmin</link>(ret[nxt],ret[now]+cost))&#32;pq.push({ret[nxt],nxt});
<anchor xml:id="_dijkstra_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dijkstra_8hpp_source_1l00016"/>00016 
<anchor xml:id="_dijkstra_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_dijkstra_8hpp_source_1l00018"/>00018 }
</programlisting></section>
