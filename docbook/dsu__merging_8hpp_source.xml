<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_dsu__merging_8hpp_source" xml:lang="ja">
<title>dsu_merging.hpp</title>
<indexterm><primary>graph/dsu_merging.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_dsu__merging_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis>&#32;<emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00002"/>00002 
<anchor xml:id="_dsu__merging_8hpp_source_1l00003"/><link linkend="_struct_dsu_base_semigroup">00003</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_dsu_base_semigroup">DsuBaseSemigroup</link>&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00004"/><link linkend="_struct_dsu_base_semigroup_1ab06cb75c47d61d7ec2abb9de3905a8f1">00004</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=ll;
<anchor xml:id="_dsu__merging_8hpp_source_1l00005"/><link linkend="_struct_dsu_base_semigroup_1ac87aa6aadee2679b94075ab09340dc81">00005</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Type&#32;<link linkend="_struct_dsu_base_semigroup_1ac87aa6aadee2679b94075ab09340dc81">op</link>(Type&#32;a,&#32;Type&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a+b;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00006"/>00006 };
<anchor xml:id="_dsu__merging_8hpp_source_1l00007"/>00007 
<anchor xml:id="_dsu__merging_8hpp_source_1l00008"/>00008 <emphasis role="comment">///&#32;@brief&#32;値をマージする&#32;DSU</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00009"/>00009 <emphasis role="comment">///&#32;@tparam&#32;Semigroup&#32;半群</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00010"/>00010 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Semigroup=DsuBaseSemigroup&gt;
<anchor xml:id="_dsu__merging_8hpp_source_1l00011"/><link linkend="_struct_dsu_merging">00011</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_dsu_merging">DsuMerging</link>&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00012"/><link linkend="_struct_dsu_merging_1a31648bc93d4bc29960fe93fff7ca0914">00012</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">typename</emphasis>&#32;Semigroup::Type;
<anchor xml:id="_dsu__merging_8hpp_source_1l00013"/><link linkend="_struct_dsu_merging_1a6e06d3c3b50471bd58ea808d9b63ad77">00013</link> &#32;&#32;&#32;&#32;<link linkend="_struct_dsu_merging_1a6e06d3c3b50471bd58ea808d9b63ad77">DsuMerging</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_dsu__merging_8hpp_source_1l00014"/>00014 
<anchor xml:id="_dsu__merging_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;コンストラクタ</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00016"/><link linkend="_struct_dsu_merging_1a176fb90f26e3696383392e94d7491cdb">00016</link> &#32;&#32;&#32;&#32;<link linkend="_struct_dsu_merging_1a176fb90f26e3696383392e94d7491cdb">DsuMerging</link>(<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;Type&gt;&amp;&#32;v)&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par=VI(n);&#32;iota(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(par),0);
<anchor xml:id="_dsu__merging_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sz=VI(n,1);
<anchor xml:id="_dsu__merging_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat=v;
<anchor xml:id="_dsu__merging_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forest_count=n;
<anchor xml:id="_dsu__merging_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00022"/>00022 
<anchor xml:id="_dsu__merging_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;を含む連結成分の代表元を返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(α(N))</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00025"/><link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">00025</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">find</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(par[x]==x)&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
<anchor xml:id="_dsu__merging_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;par[x]=find(par[x]);
<anchor xml:id="_dsu__merging_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00029"/>00029 
<anchor xml:id="_dsu__merging_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;と&#32;y&#32;を連結し、true&#32;を返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;既に連結されている場合は&#32;false&#32;を返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(α(N))</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00033"/><link linkend="_struct_dsu_merging_1adcc3916018699b654242ea713b02adac">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_dsu_merging_1adcc3916018699b654242ea713b02adac">merge</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x=<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">find</link><link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">(</link>x<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">)</link>;&#32;y=<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">find</link><link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">(</link>y<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">)</link>;
<anchor xml:id="_dsu__merging_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x==y)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_dsu__merging_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sz[x]&gt;=sz[y])&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[y]=x;&#32;sz[x]+=sz[y];
<anchor xml:id="_dsu__merging_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[x]=Semigroup::op(dat[x],dat[y]);
<anchor xml:id="_dsu__merging_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[x]=y;&#32;sz[y]+=sz[x];
<anchor xml:id="_dsu__merging_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[y]=Semigroup::op(dat[x],dat[y]);
<anchor xml:id="_dsu__merging_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forest_count--;
<anchor xml:id="_dsu__merging_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_dsu__merging_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00046"/>00046 
<anchor xml:id="_dsu__merging_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;を含む連結成分の半群積を返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00048"/><link linkend="_struct_dsu_merging_1aae3ac2e8c0546029e540523cfb19d57f">00048</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Type&amp;&#32;<link linkend="_struct_dsu_merging_1aae3ac2e8c0546029e540523cfb19d57f">get</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;dat[find(x)];&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00049"/>00049 
<anchor xml:id="_dsu__merging_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;を含む連結成分のサイズを返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00051"/><link linkend="_struct_dsu_merging_1ac70e527b5635c63da7c8923816d4e66e">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_dsu_merging_1ac70e527b5635c63da7c8923816d4e66e">size</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;sz[find(x)];&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00052"/>00052 
<anchor xml:id="_dsu__merging_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;と&#32;y&#32;が同じ連結成分に属するか否かを返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00054"/><link linkend="_struct_dsu_merging_1a2c094054f83b0f6b1adeb6dea4f1b6e8">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_dsu_merging_1a2c094054f83b0f6b1adeb6dea4f1b6e8">same</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;<emphasis role="keyword">const</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">find</link><link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">(</link>x<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">)</link>==<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">find</link><link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">(</link>y<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">)</link>;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00055"/>00055 
<anchor xml:id="_dsu__merging_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;連結成分の個数を返す</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00057"/><link linkend="_struct_dsu_merging_1a76200780dde72296276b892b74e6da98">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_dsu_merging_1a76200780dde72296276b892b74e6da98">count</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;forest_count;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00058"/>00058 
<anchor xml:id="_dsu__merging_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;各頂点を連結成分に分解する</emphasis>
<anchor xml:id="_dsu__merging_8hpp_source_1l00060"/><link linkend="_struct_dsu_merging_1a500af4d11f058f17b499842d35181b01">00060</link> &#32;&#32;&#32;&#32;<link linkend="_struct_dsu_merging_1a500af4d11f058f17b499842d35181b01">VVI</link>&#32;<link linkend="_struct_dsu_merging_1a500af4d11f058f17b499842d35181b01">groups</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;{
<anchor xml:id="_dsu__merging_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=par.size();
<anchor xml:id="_dsu__merging_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VVI&#32;ret(n);
<anchor xml:id="_dsu__merging_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;ret[<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">find</link><link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">(</link>i<link linkend="_struct_dsu_merging_1afcf8fd363d1d2348869c0e43df04199d">)</link>].push_back(i);
<anchor xml:id="_dsu__merging_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.erase(remove_if(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(ret),[&amp;](<emphasis role="keyword">const</emphasis>&#32;VI&amp;&#32;v)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;v.empty();&#32;}),ret.end());
<anchor xml:id="_dsu__merging_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_dsu__merging_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__merging_8hpp_source_1l00067"/>00067 
<anchor xml:id="_dsu__merging_8hpp_source_1l00068"/>00068 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_dsu__merging_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;VI&#32;par,sz;
<anchor xml:id="_dsu__merging_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;vector&lt;Type&gt;&#32;dat;
<anchor xml:id="_dsu__merging_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;forest_count;
<anchor xml:id="_dsu__merging_8hpp_source_1l00072"/>00072 };
</programlisting></section>
