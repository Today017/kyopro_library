<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_dsu__rollback_8hpp_source" xml:lang="ja">
<title>dsu_rollback.hpp</title>
<indexterm><primary>graph/dsu_rollback.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_dsu__rollback_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00002"/>00002 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;ロールバック可能DSU</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00004"/><link linkend="_struct_dsu_rollback">00004</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_dsu_rollback">DsuRollback</link>&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00005"/><link linkend="_struct_dsu_rollback_1a11aa0e4a2cd2660619a17e0dd828c22a">00005</link> &#32;&#32;&#32;&#32;<link linkend="_struct_dsu_rollback_1a11aa0e4a2cd2660619a17e0dd828c22a">DsuRollback</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00006"/>00006 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;コンストラクタ</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00008"/><link linkend="_struct_dsu_rollback_1ad42c892c309ec0aa491c70bec3d58779">00008</link> &#32;&#32;&#32;&#32;<link linkend="_struct_dsu_rollback_1ad42c892c309ec0aa491c70bec3d58779">DsuRollback</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par=VI(n);&#32;iota(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(par),0);
<anchor xml:id="_dsu__rollback_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sz=VI(n,1);
<anchor xml:id="_dsu__rollback_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forest_count=n;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00013"/>00013 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;を含む連結成分の代表元を返す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00015"/><link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">00015</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">find</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(par[x]==x)&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;find(par[x]);
<anchor xml:id="_dsu__rollback_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00019"/>00019 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;と&#32;y&#32;を連結し、true&#32;を返す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;既に連結されている場合は&#32;false&#32;を返す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00022"/><link linkend="_struct_dsu_rollback_1a103be2aa1ff86601ef80cf051c3d566f">00022</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_dsu_rollback_1a103be2aa1ff86601ef80cf051c3d566f">merge</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x=<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">find</link><link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">(</link>x<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">)</link>;&#32;y=<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">find</link><link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">(</link>y<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">)</link>;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x==y)&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;history.push_back({x,-1,-1,-1});
<anchor xml:id="_dsu__rollback_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sz[x]&lt;sz[y])&#32;swap(x,y);
<anchor xml:id="_dsu__rollback_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;history.push_back({x,y,sz[x],sz[y]});
<anchor xml:id="_dsu__rollback_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[y]=x;&#32;sz[x]+=sz[y];
<anchor xml:id="_dsu__rollback_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forest_count--;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00034"/>00034 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最後に行った連結操作を取り消す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00036"/><link linkend="_struct_dsu_rollback_1a576e5300d28f07244d0548cd2e98b052">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_dsu_rollback_1a576e5300d28f07244d0548cd2e98b052">undo</link>()&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(history.empty())&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>[x,y,szx,szy]=history.back();
<anchor xml:id="_dsu__rollback_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;history.pop_back();
<anchor xml:id="_dsu__rollback_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(y==-1)<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[y]=y;&#32;sz[x]=szx;&#32;sz[y]=szy;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00043"/>00043 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;DSUの状態を上書き保存する</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00045"/><link linkend="_struct_dsu_rollback_1aa0ce04a8aaf999bda7719d681775505d">00045</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_dsu_rollback_1aa0ce04a8aaf999bda7719d681775505d">snapshot</link>()&#32;{&#32;history.clear();&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00046"/>00046 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最後に&#32;snapshot&#32;した時点まで巻き戻す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00048"/><link linkend="_struct_dsu_rollback_1a7c33fb0f4e5b0f804b937ab4edb7a5ea">00048</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_dsu_rollback_1a7c33fb0f4e5b0f804b937ab4edb7a5ea">rollback</link>()&#32;{&#32;<emphasis role="keywordflow">while</emphasis>(!history.empty())&#32;<link linkend="_struct_dsu_rollback_1a576e5300d28f07244d0548cd2e98b052">undo</link><link linkend="_struct_dsu_rollback_1a576e5300d28f07244d0548cd2e98b052">(</link><link linkend="_struct_dsu_rollback_1a576e5300d28f07244d0548cd2e98b052">)</link>;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00049"/>00049 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;を含む連結成分のサイズを返す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00051"/><link linkend="_struct_dsu_rollback_1ade29264c1fbd5b5bfdaefe918c9d6163">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_dsu_rollback_1ade29264c1fbd5b5bfdaefe918c9d6163">size</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;sz[find(x)];&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00052"/>00052 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;と&#32;y&#32;が同じ連結成分に属するか否かを返す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00054"/><link linkend="_struct_dsu_rollback_1a954350180a0b6956d0661419b2f764f6">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_dsu_rollback_1a954350180a0b6956d0661419b2f764f6">same</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">find</link><link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">(</link>x<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">)</link>==<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">find</link><link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">(</link>y<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">)</link>;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00055"/>00055 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;連結成分の個数を返す</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00057"/><link linkend="_struct_dsu_rollback_1ada87b7194225ccb7dccb62080069bac6">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_dsu_rollback_1ada87b7194225ccb7dccb62080069bac6">count</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;forest_count;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00058"/>00058 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;各頂点を連結成分に分解する</emphasis>
<anchor xml:id="_dsu__rollback_8hpp_source_1l00060"/><link linkend="_struct_dsu_rollback_1aad21b3281d43bc47b352d86f880b3462">00060</link> &#32;&#32;&#32;&#32;<link linkend="_struct_dsu_rollback_1aad21b3281d43bc47b352d86f880b3462">VVI</link>&#32;<link linkend="_struct_dsu_rollback_1aad21b3281d43bc47b352d86f880b3462">groups</link>()&#32;{
<anchor xml:id="_dsu__rollback_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=par.size();
<anchor xml:id="_dsu__rollback_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VVI&#32;ret(n);
<anchor xml:id="_dsu__rollback_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;ret[<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">find</link><link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">(</link>i<link linkend="_struct_dsu_rollback_1ac2028d09c590bdde38b2669f19728452">)</link>].push_back(i);
<anchor xml:id="_dsu__rollback_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.erase(remove_if(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(ret),[&amp;](<emphasis role="keyword">const</emphasis>&#32;VI&amp;&#32;v)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;v.empty();&#32;}),ret.end());
<anchor xml:id="_dsu__rollback_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="_dsu__rollback_8hpp_source_1l00067"/>00067 
<anchor xml:id="_dsu__rollback_8hpp_source_1l00068"/>00068 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_dsu__rollback_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;VI&#32;par,sz;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;vector&lt;tuple&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;history;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;forest_count;
<anchor xml:id="_dsu__rollback_8hpp_source_1l00072"/>00072 };
</programlisting></section>
