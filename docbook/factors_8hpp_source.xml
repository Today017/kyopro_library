<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_factors_8hpp_source" xml:lang="ja">
<title>factors.hpp</title>
<indexterm><primary>math/factors.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_factors_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00002"/>00002 
<anchor xml:id="_factors_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;エラトステネスの篩を利用した高速な素因数分解・約数列挙（Osa_k&#32;法）</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@ref&#32;https://osak.jp/diary/diary_201310.html#20131017</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@ref&#32;https://qiita.com/drken/items/3beb679e54266f20ab63&#32;</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00006"/><link linkend="_struct_factors">00006</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_factors">Factors</link>&#32;{
<anchor xml:id="_factors_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;前計算</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(n&#32;log(log(n)))</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00009"/><link linkend="_struct_factors_1a219a3cb166153a020f2fc3d83b9a9e57">00009</link> &#32;&#32;&#32;&#32;<link linkend="_struct_factors_1a219a3cb166153a020f2fc3d83b9a9e57">Factors</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mx=n;
<anchor xml:id="_factors_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_factor=VI(mx+1);
<anchor xml:id="_factors_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_prime=VI(mx+1,<emphasis role="keyword">true</emphasis>);&#32;is_prime[0]=is_prime[1]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_factors_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;divisors=VVI(mx+1);
<anchor xml:id="_factors_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prime_factors=vector&lt;vector&lt;pair&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&gt;(mx+1);
<anchor xml:id="_factors_8hpp_source_1l00015"/>00015 
<anchor xml:id="_factors_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(i,2,mx+1)&#32;<emphasis role="keywordflow">if</emphasis>(is_prime[i])&#32;{
<anchor xml:id="_factors_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;min_factor[i]=i;
<anchor xml:id="_factors_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=2*i;&#32;j&lt;=mx;&#32;j+=i)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_prime[j]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_factors_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(min_factor[j]==0)&#32;min_factor[j]=i;
<anchor xml:id="_factors_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00024"/>00024 
<anchor xml:id="_factors_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;n&#32;を素因数分解する</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(log(n))</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00027"/><link linkend="_struct_factors_1a9c62b3d154c3d164110ce5365d978732">00027</link> &#32;&#32;&#32;&#32;<link linkend="_struct_factors_1a9c62b3d154c3d164110ce5365d978732">vector</link>&lt;<link linkend="_struct_factors_1a9c62b3d154c3d164110ce5365d978732">pair</link>&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;<link linkend="_struct_factors_1a9c62b3d154c3d164110ce5365d978732">get_prime_factors</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(prime_factors[n].size()==0)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x=n;
<anchor xml:id="_factors_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(x&gt;1)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p=min_factor[x];
<anchor xml:id="_factors_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt=0;
<anchor xml:id="_factors_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(x%p==0)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x/=p;
<anchor xml:id="_factors_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cnt++;
<anchor xml:id="_factors_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prime_factors[n].push_back({p,cnt});
<anchor xml:id="_factors_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prime_factors[n];
<anchor xml:id="_factors_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00042"/>00042 
<anchor xml:id="_factors_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;n&#32;の約数を返す</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(d(n))</emphasis>
<anchor xml:id="_factors_8hpp_source_1l00045"/><link linkend="_struct_factors_1a24bcfb630170a5aae2e2ae3c7ce3f656">00045</link> &#32;&#32;&#32;&#32;<link linkend="_struct_factors_1a24bcfb630170a5aae2e2ae3c7ce3f656">VI</link>&#32;<link linkend="_struct_factors_1a24bcfb630170a5aae2e2ae3c7ce3f656">get_divisors</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(divisors[n].size()==0)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;pair&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;pf=get_prime_factors(n);
<anchor xml:id="_factors_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz=pf.size();
<anchor xml:id="_factors_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;dfs=[&amp;](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;dfs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x)-&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;{
<anchor xml:id="_factors_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i==sz)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;divisors[n].push_back(x);
<anchor xml:id="_factors_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_factors_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>[p,cnt]=pf[i];
<anchor xml:id="_factors_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,cnt+1)&#32;{
<anchor xml:id="_factors_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs(dfs,i+1,x);
<anchor xml:id="_factors_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x*=p;
<anchor xml:id="_factors_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="_factors_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs(dfs,0,1);
<anchor xml:id="_factors_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sort(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(divisors[n]));
<anchor xml:id="_factors_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;divisors[n];
<anchor xml:id="_factors_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;}
<anchor xml:id="_factors_8hpp_source_1l00065"/>00065 
<anchor xml:id="_factors_8hpp_source_1l00066"/>00066 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_factors_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mx;
<anchor xml:id="_factors_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;VI&#32;min_factor,is_prime;
<anchor xml:id="_factors_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;VVI&#32;divisors;
<anchor xml:id="_factors_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;vector&lt;vector&lt;pair&lt;<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&gt;&#32;prime_factors;
<anchor xml:id="_factors_8hpp_source_1l00071"/>00071 };
</programlisting></section>
