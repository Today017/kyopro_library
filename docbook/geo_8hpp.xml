<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_geo_8hpp" xml:lang="ja">
<title>geometry/geo.hpp ファイル</title>
<indexterm><primary>geometry/geo.hpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;../../kyopro_library/template.hpp&quot;<?linebreak?></programlisting><simplesect>
    <title>クラス    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_geometry_1_1_point">Geometry::Point</link></para>

<para>２次元平面上の位置ベクトル </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_geometry_1_1_line">Geometry::Line</link></para>

<para>直線 </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_geometry_1_1_segment">Geometry::Segment</link></para>

<para>線分 </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_geometry_1_1_circle">Geometry::Circle</link></para>

<para>円 </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>名前空間    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace_geometry">Geometry</link></para>

<para>幾何ライブラリ </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>型定義    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Geometry::Real</link> = long double</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>列挙型    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7a">Geometry::Orientation</link> { <?linebreak?><link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7aa9ee68053af2b51d26deccd98f7581852">Geometry::COUNTER_CLOCKWISE</link>
, <link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7aafeb0cf07471b0c303bf376921b7ee74d">Geometry::CLOCKWISE</link>
, <link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7aaaf694be04cbb5099b3ec9e09452b7f40">Geometry::ONLINE_BACK</link>
, <link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7aab31051d17a91a5f0c8f85661108de6ad">Geometry::ONLINE_FRONT</link>
, <?linebreak?><link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7aa7a0770b341c8bab4860005af2e32db19">Geometry::ON_SEGMENT</link>
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>関数    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_namespace_geometry_1a8c9fd2ca3dafa5ee2835f88a02667eb5">Geometry::almostEqual</link> (<link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> a, <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> b)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1ace43f4cd28f78a9fa79439ee8416b2e4">Geometry::lessThan</link> (<link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> a, <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> b)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a85801ae240703892e050e65ebc1f97eb">Geometry::greaterThan</link> (<link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> a, <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> b)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1aaa93b6715f377d2ef8ba44c79d98641c">Geometry::lessThanOrEqual</link> (<link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> a, <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> b)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a48301418052e96f2270cbc235c91e9c7">Geometry::greaterThanOrEqual</link> (<link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> a, <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> b)</para>
</listitem>
            <listitem><para><link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7a">Orientation</link> <link linkend="_namespace_geometry_1a68f1a8a27e6074ca5dae6b151a765cb3">Geometry::ccw</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p0, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p1, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p2)</para>

<para>3点 p0, p1, p2 の進行方向を返す </para>
</listitem>
            <listitem><para>string <link linkend="_namespace_geometry_1a9bb98900b14f9cd763b7c5e958a868c8">Geometry::orientationToString</link> (<link linkend="_namespace_geometry_1ac6833944045520a63bc44de0c261aa7a">Orientation</link> o)</para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_point">Point</link> <link linkend="_namespace_geometry_1a350e7c66a3052218fb10273521646a5a">Geometry::projection</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p1, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p2, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>

<para>ベクトル p の直線 p1, p2 への正射影ベクトルを返す </para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_point">Point</link> <link linkend="_namespace_geometry_1a6459f2465325d059e045db0c357253a0">Geometry::projection</link> (const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>

<para>ベクトル p の直線 l への正射影ベクトルを返す </para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_point">Point</link> <link linkend="_namespace_geometry_1a401f2efd71755a4e3dc7cc4b3a60762e">Geometry::reflection</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p1, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p2, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>

<para>ベクトル p の直線 p1, p2 に対する鏡像ベクトルを返す </para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_point">Point</link> <link linkend="_namespace_geometry_1a3cdefdb1ec92d44cf07f06dfdd4f4be8">Geometry::reflection</link> (const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>

<para>ベクトル p の直線 l に対する鏡像ベクトルを返す </para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a5905c3b472de2209f9fa39119da309d0">Geometry::isParallel</link> (const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l1, const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1abfda3f3ff79f9b2f8d6a9d7052ecb770">Geometry::isOrthogonal</link> (const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l1, const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1ab794a4baaf90b7e2308f67ef18c8aaef">Geometry::isParallel</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a529832026f1ac3e2b14cfb6b41e9c1af">Geometry::isOrthogonal</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a205dd318a5b496f3a02afc0b026003e1">Geometry::isParallel</link> (const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a1ad29186e135cf0fe0f6e80e526882f5">Geometry::isOrthogonal</link> (const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a0791c792e98411c4960aa26e165c8f21">Geometry::isParallel</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l1, const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a03322a671b1a773f7de3971fdb222bd4">Geometry::isOrthogonal</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;l1, const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l2)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a8613d484a8c0b5d6d603592a11190c67">Geometry::isPointOnLine</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p, const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1abcf022a48d43025f1b3f91dda172ca2b">Geometry::isPointOnSegment</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1afd1aee161954f89e741e6873568fd1d8">Geometry::isIntersecting</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s2)</para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_point">Point</link> <link linkend="_namespace_geometry_1a774399dc2bebae37aabf1a46750ee6c7">Geometry::getIntersection</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s2)</para>
</listitem>
            <listitem><para><link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> <link linkend="_namespace_geometry_1a4a8de96e1f3bf3f804c773c80c2f3a25">Geometry::distancePointToSegment</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s)</para>
</listitem>
            <listitem><para><link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> <link linkend="_namespace_geometry_1a255834d9deeba16697273e0471248c87">Geometry::distanceSegmentToSegment</link> (const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s1, const <link linkend="_struct_geometry_1_1_segment">Segment</link> &amp;s2)</para>
</listitem>
            <listitem><para><link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> <link linkend="_namespace_geometry_1a9c5e5ffd70ed15d3ce03c6f5b69524df">Geometry::getPolygonArea</link> (const vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;points)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1ab9bf3d0fb49fb3cccd08e2905e1ffce6">Geometry::isConvex</link> (const vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;points)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1ad8a7fbcb1e7ddafa0ec0d42800d90164">Geometry::isPointOnPolygon</link> (const vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;polygon, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespace_geometry_1a48aa32d46955c3cf80e1c37676edf4a6">Geometry::isPointInsidePolygon</link> (const vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;polygon, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; <link linkend="_namespace_geometry_1af7466d8b7624193a11c59f8e0558d8ad">Geometry::convexHull</link> (vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;points, bool include_collinear=false)</para>
</listitem>
            <listitem><para><link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> <link linkend="_namespace_geometry_1a737b89d779a2c60bc146439342e24769">Geometry::convexHullDiameter</link> (const vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;hull)</para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; <link linkend="_namespace_geometry_1a200dbcd1585ae4b59217590a4f86c135">Geometry::cutPolygon</link> (const vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;g, const <link linkend="_struct_geometry_1_1_line">Line</link> &amp;l)</para>
</listitem>
            <listitem><para><link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> <link linkend="_namespace_geometry_1a5b1e16827da06a6b3f3ce3875b3f216d">Geometry::closestPair</link> (vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; &amp;points, int l, int r)</para>
</listitem>
            <listitem><para>int <link linkend="_namespace_geometry_1a25c84d2aafb07dd03188112b3c9b69e5">Geometry::countIntersections</link> (vector&lt; <link linkend="_struct_geometry_1_1_segment">Segment</link> &gt;segments)</para>
</listitem>
            <listitem><para>int <link linkend="_namespace_geometry_1a160a3cda4bb1f308ae9166489d7b2f2d">Geometry::countCirclesIntersection</link> (const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c1, const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c2)</para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_circle">Circle</link> <link linkend="_namespace_geometry_1a6e29a04c787ae3404a41b0782b06b436">Geometry::getInCircle</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;A, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;B, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;C)</para>
</listitem>
            <listitem><para><link linkend="_struct_geometry_1_1_circle">Circle</link> <link linkend="_namespace_geometry_1a5f10ad69ef666ea0a18e57b09dfc1aca">Geometry::getCircumCircle</link> (const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;A, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;B, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;C)</para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; <link linkend="_namespace_geometry_1aea8002cf252acca8ca329b77f17d4e5c">Geometry::getCircleLineIntersection</link> (const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c, <link linkend="_struct_geometry_1_1_point">Point</link> p1, <link linkend="_struct_geometry_1_1_point">Point</link> p2)</para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; <link linkend="_namespace_geometry_1afa467fced21597c91d88160aa368dde0">Geometry::getCirclesIntersect</link> (const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c1, const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c2)</para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_struct_geometry_1_1_point">Point</link> &gt; <link linkend="_namespace_geometry_1affd43c52385e0185f55de795b049426b">Geometry::getTangentLinesFromPoint</link> (const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c, const <link linkend="_struct_geometry_1_1_point">Point</link> &amp;p)</para>
</listitem>
            <listitem><para>vector&lt; <link linkend="_struct_geometry_1_1_segment">Segment</link> &gt; <link linkend="_namespace_geometry_1a624725fa83089bed00ea1d0fa8fc4c1e">Geometry::getCommonTangentsLine</link> (const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c1, const <link linkend="_struct_geometry_1_1_circle">Circle</link> &amp;c2)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>変数    </title>
        <itemizedlist>
            <listitem><para>const <link linkend="_namespace_geometry_1aa4fd942614eba4a1561c5a22278a1bcc">Real</link> <link linkend="_namespace_geometry_1a5494489f2d60001b10aca658fedef5c5">Geometry::EPS</link> =1e-9</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
