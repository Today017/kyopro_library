<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_hld_8hpp_source" xml:lang="ja">
<title>hld.hpp</title>
<indexterm><primary>graph/tree/hld.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_hld_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis>&#32;<emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00002"/>00002 
<anchor xml:id="_hld_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;HL分解</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@ref&#32;解説:https://hcpc-hokudai.github.io/archive/graph_tree_001.pdf</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00005"/><link linkend="_struct_h_l_d">00005</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_h_l_d">HLD</link>&#32;{
<anchor xml:id="_hld_8hpp_source_1l00006"/><link linkend="_struct_h_l_d_1a4ded5ea491751676f93bb08121e85e7a">00006</link> &#32;&#32;&#32;&#32;<link linkend="_struct_h_l_d_1a4ded5ea491751676f93bb08121e85e7a">HLD</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;resize(n);&#32;}
<anchor xml:id="_hld_8hpp_source_1l00007"/><link linkend="_struct_h_l_d_1a256387d5bc67a34fc8feb4a64555d05a">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_h_l_d_1a256387d5bc67a34fc8feb4a64555d05a">add_edge</link>(<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b)&#32;{&#32;graph[a].push_back(b),graph[b].push_back(a);&#32;}
<anchor xml:id="_hld_8hpp_source_1l00008"/><link linkend="_struct_h_l_d_1a771bcfbb8251c5a9c62a08da8d149deb">00008</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_h_l_d_1a771bcfbb8251c5a9c62a08da8d149deb">build</link>(<emphasis role="keywordtype">int</emphasis>&#32;root=0)&#32;{&#32;dfs1(root),dfs2(root,root);&#32;}
<anchor xml:id="_hld_8hpp_source_1l00009"/><link linkend="_struct_h_l_d_1aad507c09947cd50bafe0fd839eb3ebbf">00009</link> &#32;&#32;&#32;&#32;<link linkend="_struct_h_l_d_1aad507c09947cd50bafe0fd839eb3ebbf">HLD</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;root=0)&#32;{
<anchor xml:id="_hld_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resize(g.size());
<anchor xml:id="_hld_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;graph=g;
<anchor xml:id="_hld_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_h_l_d_1a771bcfbb8251c5a9c62a08da8d149deb">build</link><link linkend="_struct_h_l_d_1a771bcfbb8251c5a9c62a08da8d149deb">(</link>root<link linkend="_struct_h_l_d_1a771bcfbb8251c5a9c62a08da8d149deb">)</link>;
<anchor xml:id="_hld_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00014"/>00014 
<anchor xml:id="_hld_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;u,&#32;v&#32;を結ぶパスをHL分解後の辺の列にして返す</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="comment">/**</emphasis>
00017 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;@brief</emphasis>
00018 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;`[f,&#32;l,&#32;r]`&#32;として、次を表す。</emphasis>
00019 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;-&#32;`[l,&#32;r]`:&#32;HL分解後の頂点列</emphasis>
00020 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;-&#32;`f&#32;=&#32;true`&#32;のとき、`[l,&#32;r]`&#32;はvからuへの向き</emphasis>
00021 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;-&#32;そうでないとき、逆向き</emphasis>
00022 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00023"/><link linkend="_struct_h_l_d_1af5c1751760a5d34be274c54acd9f60c3">00023</link> &#32;&#32;&#32;&#32;<link linkend="_struct_h_l_d_1af5c1751760a5d34be274c54acd9f60c3">vector</link>&lt;<link linkend="_struct_h_l_d_1af5c1751760a5d34be274c54acd9f60c3">tuple</link>&lt;<emphasis role="keywordtype">bool</emphasis>,<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;<link linkend="_struct_h_l_d_1af5c1751760a5d34be274c54acd9f60c3">path</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v)&#32;{
<anchor xml:id="_hld_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;tuple&lt;<emphasis role="keywordtype">bool</emphasis>,<emphasis role="keywordtype">int</emphasis>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;ret;
<anchor xml:id="_hld_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(head[u]!=head[v])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dep[head[u]]&gt;dep[head[v]])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.push_back({<emphasis role="keyword">true</emphasis>,pos[head[u]],pos[u]});
<anchor xml:id="_hld_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u=par[head[u]];
<anchor xml:id="_hld_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_hld_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret.push_back({<emphasis role="keyword">false</emphasis>,pos[head[v]],pos[v]});
<anchor xml:id="_hld_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v=par[head[v]];
<anchor xml:id="_hld_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dep[u]&gt;dep[v])&#32;ret.push_back({<emphasis role="keyword">true</emphasis>,pos[v],pos[u]});
<anchor xml:id="_hld_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;ret.push_back({<emphasis role="keyword">false</emphasis>,pos[u],pos[v]});
<anchor xml:id="_hld_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_hld_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00038"/>00038 
<anchor xml:id="_hld_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;u,&#32;v&#32;のLCAを返す</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00040"/><link linkend="_struct_h_l_d_1ae95bc5be0f704bafb0ab667d1dffb0cc">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_h_l_d_1ae95bc5be0f704bafb0ab667d1dffb0cc">lca</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v)&#32;{
<anchor xml:id="_hld_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(head[u]!=head[v])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dep[head[u]]&gt;dep[head[v]])&#32;u=par[head[u]];
<anchor xml:id="_hld_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;v=par[head[v]];
<anchor xml:id="_hld_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dep[u]&lt;dep[v]&#32;?&#32;u:v;
<anchor xml:id="_hld_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00047"/><link linkend="_struct_h_l_d_1a57a2a1fce944ca4c9b4cfc4f497963e0">00047</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_h_l_d_1a57a2a1fce944ca4c9b4cfc4f497963e0">at</link>(<emphasis role="keywordtype">int</emphasis>&#32;v)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos[v];&#32;}
<anchor xml:id="_hld_8hpp_source_1l00048"/>00048 
<anchor xml:id="_hld_8hpp_source_1l00049"/>00049 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_hld_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;VVI&#32;graph;
<anchor xml:id="_hld_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;VI&#32;sz,par,dep,head;
<anchor xml:id="_hld_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;VI&#32;hld;&#32;<emphasis role="comment">///&lt;&#32;HLD後の配列</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;VI&#32;pos;&#32;<emphasis role="comment">///&lt;&#32;hldの逆引き</emphasis>
<anchor xml:id="_hld_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;graph.resize(n),sz.resize(n),par.resize(n),dep.resize(n),pos.resize(n),head.resize(n);&#32;}
<anchor xml:id="_hld_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dfs1(<emphasis role="keywordtype">int</emphasis>&#32;now,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pre=-1)&#32;{
<anchor xml:id="_hld_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[now]=pre;
<anchor xml:id="_hld_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;res=1;
<anchor xml:id="_hld_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:graph[now])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==pre)<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_hld_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dep[nxt]=dep[now]+1;
<anchor xml:id="_hld_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs1(nxt,now);
<anchor xml:id="_hld_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res+=sz[nxt];
<anchor xml:id="_hld_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sz[now]=res;
<anchor xml:id="_hld_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dfs2(<emphasis role="keywordtype">int</emphasis>&#32;now,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pre=-1)&#32;{
<anchor xml:id="_hld_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos[now]=hld.size();
<anchor xml:id="_hld_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hld.push_back(now);
<anchor xml:id="_hld_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head[now]=a;
<anchor xml:id="_hld_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sz[now]==1)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_hld_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;mx=0,idx=0;
<anchor xml:id="_hld_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:graph[now])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==pre)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_hld_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(mx&lt;sz[nxt])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mx=sz[nxt];
<anchor xml:id="_hld_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;idx=nxt;
<anchor xml:id="_hld_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs2(idx,a,now);
<anchor xml:id="_hld_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:graph[now])&#32;{
<anchor xml:id="_hld_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==pre||nxt==idx)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_hld_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs2(nxt,nxt,now);
<anchor xml:id="_hld_8hpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;}
<anchor xml:id="_hld_8hpp_source_1l00085"/>00085 };
</programlisting></section>
