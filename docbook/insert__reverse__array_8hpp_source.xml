<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_insert__reverse__array_8hpp_source" xml:lang="ja">
<title>insert_reverse_array.hpp</title>
<indexterm><primary>data_structure/insert_reverse_array.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_insert__reverse__array_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00002"/>00002 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00003"/><link linkend="_namespace_insertable_reversible_array_impl">00003</link> <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_insertable_reversible_array_impl">InsertableReversibleArrayImpl</link>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00004"/>00004 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Node&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00005"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">00005</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">RBSTBase</link>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00006"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">00006</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Ptr=Node*;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Args&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00008"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1aa8b6128c8a3a8fefe6919c8068788f5e">00008</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1aa8b6128c8a3a8fefe6919c8068788f5e">my_new</link>(Args...args)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Node(args...);&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00009"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">00009</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">my_del</link>(Ptr&#32;t)&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;t;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00010"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a9337a3fcb64ce0db1512ab250b0776b5">00010</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a9337a3fcb64ce0db1512ab250b0776b5">make_tree</link>()<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keywordtype">nullptr</emphasis>;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00011"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a61257b4dedade09e42d6f79c48b3938c">00011</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a61257b4dedade09e42d6f79c48b3938c">size</link>(Ptr&#32;t)<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">count</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">(</link>t<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">)</link>;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00012"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">00012</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link>(Ptr&#32;l,&#32;Ptr&#32;r)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!l||!r)&#32;<emphasis role="keywordflow">return</emphasis>&#32;l?l:r;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keywordtype">int</emphasis>((rng()*(l-&gt;cnt+r-&gt;cnt))&gt;&gt;32)&lt;l-&gt;cnt)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">push</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">(</link>l<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l-&gt;r=<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">(</link>l-&gt;r<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">,</link>r<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">update</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">(</link>l<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">push</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">(</link>r<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r-&gt;l=<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">(</link>l<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">,</link>r-&gt;l<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">update</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">(</link>r<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00024"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">pair</link>&lt;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">Ptr</link>,<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">Ptr</link>&gt;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">split</link>(Ptr&#32;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!t)&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;{<emphasis role="keywordtype">nullptr</emphasis>,<emphasis role="keywordtype">nullptr</emphasis>};
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">push</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">(</link>t<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(k&lt;=<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">count</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">(</link>t-&gt;l<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">)</link>)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;s=split(t-&gt;l,k);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;l=s.second;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;{s.first,<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">update</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">(</link>t<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">)</link>};
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;s=split(t-&gt;r,k-count(t-&gt;l)-1);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;r=s.first;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;{<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">update</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">(</link>t<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">)</link>,s.second};
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00037"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae1c4c75a693123736e99ff1ab285f4bc">00037</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae1c4c75a693123736e99ff1ab285f4bc">build</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;<emphasis role="keyword">decltype</emphasis>(Node::key)&gt;&amp;&#32;v)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l+1==r)&#32;<emphasis role="keywordflow">return</emphasis>&#32;my_new(v[l]);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;m=(l+r)&gt;&gt;1;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ptr&#32;pm=my_new(v[m]);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l&lt;m)&#32;pm-&gt;l=build(l,m,v);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m+1&lt;r)&#32;pm-&gt;r=build(m+1,r,v);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">update</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">(</link>pm<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00045"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1acf244c4471e356a85278e993db8201b3">00045</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1acf244c4471e356a85278e993db8201b3">build</link>(<emphasis role="keyword">const</emphasis>&#32;vector&lt;<emphasis role="keyword">decltype</emphasis>(Node::key)&gt;&amp;&#32;v)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;build(0,(<emphasis role="keywordtype">int</emphasis>)v.size(),v);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...Args&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00049"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a6b8d4d3825b9d530359ee07fc0a51b30">00049</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a6b8d4d3825b9d530359ee07fc0a51b30">insert</link>(Ptr&amp;&#32;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k,&#32;<emphasis role="keyword">const</emphasis>&#32;Args&amp;&#32;...args)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x=split(t,k);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t=<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">(</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">(</link>x.first<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">,</link>my_new(args...)<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">)</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">,</link>x.second<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00053"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a8fe3d734da7206c01b3598bde497dd83">00053</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a8fe3d734da7206c01b3598bde497dd83">erase</link>(Ptr&amp;&#32;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x=split(t,k);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;y=split(x.second,1);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">my_del</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">(</link>y.first<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t=<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">(</link>x.first<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">,</link>y.second<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00059"/>00059 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00061"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1af5b7726452c97a737444c3281ddc7749">00061</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1af5b7726452c97a737444c3281ddc7749">uint64_t</link>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1af5b7726452c97a737444c3281ddc7749">rng</link>()&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;uint64_t&#32;x_=88172645463325252ULL;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x_^=x_&lt;&lt;7,x_^=x_&gt;&gt;9,x_&amp;0xFFFFFFFFull;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00065"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">00065</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">count</link>(<emphasis role="keyword">const</emphasis>&#32;Ptr&#32;t)&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;t?t-&gt;cnt:0;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00066"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">00066</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">push</link>(Ptr)=0;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00067"/><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">00067</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">update</link>(Ptr)=0;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;};
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00069"/>00069 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;E&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00071"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">00071</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00072"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a4d80fa195d467069fbbb02288c81d939">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">RBSTBase</link>&lt;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&gt;::<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a4d80fa195d467069fbbb02288c81d939">Ptr</link>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a4d80fa195d467069fbbb02288c81d939">l</link>,<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1aeb045403851a6a315fe10c843ccb1fb3">r</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00073"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a1d22eb0ced84e132fae55c090bf5239e">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a1d22eb0ced84e132fae55c090bf5239e">key</link>,<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a9fb15c1ba67e63480fb1053209a781e2">sum</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00074"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a74f9b6498180f45b70bd1a43803c200f">00074</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;E&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a74f9b6498180f45b70bd1a43803c200f">lazy</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00075"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1adbb4527804782fd27cfd978db7fe04af">00075</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1adbb4527804782fd27cfd978db7fe04af">cnt</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00076"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a0dd01ef62559340aa7b8430381893838">00076</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a0dd01ef62559340aa7b8430381893838">rev</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00077"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a0d205c9909ffba7b009dc9e50a372a76">00077</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a0d205c9909ffba7b009dc9e50a372a76">LazyReversibleRBSTNode</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;t=T(),&#32;<emphasis role="keyword">const</emphasis>&#32;E&amp;&#32;e=E()):<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a4d80fa195d467069fbbb02288c81d939">l</link>(),<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1aeb045403851a6a315fe10c843ccb1fb3">r</link>(),<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a1d22eb0ced84e132fae55c090bf5239e">key</link>(t),<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a9fb15c1ba67e63480fb1053209a781e2">sum</link>(t),<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a74f9b6498180f45b70bd1a43803c200f">lazy</link>(e),<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1adbb4527804782fd27cfd978db7fe04af">cnt</link>(1),<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node_1a0dd01ef62559340aa7b8430381893838">rev</link>(<emphasis role="keyword">false</emphasis>)&#32;{}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;};
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00079"/>00079 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;E,&#32;T(*f)(T,T),&#32;T(*g)(T,E),&#32;E(*h)(E,E),&#32;T(*ts)(T)&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00081"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">00081</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">LazyReversibleRBST</link>:<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">RBSTBase</link>&lt;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;&gt;&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00082"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2cc0713f1bac2dc605fe22990c2ee1bd">00082</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Node=<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00083"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab7db3c0fa906d85207ff1443d0164612">00083</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;base=<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">RBSTBase</link>&lt;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;&gt;;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00084"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1aee7676fe4681e1812dabfdd680159f73">00084</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;base::merge;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00085"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a05a84e982cd08e2d1daab87d2d0ec78e">00085</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;base::split;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;base::Ptr;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00087"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a6b57cd7c8c2abdf621c86e76aa2f5a58">00087</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a6b57cd7c8c2abdf621c86e76aa2f5a58">LazyReversibleRBST</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00088"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">00088</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">toggle</link>(Ptr&#32;t)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!t)<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swap(t-&gt;l,t-&gt;r);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;sum=ts(t-&gt;sum);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;rev^=<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00094"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ae69875869036c22d87735c9e5b433bb5">00094</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ae69875869036c22d87735c9e5b433bb5">fold</link>(Ptr&amp;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x=split(t,a);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;y=split(x.second,b-a);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ret=<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1">sum</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1">(</link>y.first<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t=merge(x.first,merge(y.first,y.second));
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00101"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2ac842d27b458b66c5b113307dfe28ea">00101</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2ac842d27b458b66c5b113307dfe28ea">reverse</link>(Ptr&amp;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x=split(t,a);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;y=split(x.second,b-a);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">toggle</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">(</link>y.first<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t=merge(x.first,merge(y.first,y.second));
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00107"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab4b0701f2e1deed723bd75eed1e9cf86">00107</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab4b0701f2e1deed723bd75eed1e9cf86">apply</link>(Ptr&amp;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;a,&#32;<emphasis role="keywordtype">int</emphasis>&#32;b,&#32;<emphasis role="keyword">const</emphasis>&#32;E&amp;e)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x=split(t,a);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;y=split(x.second,b-a);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">propagate</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">(</link>y.first<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">,</link>e<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t=merge(x.first,merge(y.first,y.second));
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00113"/>00113 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00115"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1">00115</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;T&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1">sum</link>(<emphasis role="keyword">const</emphasis>&#32;Ptr&#32;t)<emphasis role="keyword">const</emphasis>&#32;{<emphasis role="keywordflow">return</emphasis>&#32;t?t-&gt;sum:T();}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00116"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a10c534293743a5329c0fc6f66b9135ae">00116</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ptr&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a10c534293743a5329c0fc6f66b9135ae">update</link>(Ptr&#32;t)<emphasis role="keyword">override</emphasis>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04">push</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04">(</link>t<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;cnt=1;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;sum=t-&gt;key;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;l)t-&gt;cnt+=t-&gt;l-&gt;cnt,t-&gt;sum=f(t-&gt;l-&gt;sum,t-&gt;sum);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;r)t-&gt;cnt+=t-&gt;r-&gt;cnt,t-&gt;sum=f(t-&gt;sum,t-&gt;r-&gt;sum);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;t;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00124"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04">00124</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04">push</link>(Ptr&#32;t)<emphasis role="keyword">override</emphasis>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;rev)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;l)<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">toggle</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">(</link>t-&gt;l<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;r)<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">toggle</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">(</link>t-&gt;r<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;rev=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;lazy!=E())&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;l)<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">propagate</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">(</link>t-&gt;l<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">,</link>t-&gt;lazy<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t-&gt;r)<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">propagate</link><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">(</link>t-&gt;r<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">,</link>t-&gt;lazy<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;lazy=E();
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00136"/><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">00136</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">propagate</link>(Ptr&#32;t,&#32;<emphasis role="keyword">const</emphasis>&#32;E&amp;&#32;x)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;lazy=h(t-&gt;lazy,x);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;key=g(t-&gt;key,x);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;sum=g(t-&gt;sum,x);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;};
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00143"/><link linkend="_namespace_insertable_reversible_array_impl_1aa04c6fd66fb319b047a77d6fa3dd81fb">00143</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_namespace_insertable_reversible_array_impl_1aa04c6fd66fb319b047a77d6fa3dd81fb">op</link>(T&#32;a,&#32;T&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a+b;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00145"/><link linkend="_namespace_insertable_reversible_array_impl_1a37fafc5a9cb6ce08b2dbc5e775fbf79f">00145</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_namespace_insertable_reversible_array_impl_1a37fafc5a9cb6ce08b2dbc5e775fbf79f">e</link>(T&#32;a)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;a;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00146"/>00146 }&#32;<emphasis role="comment">//&#32;namespace&#32;InsertableReversibleArrayImpl</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00147"/>00147 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00148"/>00148 <emphasis role="comment">///&#32;@file&#32;insert_reverse_array.hpp</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00149"/>00149 <emphasis role="comment">///&#32;@brief&#32;挿入・削除・区間反転可能な配列</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00150"/>00150 <emphasis role="comment">///&#32;@ref&#32;https://nyaannyaan.github.io/library/rbst/lazy-reversible-rbst.hpp.html</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00151"/>00151 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00152"/><link linkend="_struct_insertable_reversible_array">00152</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_insertable_reversible_array">InsertableReversibleArray</link>&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00153"/><link linkend="_struct_insertable_reversible_array_1ac4f64c428a0301ab54e833b321c09534">00153</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;node=<link linkend="_namespace_insertable_reversible_array_impl">InsertableReversibleArrayImpl</link>::<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,T&gt;;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00154"/><link linkend="_struct_insertable_reversible_array_1a5d95b6579130721eb3575f2a8452d834">00154</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;node_ptr=node*;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00155"/><link linkend="_struct_insertable_reversible_array_1a2d03db862b342d40e310d96e3730f1c8">00155</link> &#32;&#32;&#32;&#32;node_ptr&#32;<link linkend="_struct_insertable_reversible_array_1a2d03db862b342d40e310d96e3730f1c8">root</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">InsertableReversibleArrayImpl</link>::<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">LazyReversibleRBST</link>&lt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">T</link>,
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">T</link>,
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">InsertableReversibleArrayImpl</link>::<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">op</link>&lt;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">T</link>&gt;,
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">InsertableReversibleArrayImpl</link>::<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">op</link>&lt;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">T</link>&gt;,
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">InsertableReversibleArrayImpl</link>::<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">op</link>&lt;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">T</link>&gt;,
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">InsertableReversibleArrayImpl</link>::<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">e</link>&lt;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">T</link>&gt;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00163"/><link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">00163</link> &#32;&#32;&#32;&#32;&gt;&#32;<link linkend="_struct_insertable_reversible_array_1a99106d441b1b34f3aa108ebcf0c4f3ea">rbst</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00164"/><link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">00164</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>=0;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00165"/>00165 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00166"/><link linkend="_struct_insertable_reversible_array_1a977a1f5a620ffec62755a1ca3b0f328b">00166</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1a977a1f5a620ffec62755a1ca3b0f328b">size</link>()&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00169"/>00169 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00170"/><link linkend="_struct_insertable_reversible_array_1aa2087eb079b25efc16b6c5a6356a9299">00170</link> &#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1aa2087eb079b25efc16b6c5a6356a9299">InsertableReversibleArray</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00171"/>00171 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00172"/><link linkend="_struct_insertable_reversible_array_1a8b180eeb6d7a237eb7abedb5975c42ab">00172</link> &#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a8b180eeb6d7a237eb7abedb5975c42ab">InsertableReversibleArray</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;T&gt;init(n);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root=rbst.build(init);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>=n;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00177"/>00177 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00178"/><link linkend="_struct_insertable_reversible_array_1a2411bea8ef1cf9692bbaf7df9b83a210">00178</link> &#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a2411bea8ef1cf9692bbaf7df9b83a210">InsertableReversibleArray</link>(<emphasis role="keyword">const</emphasis>&#32;vector&lt;T&gt;&amp;init)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root=rbst.build(init);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>=init.size();
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00182"/>00182 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目に&#32;x&#32;を挿入する</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00184"/><link linkend="_struct_insertable_reversible_array_1ab2b765916173504d440af42e3df58868">00184</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1ab2b765916173504d440af42e3df58868">insert</link>(<emphasis role="keywordtype">int</emphasis>&#32;k,&#32;T&#32;x)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(0&lt;=k&amp;&amp;k&lt;=<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>++;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rbst.insert(root,k,x);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00189"/>00189 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目を削除する</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00191"/><link linkend="_struct_insertable_reversible_array_1a9a9bb97370a02d5d5d63a4aa29d648d7">00191</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1a9a9bb97370a02d5d5d63a4aa29d648d7">erase</link>(<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(0&lt;=k&amp;&amp;k&lt;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>--;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rbst.erase(root,k);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00196"/>00196 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目の要素を取得する</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00198"/><link linkend="_struct_insertable_reversible_array_1a5e4dd28311e225c1e1f9ec9968139e2f">00198</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_insertable_reversible_array_1a5e4dd28311e225c1e1f9ec9968139e2f">get</link>(<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(0&lt;=k&amp;&amp;k&lt;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rbst.fold(root,k,k+1);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00202"/>00202 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目の要素を&#32;x&#32;に変更する</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00204"/><link linkend="_struct_insertable_reversible_array_1a41d2ed956f4a37eaac47a015597e2948">00204</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1a41d2ed956f4a37eaac47a015597e2948">set</link>(<emphasis role="keywordtype">int</emphasis>&#32;k,&#32;T&#32;x)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(0&lt;=k&amp;&amp;k&lt;<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1a9a9bb97370a02d5d5d63a4aa29d648d7">erase</link><link linkend="_struct_insertable_reversible_array_1a9a9bb97370a02d5d5d63a4aa29d648d7">(</link>k<link linkend="_struct_insertable_reversible_array_1a9a9bb97370a02d5d5d63a4aa29d648d7">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_insertable_reversible_array_1ab2b765916173504d440af42e3df58868">insert</link><link linkend="_struct_insertable_reversible_array_1ab2b765916173504d440af42e3df58868">(</link>k<link linkend="_struct_insertable_reversible_array_1ab2b765916173504d440af42e3df58868">,</link>x<link linkend="_struct_insertable_reversible_array_1ab2b765916173504d440af42e3df58868">)</link>;
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00209"/>00209 
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[l,&#32;r)&#32;の要素を反転する</emphasis>
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00211"/><link linkend="_struct_insertable_reversible_array_1af25d43b4b88fd782a8c45c3616d50054">00211</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_insertable_reversible_array_1af25d43b4b88fd782a8c45c3616d50054">reverse</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r)&#32;{
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(0&lt;=l&amp;&amp;l&lt;=r&amp;&amp;r&lt;=<link linkend="_struct_insertable_reversible_array_1a693dd53064f16c54821043eb12258c95">_size</link>);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rbst.reverse(root,l,r);
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;}
<anchor xml:id="_insert__reverse__array_8hpp_source_1l00215"/>00215 };
</programlisting></section>
