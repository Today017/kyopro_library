<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lagrange2_8hpp_source" xml:lang="ja">
<title>lagrange2.hpp</title>
<indexterm><primary>math/lagrange2.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_lagrange2_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_lagrange2_8hpp_source_1l00002"/>00002 
<anchor xml:id="_lagrange2_8hpp_source_1l00003"/>00003 <emphasis role="comment">//ラグランジュ補間</emphasis>
<anchor xml:id="_lagrange2_8hpp_source_1l00004"/>00004 <emphasis role="comment">//n+1個の点(xi,yi)を通るn次多項式の係数を返す/O(n^2)</emphasis>
<anchor xml:id="_lagrange2_8hpp_source_1l00005"/>00005 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_lagrange2_8hpp_source_1l00006"/><link linkend="_lagrange2_8hpp_1ac7cffccc1d987126f4dc4cb1177d13c6">00006</link> <link linkend="_lagrange2_8hpp_1ac7cffccc1d987126f4dc4cb1177d13c6">vector</link>&lt;<link linkend="_lagrange2_8hpp_1ac7cffccc1d987126f4dc4cb1177d13c6">T</link>&gt;<link linkend="_lagrange2_8hpp_1ac7cffccc1d987126f4dc4cb1177d13c6">lagrangePolynomial</link>(vector&lt;T&gt;x,vector&lt;T&gt;y){
<anchor xml:id="_lagrange2_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=x.size()-1;
<anchor xml:id="_lagrange2_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;=n;i++){
<anchor xml:id="_lagrange2_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;t=1;
<anchor xml:id="_lagrange2_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;j&lt;=n;j++){
<anchor xml:id="_lagrange2_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i!=j)t*=x[i]-x[j];
<anchor xml:id="_lagrange2_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y[i]/=t;
<anchor xml:id="_lagrange2_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="comment">//前計算&#32;dp[i]:=(x-x0)*...*(x-xn)の&#32;x^i&#32;の係数</emphasis>
<anchor xml:id="_lagrange2_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;vector&lt;T&gt;dp(n+2);
<anchor xml:id="_lagrange2_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;dp[0]=1;
<anchor xml:id="_lagrange2_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(T&#32;xi:x){
<anchor xml:id="_lagrange2_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=n+1;i&gt;=0;i--){
<anchor xml:id="_lagrange2_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dp[i]*=-xi;
<anchor xml:id="_lagrange2_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&gt;0)dp[i]+=dp[i-1];
<anchor xml:id="_lagrange2_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">//戻すDP</emphasis>
<anchor xml:id="_lagrange2_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;vector&lt;T&gt;ret(n+1);
<anchor xml:id="_lagrange2_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;=n;i++){
<anchor xml:id="_lagrange2_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x[i]==T(0)){
<anchor xml:id="_lagrange2_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;j&lt;=n;j++)ret[j]+=dp[j+1]*y[i];
<anchor xml:id="_lagrange2_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_lagrange2_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;inv=x[i].inv();
<anchor xml:id="_lagrange2_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[0]+=-dp[0]*inv*y[i];
<anchor xml:id="_lagrange2_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;pre=-dp[0]*inv;
<anchor xml:id="_lagrange2_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=1;j&lt;=n;j++){
<anchor xml:id="_lagrange2_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[j]+=-(dp[j]-pre)*inv*y[i];
<anchor xml:id="_lagrange2_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pre=-(dp[j]-pre)*inv;
<anchor xml:id="_lagrange2_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lagrange2_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_lagrange2_8hpp_source_1l00040"/>00040 }
</programlisting></section>
