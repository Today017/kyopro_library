<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lagrange_8hpp_source" xml:lang="ja">
<title>lagrange.hpp</title>
<indexterm><primary>math/lagrange.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_lagrange_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_lagrange_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/math/multipoint_evaluate.hpp&quot;</emphasis>
<anchor xml:id="_lagrange_8hpp_source_1l00003"/>00003 
<anchor xml:id="_lagrange_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;ラグランジュ補間</emphasis>
<anchor xml:id="_lagrange_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@brief&#32;n+1&#32;個の点&#32;(x[i],&#32;y[i])&#32;を通る&#32;n&#32;次多項式の係数を返す</emphasis>
<anchor xml:id="_lagrange_8hpp_source_1l00006"/>00006 <emphasis role="comment">///&#32;@note&#32;O(n&#32;(log(n))^2)</emphasis>
<anchor xml:id="_lagrange_8hpp_source_1l00007"/>00007 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_lagrange_8hpp_source_1l00008"/><link linkend="_lagrange_8hpp_1a50261df3c197ae7a34013b771fd1ddb6">00008</link> <link linkend="_lagrange_8hpp_1a50261df3c197ae7a34013b771fd1ddb6">vector</link>&lt;<link linkend="_lagrange_8hpp_1a50261df3c197ae7a34013b771fd1ddb6">T</link>&gt;&#32;<link linkend="_lagrange_8hpp_1a50261df3c197ae7a34013b771fd1ddb6">LagrangePolynomial</link>(vector&lt;T&gt;&#32;x,&#32;vector&lt;T&gt;&#32;y){
<anchor xml:id="_lagrange_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=x.size();
<anchor xml:id="_lagrange_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n2=1;
<anchor xml:id="_lagrange_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(n2&lt;n)&#32;n2&lt;&lt;=1;
<anchor xml:id="_lagrange_8hpp_source_1l00012"/>00012 
<anchor xml:id="_lagrange_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;vector&lt;vector&lt;T&gt;&gt;&#32;g(n2*2,{1});
<anchor xml:id="_lagrange_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;g[n2+i]={-x[i],1};
<anchor xml:id="_lagrange_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(ll&#32;i=n2-1;&#32;i&gt;0;&#32;i--)&#32;g[i]=PolyMul(g[i&lt;&lt;1],g[i&lt;&lt;1|1]);
<anchor xml:id="_lagrange_8hpp_source_1l00016"/>00016 
<anchor xml:id="_lagrange_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;vector&lt;T&gt;&#32;prod=g[1];
<anchor xml:id="_lagrange_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;vector&lt;T&gt;&#32;diff=PolyDifferential(prod),eval=MultipointEvaluate(diff,x);
<anchor xml:id="_lagrange_8hpp_source_1l00019"/>00019 
<anchor xml:id="_lagrange_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;P=pair&lt;vector&lt;T&gt;,vector&lt;T&gt;&gt;;<emphasis role="comment">//first/second</emphasis>
<anchor xml:id="_lagrange_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;vector&lt;P&gt;&#32;g2(n2*2,{{0},{1}});
<anchor xml:id="_lagrange_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;g2[n2+i]={{y[i]},{-eval[i]*x[i],eval[i]}};
<anchor xml:id="_lagrange_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;merge=[](P&#32;l,&#32;P&#32;r)-&gt;&#32;P&#32;{
<anchor xml:id="_lagrange_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;T&gt;&#32;tmp1=PolyMul(l.first,r.second),tmp2=PolyMul(l.second,r.first);
<anchor xml:id="_lagrange_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{PolyAdd(tmp1,tmp2),PolyMul(l.second,r.second)};
<anchor xml:id="_lagrange_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;};
<anchor xml:id="_lagrange_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(ll&#32;i=n2-1;&#32;i&gt;0;&#32;i--)&#32;g2[i]=merge(g2[i&lt;&lt;1],g2[i&lt;&lt;1|1]);
<anchor xml:id="_lagrange_8hpp_source_1l00028"/>00028 
<anchor xml:id="_lagrange_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;vector&lt;T&gt;&#32;ret=g2[1].first;
<anchor xml:id="_lagrange_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;T&#32;p=1;
<anchor xml:id="_lagrange_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;p*=eval[i];
<anchor xml:id="_lagrange_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;p=p.inv();
<anchor xml:id="_lagrange_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;ret[i]*=p;
<anchor xml:id="_lagrange_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_lagrange_8hpp_source_1l00035"/>00035 }
</programlisting></section>
