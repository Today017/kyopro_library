<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lca_8hpp_source" xml:lang="ja">
<title>lca.hpp</title>
<indexterm><primary>graph/tree/lca.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_lca_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00002"/>00002 
<anchor xml:id="_lca_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;LCA</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00004"/><link linkend="_struct_l_c_a">00004</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_l_c_a">LCA</link>&#32;{
<anchor xml:id="_lca_8hpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;コンストラクタ</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00006"/><link linkend="_struct_l_c_a_1af6d23a47705e2f854117d680168155c2">00006</link> &#32;&#32;&#32;&#32;<link linkend="_struct_l_c_a_1af6d23a47705e2f854117d680168155c2">LCA</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;root=0)&#32;{
<anchor xml:id="_lca_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_lca_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=1;
<anchor xml:id="_lca_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((1&lt;&lt;k)&lt;n)&#32;k++;
<anchor xml:id="_lca_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par=VVI(k,VI(n,-1)),dep=VI(n);
<anchor xml:id="_lca_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs(g,root,-1);
<anchor xml:id="_lca_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,k-1)&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,n)&#32;par[i+1][j]=par[i][j]==-1?-1:par[i][par[i][j]];
<anchor xml:id="_lca_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca_8hpp_source_1l00014"/>00014 
<anchor xml:id="_lca_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;u,&#32;v&#32;のLCAを返す</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00016"/><link linkend="_struct_l_c_a_1a487d1c6c968cd4282e6e0cae4e28fe66">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_l_c_a_1a487d1c6c968cd4282e6e0cae4e28fe66">lca</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v)&#32;{
<anchor xml:id="_lca_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dep[u]&lt;dep[v])&#32;swap(u,v);
<anchor xml:id="_lca_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=par.size();
<anchor xml:id="_lca_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,k)&#32;<emphasis role="keywordflow">if</emphasis>((dep[u]-dep[v])&gt;&gt;i&amp;1)&#32;u=par[i][u];
<anchor xml:id="_lca_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(u==v)&#32;<emphasis role="keywordflow">return</emphasis>&#32;u;
<anchor xml:id="_lca_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(i,k-1,-1)&#32;<emphasis role="keywordflow">if</emphasis>(par[i][u]!=par[i][v])&#32;u=par[0][u],v=par[0][v];
<anchor xml:id="_lca_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;par[0][u];
<anchor xml:id="_lca_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca_8hpp_source_1l00024"/>00024 
<anchor xml:id="_lca_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;u,&#32;v&#32;の距離を返す</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00026"/><link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">distance</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v)&#32;{
<anchor xml:id="_lca_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dep[u]+dep[v]-2*dep[lca(u,v)];
<anchor xml:id="_lca_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca_8hpp_source_1l00029"/>00029 
<anchor xml:id="_lca_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;x&#32;が&#32;u-v&#32;のパス上にあるか否かを返す</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00031"/><link linkend="_struct_l_c_a_1ad5fecd6ac33048d9665470774370e3e5">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_l_c_a_1ad5fecd6ac33048d9665470774370e3e5">is_on_path</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;{
<anchor xml:id="_lca_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">distance</link><link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">(</link>u<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">,</link>x<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">)</link>+<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">distance</link><link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">(</link>x<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">,</link>v<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">)</link>==<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">distance</link><link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">(</link>u<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">,</link>v<link linkend="_struct_l_c_a_1a73fba08794ae4d796df5308c57e1a237">)</link>;
<anchor xml:id="_lca_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca_8hpp_source_1l00034"/>00034 
<anchor xml:id="_lca_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;頂点&#32;u&#32;から&#32;d&#32;回遡った位置にある頂点を返す</emphasis>
<anchor xml:id="_lca_8hpp_source_1l00036"/><link linkend="_struct_l_c_a_1acdc1eaf704f9531b0d3703e547261f8b">00036</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_l_c_a_1acdc1eaf704f9531b0d3703e547261f8b">climb</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;d)&#32;{
<anchor xml:id="_lca_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=par.size();
<anchor xml:id="_lca_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(i,k-1,-1)&#32;<emphasis role="keywordflow">if</emphasis>(d&gt;&gt;i&amp;1)&#32;u=par[i][u];
<anchor xml:id="_lca_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;u;
<anchor xml:id="_lca_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca_8hpp_source_1l00041"/>00041 
<anchor xml:id="_lca_8hpp_source_1l00042"/>00042 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_lca_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;VVI&#32;par;
<anchor xml:id="_lca_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;VI&#32;dep;
<anchor xml:id="_lca_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dfs(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g,&#32;<emphasis role="keywordtype">int</emphasis>&#32;now,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pre)&#32;{
<anchor xml:id="_lca_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[0][now]=pre,dep[now]=pre==-1?0:dep[pre]+1;
<anchor xml:id="_lca_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:g[now])&#32;<emphasis role="keywordflow">if</emphasis>(nxt!=pre)&#32;dfs(g,nxt,now);
<anchor xml:id="_lca_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca_8hpp_source_1l00049"/>00049 };
</programlisting></section>
