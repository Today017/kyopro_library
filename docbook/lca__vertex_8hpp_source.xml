<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lca__vertex_8hpp_source" xml:lang="ja">
<title>lca_vertex.hpp</title>
<indexterm><primary>graph/tree/lca_vertex.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_lca__vertex_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis>&#32;<emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_lca__vertex_8hpp_source_1l00002"/>00002 
<anchor xml:id="_lca__vertex_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;頂点属性&#32;LCA</emphasis>
<anchor xml:id="_lca__vertex_8hpp_source_1l00004"/>00004 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid&gt;
<anchor xml:id="_lca__vertex_8hpp_source_1l00005"/><link linkend="_struct_lca_vertex">00005</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_lca_vertex">LcaVertex</link>&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00006"/><link linkend="_struct_lca_vertex_1a125d5a6d04529671f85be9326630ae0e">00006</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">typename</emphasis>&#32;Monoid::Type;
<anchor xml:id="_lca__vertex_8hpp_source_1l00007"/>00007 
<anchor xml:id="_lca__vertex_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;コンストラクタ</emphasis>
<anchor xml:id="_lca__vertex_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;v&#32;頂点の重み</emphasis>
<anchor xml:id="_lca__vertex_8hpp_source_1l00010"/><link linkend="_struct_lca_vertex_1a519080bd91834e1379757d832cad8ce2">00010</link> &#32;&#32;&#32;&#32;<link linkend="_struct_lca_vertex_1a519080bd91834e1379757d832cad8ce2">LcaVertex</link>(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;Type&gt;&amp;&#32;v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;root=0)&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=g.size();
<anchor xml:id="_lca__vertex_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=1;
<anchor xml:id="_lca__vertex_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((1&lt;&lt;k)&lt;n)&#32;k++;
<anchor xml:id="_lca__vertex_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par=VVI(k,VI(n,-1)),dep=VI(n),dat=vector&lt;vector&lt;Type&gt;&gt;(k,vector&lt;Type&gt;(n,Monoid::id()));
<anchor xml:id="_lca__vertex_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs(g,v,root,-1,0);
<anchor xml:id="_lca__vertex_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,k-1)&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,n)&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[i+1][j]=par[i][j]==-1?-1:par[i][par[i][j]];
<anchor xml:id="_lca__vertex_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[i+1][j]=par[i][j]==-1?Monoid::id():Monoid::op(dat[i][j],dat[i][par[i][j]]);
<anchor xml:id="_lca__vertex_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00021"/>00021 
<anchor xml:id="_lca__vertex_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;パス&#32;u-v&#32;のモノイド積を返す</emphasis>
<anchor xml:id="_lca__vertex_8hpp_source_1l00023"/><link linkend="_struct_lca_vertex_1a0e4f860220eedd9b1bc9eee332e033ca">00023</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_lca_vertex_1a0e4f860220eedd9b1bc9eee332e033ca">fold</link>(<emphasis role="keywordtype">int</emphasis>&#32;u,&#32;<emphasis role="keywordtype">int</emphasis>&#32;v)&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dep[u]&gt;dep[v])&#32;swap(u,v);
<anchor xml:id="_lca__vertex_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;ret=Monoid::id();
<anchor xml:id="_lca__vertex_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(dep[u]&lt;dep[v])&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=0;
<anchor xml:id="_lca__vertex_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(dep[v]-dep[u]&gt;=(1&lt;&lt;(k+1)))&#32;k++;
<anchor xml:id="_lca__vertex_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=Monoid::op(ret,dat[k][v]),v=par[k][v];
<anchor xml:id="_lca__vertex_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(u!=v)&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=0;
<anchor xml:id="_lca__vertex_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(par[k+1][u]!=par[k+1][v])&#32;k++;
<anchor xml:id="_lca__vertex_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=Monoid::op(ret,dat[k][u]),ret=Monoid::op(ret,dat[k][v]);
<anchor xml:id="_lca__vertex_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u=par[k][u],v=par[k][v];
<anchor xml:id="_lca__vertex_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=Monoid::op(ret,dat[0][u]);
<anchor xml:id="_lca__vertex_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_lca__vertex_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00040"/>00040 
<anchor xml:id="_lca__vertex_8hpp_source_1l00041"/>00041 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_lca__vertex_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;VVI&#32;par;
<anchor xml:id="_lca__vertex_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;VI&#32;dep;
<anchor xml:id="_lca__vertex_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;vector&lt;vector&lt;Type&gt;&gt;&#32;dat;
<anchor xml:id="_lca__vertex_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;dfs(<emphasis role="keyword">const</emphasis>&#32;VVI&amp;&#32;g,&#32;<emphasis role="keyword">const</emphasis>&#32;vector&lt;Type&gt;&amp;&#32;v,&#32;<emphasis role="keywordtype">int</emphasis>&#32;now,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pre)&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;par[0][now]=pre,dep[now]=pre==-1?0:dep[pre]+1;
<anchor xml:id="_lca__vertex_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;nxt:g[now])&#32;{
<anchor xml:id="_lca__vertex_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==pre)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_lca__vertex_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dfs(g,v,nxt,now);
<anchor xml:id="_lca__vertex_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_lca__vertex_8hpp_source_1l00052"/>00052 };
<anchor xml:id="_lca__vertex_8hpp_source_1l00053"/>00053 
<anchor xml:id="_lca__vertex_8hpp_source_1l00054"/>00054 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../../kyopro_library/others/monoid.hpp&quot;</emphasis>
</programlisting></section>
