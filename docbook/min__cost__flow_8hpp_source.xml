<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_min__cost__flow_8hpp_source" xml:lang="ja">
<title>min_cost_flow.hpp</title>
<indexterm><primary>graph/flow/min_cost_flow.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_min__cost__flow_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis>&#32;<emphasis role="preprocessor">&quot;../../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00002"/>00002 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;最小費用流</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@note&#32;コスト負の辺を許容する。負の閉路はダメ。</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00005"/><link linkend="_struct_min_cost_flow">00005</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_min_cost_flow">MinCostFlow</link>&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;辺構造体</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00007"/><link linkend="_struct_min_cost_flow_1_1_edge">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_min_cost_flow_1_1_edge">Edge</link>&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00008"/><link linkend="_struct_min_cost_flow_1_1_edge_1a547696eaaa79241ef48244ef50ef8f11">00008</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1a547696eaaa79241ef48244ef50ef8f11">from</link>;&#32;<emphasis role="comment">///&lt;&#32;始点</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00009"/><link linkend="_struct_min_cost_flow_1_1_edge_1a7cedccd94c97295705d0e852bae7dd7a">00009</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1a7cedccd94c97295705d0e852bae7dd7a">to</link>;&#32;<emphasis role="comment">///&lt;&#32;終点</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00010"/><link linkend="_struct_min_cost_flow_1_1_edge_1aa0302cff92809184f4660b0302a7e554">00010</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1aa0302cff92809184f4660b0302a7e554">rev</link>;&#32;<emphasis role="comment">///&lt;&#32;逆辺のインデックス</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00011"/><link linkend="_struct_min_cost_flow_1_1_edge_1a7a5666a6fbaaca1cc1feaca729b509c6">00011</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1a7a5666a6fbaaca1cc1feaca729b509c6">cap</link>;&#32;<emphasis role="comment">///&lt;&#32;容量</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00012"/><link linkend="_struct_min_cost_flow_1_1_edge_1acecbbadab9200139d6fca7ff17fd92ca">00012</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1acecbbadab9200139d6fca7ff17fd92ca">cost</link>;&#32;<emphasis role="comment">///&lt;&#32;コスト</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00013"/><link linkend="_struct_min_cost_flow_1_1_edge_1a414f6d0a7ad40f94dfe6eea0e2f1eddb">00013</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1a414f6d0a7ad40f94dfe6eea0e2f1eddb">isrev</link>;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00014"/><link linkend="_struct_min_cost_flow_1_1_edge_1a70fad7fec6240ed0b6b4fa9e3128f96b">00014</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_min_cost_flow_1_1_edge_1a70fad7fec6240ed0b6b4fa9e3128f96b">Edge</link>(<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;to,&#32;ll&#32;cap,&#32;ll&#32;cost,&#32;<emphasis role="keywordtype">int</emphasis>&#32;rev,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isrev):<link linkend="_struct_min_cost_flow_1_1_edge_1a547696eaaa79241ef48244ef50ef8f11">from</link>(from),<link linkend="_struct_min_cost_flow_1_1_edge_1a7cedccd94c97295705d0e852bae7dd7a">to</link>(to),<link linkend="_struct_min_cost_flow_1_1_edge_1a7a5666a6fbaaca1cc1feaca729b509c6">cap</link>(cap),<link linkend="_struct_min_cost_flow_1_1_edge_1acecbbadab9200139d6fca7ff17fd92ca">cost</link>(cost),<link linkend="_struct_min_cost_flow_1_1_edge_1aa0302cff92809184f4660b0302a7e554">rev</link>(rev),<link linkend="_struct_min_cost_flow_1_1_edge_1a414f6d0a7ad40f94dfe6eea0e2f1eddb">isrev</link>(isrev)&#32;{}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;};
<anchor xml:id="_min__cost__flow_8hpp_source_1l00016"/>00016 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00017"/><link linkend="_struct_min_cost_flow_1a127b5fdc43378b741da7f935770e4a7c">00017</link> &#32;&#32;&#32;&#32;<link linkend="_struct_min_cost_flow_1a127b5fdc43378b741da7f935770e4a7c">MinCostFlow</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{&#32;graph.resize(n),dist.resize(n),pot.resize(n),pv.resize(n),pe.resize(n);&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00018"/>00018 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;s&#32;-&gt;&#32;t&#32;に容量&#32;cap,&#32;コスト&#32;cost&#32;の辺を追加する</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;cost&#32;は負でも良い</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00021"/><link linkend="_struct_min_cost_flow_1a5430122987ebfe40c88c82b50012df30">00021</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_min_cost_flow_1a5430122987ebfe40c88c82b50012df30">add_edge</link>(<emphasis role="keywordtype">int</emphasis>&#32;from,&#32;<emphasis role="keywordtype">int</emphasis>&#32;to,&#32;ll&#32;cap,&#32;ll&#32;cost)&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;graph[from].push_back(Edge(from,to,cap,cost,graph[to].size(),<emphasis role="keyword">false</emphasis>));
<anchor xml:id="_min__cost__flow_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;graph[to].push_back(Edge(to,from,0,-cost,(<emphasis role="keywordtype">int</emphasis>)graph[from].size()-1,<emphasis role="keyword">true</emphasis>));
<anchor xml:id="_min__cost__flow_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00025"/>00025 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;全ての辺を返す</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(V+E)</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;直前に流した&#32;flow&#32;による残余であることに注意</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00029"/><link linkend="_struct_min_cost_flow_1a54a6053fe01e39bc1a54a28864982d9e">00029</link> &#32;&#32;&#32;&#32;<link linkend="_struct_min_cost_flow_1a54a6053fe01e39bc1a54a28864982d9e">vector</link>&lt;<link linkend="_struct_min_cost_flow_1a54a6053fe01e39bc1a54a28864982d9e">Edge</link>&gt;&#32;<link linkend="_struct_min_cost_flow_1a54a6053fe01e39bc1a54a28864982d9e">get_edges</link>()&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vector&lt;Edge&gt;&#32;ret;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;graph.size();&#32;i++)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;&amp;e:graph[i])&#32;<emphasis role="keywordflow">if</emphasis>(!e.isrev)&#32;ret.push_back(e);
<anchor xml:id="_min__cost__flow_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00034"/>00034 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;s&#32;から&#32;t&#32;へ流量&#32;f&#32;の最小費用流のコストを求める</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;流せない場合は&#32;INFL&#32;を返す</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(FE&#32;log&#32;V)</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00038"/><link linkend="_struct_min_cost_flow_1ad73724ca7ad68fef33e7e1c1f4271ccf">00038</link> &#32;&#32;&#32;&#32;ll&#32;<link linkend="_struct_min_cost_flow_1ad73724ca7ad68fef33e7e1c1f4271ccf">flow</link>(<emphasis role="keywordtype">int</emphasis>&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;t,&#32;ll&#32;f)&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=graph.size();
<anchor xml:id="_min__cost__flow_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rpriority_queue&lt;pair&lt;ll,<emphasis role="keywordtype">int</emphasis>&gt;&gt;&#32;pq;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fill(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(pot),0),fill(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(pv),0),fill(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(pe),0);
<anchor xml:id="_min__cost__flow_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;ret=0;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00043"/>00043 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(f&gt;0)&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fill(dist.begin(),dist.end(),INFL);
<anchor xml:id="_min__cost__flow_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dist[s]=0;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pq.push({0,s});
<anchor xml:id="_min__cost__flow_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(!pq.empty())&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[tmp,now]=pq.top();
<anchor xml:id="_min__cost__flow_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pq.pop();
<anchor xml:id="_min__cost__flow_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dist[now]&lt;tmp)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;graph[now].size();&#32;i++)&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;[from,to,rev,cap,cost,isrev]=graph[now][i];
<anchor xml:id="_min__cost__flow_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;ncost=dist[now]+cost+pot[now]-pot[to];
<anchor xml:id="_min__cost__flow_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(cap&gt;0&amp;&amp;dist[to]&gt;ncost)&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dist[to]=ncost,pv[to]=now,pe[to]=i;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pq.push({dist[to],to});
<anchor xml:id="_min__cost__flow_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(dist[t]==INFL)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_template_8hpp_1a1f713edb7a826e3710159658d6ef9815">INFL</link>;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;n;&#32;i++)&#32;pot[i]+=dist[i];
<anchor xml:id="_min__cost__flow_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;d=f;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;v=t;&#32;v!=s;&#32;v=pv[v])&#32;d=min(d,graph[pv[v]][pe[v]].cap);
<anchor xml:id="_min__cost__flow_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f-=d,ret+=d*pot[t];
<anchor xml:id="_min__cost__flow_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;v=t;&#32;v!=s;&#32;v=pv[v])&#32;{
<anchor xml:id="_min__cost__flow_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&amp;e=graph[pv[v]][pe[v]];
<anchor xml:id="_min__cost__flow_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.cap-=d,graph[v][e.rev].cap+=d;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00071"/>00071 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}
<anchor xml:id="_min__cost__flow_8hpp_source_1l00074"/>00074 
<anchor xml:id="_min__cost__flow_8hpp_source_1l00075"/>00075 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_min__cost__flow_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;vector&lt;vector&lt;Edge&gt;&gt;&#32;graph;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;VL&#32;dist,pot;&#32;<emphasis role="comment">//&#32;距離,&#32;ポテンシャル</emphasis>
<anchor xml:id="_min__cost__flow_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;VI&#32;pv,pe;
<anchor xml:id="_min__cost__flow_8hpp_source_1l00079"/>00079 };
</programlisting></section>
