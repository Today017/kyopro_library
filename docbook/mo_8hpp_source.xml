<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mo_8hpp_source" xml:lang="ja">
<title>mo.hpp</title>
<indexterm><primary>algorithm/mo.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_mo_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00002"/>00002 
<anchor xml:id="_mo_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;Mo&apos;s&#32;Algorithm</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@ref&#32;https://ei1333.hateblo.jp/entry/2017/09/11/211011</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00005"/>00005 <emphasis role="keyword">template</emphasis>&lt;ll&#32;L=20&gt;
<anchor xml:id="_mo_8hpp_source_1l00006"/><link linkend="_struct_mo">00006</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_mo">Mo</link>&#32;{
<anchor xml:id="_mo_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;コンストラクタ</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00008"/><link linkend="_struct_mo_1a12c0e52820513d400e3ebabb498c68f3">00008</link> &#32;&#32;&#32;&#32;<link linkend="_struct_mo_1a12c0e52820513d400e3ebabb498c68f3">Mo</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_mo_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;n=n;
<anchor xml:id="_mo_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_n=1&lt;&lt;L;
<anchor xml:id="_mo_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;}
<anchor xml:id="_mo_8hpp_source_1l00012"/>00012 
<anchor xml:id="_mo_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;クエリ&#32;[l,&#32;r)&#32;を追加する</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00014"/><link linkend="_struct_mo_1a39bea8915a24a54030b29c834637342b">00014</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_mo_1a39bea8915a24a54030b29c834637342b">add</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r)&#32;{
<anchor xml:id="_mo_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q++;
<anchor xml:id="_mo_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ls.push_back(l);
<anchor xml:id="_mo_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rs.push_back(r);
<anchor xml:id="_mo_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;}
<anchor xml:id="_mo_8hpp_source_1l00019"/>00019 
<anchor xml:id="_mo_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;クエリを実行する</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;add_left&#32;`add_left(i)`&#32;i&#32;番目の要素が左から加わるときの処理</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;add_right&#32;`add_right(i)`&#32;i&#32;番目の要素が右から加わるときの処理</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;del_left&#32;`del_left(i)`&#32;i&#32;番目の要素が左から抜けるときの処理</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;del_right&#32;`del_right(i)`&#32;i&#32;番目の要素が右から抜けるときの処理</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;out&#32;`out(i)`&#32;i&#32;番目のクエリの答えを求めたときの処理</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N&#32;sqrt(Q))</emphasis>
<anchor xml:id="_mo_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;F1,&#32;<emphasis role="keyword">typename</emphasis>&#32;F2,&#32;<emphasis role="keyword">typename</emphasis>&#32;F3,&#32;<emphasis role="keyword">typename</emphasis>&#32;F4,&#32;<emphasis role="keyword">typename</emphasis>&#32;F5&gt;
<anchor xml:id="_mo_8hpp_source_1l00028"/><link linkend="_struct_mo_1a487fe96e3907bd2d23fb9569b98500d3">00028</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_mo_1a487fe96e3907bd2d23fb9569b98500d3">execute</link>(F1&amp;&amp;&#32;add_left,&#32;F2&amp;&amp;&#32;add_right,&#32;F3&amp;&amp;&#32;del_left,&#32;F4&amp;&amp;&#32;del_right,&#32;F5&amp;&amp;&#32;out)&#32;{
<anchor xml:id="_mo_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VI&#32;qi(q);&#32;iota(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(qi),0);
<anchor xml:id="_mo_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;VL&#32;eval(q);
<anchor xml:id="_mo_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,q)&#32;eval[i]=hilbertorder(ls[i],rs[i]);
<anchor xml:id="_mo_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sort(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(qi),[&amp;](<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;<emphasis role="keywordtype">int</emphasis>&#32;j){&#32;<emphasis role="keywordflow">return</emphasis>&#32;eval[i]&lt;eval[j];&#32;});
<anchor xml:id="_mo_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nl=0,nr=0;
<anchor xml:id="_mo_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&amp;&#32;i:qi){
<anchor xml:id="_mo_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(nl&gt;ls[i])&#32;add_left(--nl);
<anchor xml:id="_mo_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(nr&lt;rs[i])&#32;add_right(nr++);
<anchor xml:id="_mo_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(nl&lt;ls[i])&#32;del_left(nl++);
<anchor xml:id="_mo_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(nr&gt;rs[i])&#32;del_right(--nr);
<anchor xml:id="_mo_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out(i);
<anchor xml:id="_mo_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_mo_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="_mo_8hpp_source_1l00042"/>00042 
<anchor xml:id="_mo_8hpp_source_1l00043"/>00043 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_mo_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,q;
<anchor xml:id="_mo_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;ll&#32;max_n;
<anchor xml:id="_mo_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;VI&#32;ls,rs;
<anchor xml:id="_mo_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;ll&#32;hilbertorder(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{
<anchor xml:id="_mo_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;rx,ry,d=0;
<anchor xml:id="_mo_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(ll&#32;s=max_n&gt;&gt;1ll;&#32;s;&#32;s&gt;&gt;=1ll)&#32;{
<anchor xml:id="_mo_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rx=(x&amp;s)&gt;0,ry=(y&amp;s)&gt;0;
<anchor xml:id="_mo_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d+=s*s*((rx*3)^ry);
<anchor xml:id="_mo_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(ry)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_mo_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rx)&#32;x=max_n-1-x,y=max_n-1-y;
<anchor xml:id="_mo_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swap(x,y);
<anchor xml:id="_mo_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_mo_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
<anchor xml:id="_mo_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;}
<anchor xml:id="_mo_8hpp_source_1l00058"/>00058 };
</programlisting></section>
