<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_offset__vector_8hpp_source" xml:lang="ja">
<title>offset_vector.hpp</title>
<indexterm><primary>data_structure/offset_vector.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_offset__vector_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_offset__vector_8hpp_source_1l00002"/>00002 
<anchor xml:id="_offset__vector_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@file&#32;offset_vector.hpp</emphasis>
<anchor xml:id="_offset__vector_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;負の添字を取れる&#32;vector</emphasis>
<anchor xml:id="_offset__vector_8hpp_source_1l00005"/>00005 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_offset__vector_8hpp_source_1l00006"/><link linkend="_struct_offset_vector">00006</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_offset_vector">OffsetVector</link>:<link linkend="_struct_offset_vector">vector</link>&lt;<link linkend="_struct_offset_vector">T</link>&gt;&#32;{
<anchor xml:id="_offset__vector_8hpp_source_1l00007"/><link linkend="_struct_offset_vector_1a54f1ad99055e7fc6a342fd43c0a32da1">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_offset_vector_1a54f1ad99055e7fc6a342fd43c0a32da1">offset</link>=0;
<anchor xml:id="_offset__vector_8hpp_source_1l00008"/><link linkend="_struct_offset_vector_1a649368817cf7764111d85732f5c87d33">00008</link> &#32;&#32;&#32;&#32;<link linkend="_struct_offset_vector_1a649368817cf7764111d85732f5c87d33">OffsetVector</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_offset__vector_8hpp_source_1l00009"/>00009 
<anchor xml:id="_offset__vector_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;添字として区間&#32;[lo,&#32;hi]&#32;の値を取れる配列を宣言する</emphasis>
<anchor xml:id="_offset__vector_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;init&#32;初期値</emphasis>
<anchor xml:id="_offset__vector_8hpp_source_1l00012"/><link linkend="_struct_offset_vector_1a95439aaf800eb489322e996e2857f885">00012</link> &#32;&#32;&#32;&#32;<link linkend="_struct_offset_vector_1a95439aaf800eb489322e996e2857f885">OffsetVector</link>(<emphasis role="keywordtype">int</emphasis>&#32;lo,<emphasis role="keywordtype">int</emphasis>&#32;hi,T&#32;init)&#32;{
<anchor xml:id="_offset__vector_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(lo&lt;=hi);
<anchor xml:id="_offset__vector_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;assign(hi-lo+1,init);
<anchor xml:id="_offset__vector_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_offset_vector_1a54f1ad99055e7fc6a342fd43c0a32da1">offset</link>=-lo;
<anchor xml:id="_offset__vector_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;}
<anchor xml:id="_offset__vector_8hpp_source_1l00017"/>00017 
<anchor xml:id="_offset__vector_8hpp_source_1l00018"/><link linkend="_struct_offset_vector_1ac8216cd803b6b43bc6100ec06b30b701">00018</link> &#32;&#32;&#32;&#32;T&amp;<link linkend="_struct_offset_vector_1ac8216cd803b6b43bc6100ec06b30b701">operator</link>[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
<anchor xml:id="_offset__vector_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(i+<link linkend="_struct_offset_vector_1a54f1ad99055e7fc6a342fd43c0a32da1">offset</link>&gt;=0);
<anchor xml:id="_offset__vector_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vector&lt;T&gt;::operator[](i+offset);
<anchor xml:id="_offset__vector_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;}
<anchor xml:id="_offset__vector_8hpp_source_1l00022"/>00022 
<anchor xml:id="_offset__vector_8hpp_source_1l00023"/><link linkend="_struct_offset_vector_1a6262f7b3582bc76939b1e3680cca5229">00023</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_offset_vector_1a6262f7b3582bc76939b1e3680cca5229">operator</link>[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;<emphasis role="keyword">const</emphasis>&#32;{
<anchor xml:id="_offset__vector_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(i+<link linkend="_struct_offset_vector_1a54f1ad99055e7fc6a342fd43c0a32da1">offset</link>&gt;=0);
<anchor xml:id="_offset__vector_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vector&lt;T&gt;::operator[](i+offset);
<anchor xml:id="_offset__vector_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_offset__vector_8hpp_source_1l00027"/>00027 };
</programlisting></section>
