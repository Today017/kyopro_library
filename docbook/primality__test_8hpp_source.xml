<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_primality__test_8hpp_source" xml:lang="ja">
<title>primality_test.hpp</title>
<indexterm><primary>math/primality_test.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_primality__test_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_primality__test_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/modcal.hpp&quot;</emphasis>
<anchor xml:id="_primality__test_8hpp_source_1l00003"/>00003 
<anchor xml:id="_primality__test_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;ミラーラビン素数判定法により&#32;n&#32;が素数であるかを判定する</emphasis>
<anchor xml:id="_primality__test_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@note&#32;O(k&#32;log^3&#32;n)</emphasis>
<anchor xml:id="_primality__test_8hpp_source_1l00006"/>00006 <emphasis role="comment">///&#32;@ref&#32;https://drken1215.hatenablog.com/entry/2023/05/23/233000</emphasis>
<anchor xml:id="_primality__test_8hpp_source_1l00007"/>00007 <emphasis role="comment">///&#32;@ref&#32;verify:&#32;https://judge.yosupo.jp/problem/primality_test</emphasis>
<anchor xml:id="_primality__test_8hpp_source_1l00008"/><link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">00008</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">PrimalityTest</link>(ll&#32;n)&#32;{
<anchor xml:id="_primality__test_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(n==2)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(n&lt;=1||n%2==0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00011"/>00011 
<anchor xml:id="_primality__test_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;VL&#32;test;
<anchor xml:id="_primality__test_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(n&lt;4759123141ll)&#32;test={2,7,61};
<anchor xml:id="_primality__test_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;test={2,325,9375,28178,450775,9780504,1795265022};
<anchor xml:id="_primality__test_8hpp_source_1l00015"/>00015 
<anchor xml:id="_primality__test_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;ll&#32;s=0,d=n-1;
<anchor xml:id="_primality__test_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(d%2==0)&#32;d&gt;&gt;=1,s++;
<anchor xml:id="_primality__test_8hpp_source_1l00018"/>00018 
<anchor xml:id="_primality__test_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(ll&#32;a:test)&#32;{
<anchor xml:id="_primality__test_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(a&gt;=n)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LL&#32;x=ModPow&lt;LL&gt;(a,d,n);
<anchor xml:id="_primality__test_8hpp_source_1l00022"/>00022 
<anchor xml:id="_primality__test_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x==1||x==n-1)&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_primality__test_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(ll&#32;r=1;&#32;r&lt;s;&#32;r++)&#32;{
<anchor xml:id="_primality__test_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x=x*x%n;
<anchor xml:id="_primality__test_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x==1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(x==n-1)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_primality__test_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_primality__test_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x!=n-1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="_primality__test_8hpp_source_1l00033"/>00033 
<anchor xml:id="_primality__test_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_primality__test_8hpp_source_1l00035"/>00035 }
</programlisting></section>
