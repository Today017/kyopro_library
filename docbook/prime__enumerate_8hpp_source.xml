<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_prime__enumerate_8hpp_source" xml:lang="ja">
<title>prime_enumerate.hpp</title>
<indexterm><primary>math/prime_enumerate.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_prime__enumerate_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">pragma</emphasis>&#32;<emphasis role="preprocessor">once</emphasis>
<anchor xml:id="_prime__enumerate_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_prime__enumerate_8hpp_source_1l00003"/>00003 
<anchor xml:id="_prime__enumerate_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;素数列挙</emphasis>
<anchor xml:id="_prime__enumerate_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@details&#32;n&#32;以下の素数の配列を返す</emphasis>
<anchor xml:id="_prime__enumerate_8hpp_source_1l00006"/>00006 <emphasis role="comment">///&#32;@note&#32;O(n&#32;log(log(n)))</emphasis>
<anchor xml:id="_prime__enumerate_8hpp_source_1l00007"/><link linkend="_prime__enumerate_8hpp_1acbe1d7419dfe173d994d7523535bc1b0">00007</link> <link linkend="_prime__enumerate_8hpp_1acbe1d7419dfe173d994d7523535bc1b0">VI</link>&#32;<link linkend="_prime__enumerate_8hpp_1acbe1d7419dfe173d994d7523535bc1b0">PrimeEnumerate</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_prime__enumerate_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;VI&#32;prime,is_prime(n+1,<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_prime__enumerate_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;is_prime[0]=is_prime[1]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_prime__enumerate_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(i,2,n+1)&#32;{
<anchor xml:id="_prime__enumerate_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(is_prime[i])&#32;{
<anchor xml:id="_prime__enumerate_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prime.push_back(i);
<anchor xml:id="_prime__enumerate_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=2*i;&#32;j&lt;=n;&#32;j+=i)&#32;is_prime[j]=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_prime__enumerate_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__enumerate_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__enumerate_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;prime;
<anchor xml:id="_prime__enumerate_8hpp_source_1l00017"/>00017 }
</programlisting></section>
