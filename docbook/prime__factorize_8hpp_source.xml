<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_prime__factorize_8hpp_source" xml:lang="ja">
<title>prime_factorize.hpp</title>
<indexterm><primary>math/prime_factorize.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_prime__factorize_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_prime__factorize_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/math/primality_test.hpp&quot;</emphasis>
<anchor xml:id="_prime__factorize_8hpp_source_1l00003"/>00003 
<anchor xml:id="_prime__factorize_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;ポラードのロー法で&#32;n&#32;を素因数分解する</emphasis>
<anchor xml:id="_prime__factorize_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@note&#32;O(N^(1/4))</emphasis>
<anchor xml:id="_prime__factorize_8hpp_source_1l00006"/>00006 <emphasis role="comment">///&#32;@ref&#32;https://qiita.com/t_fuki/items/7cd50de54d3c5d063b4a</emphasis>
<anchor xml:id="_prime__factorize_8hpp_source_1l00007"/>00007 <emphasis role="comment">///&#32;@ref&#32;verify:&#32;https://algo-method.com/tasks/553</emphasis>
<anchor xml:id="_prime__factorize_8hpp_source_1l00008"/><link linkend="_prime__factorize_8hpp_1aff9025efaf03036409bcd5131cac3e00">00008</link> <link linkend="_prime__factorize_8hpp_1aff9025efaf03036409bcd5131cac3e00">VP</link>&#32;<link linkend="_prime__factorize_8hpp_1aff9025efaf03036409bcd5131cac3e00">PrimeFactorize</link>(ll&#32;n)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">PrimalityTest</link><link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">(</link>n<link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">)</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{n,1}};
<anchor xml:id="_prime__factorize_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;find_factor=[](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;find_factor,&#32;ll&#32;n)-&gt;&#32;ll&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LL&#32;m=(ll)pow(n,0.125)+1;
<anchor xml:id="_prime__factorize_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;_gcd=[](LL&#32;a,&#32;LL&#32;b)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(a)&#32;b%=a,swap(a,b);
<anchor xml:id="_prime__factorize_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;b;
<anchor xml:id="_prime__factorize_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="_prime__factorize_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;_abs=[](LL&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;x&lt;0?-x:x;&#32;};
<anchor xml:id="_prime__factorize_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(c,1,n)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;f=[&amp;](LL&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>((x%n)*(x%n)+c)%n;&#32;};
<anchor xml:id="_prime__factorize_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LL&#32;y=0,r=1,q=1,g=1,k=0,x=0,ys=0;
<anchor xml:id="_prime__factorize_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(g==1)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x=y;
<anchor xml:id="_prime__factorize_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(k&lt;r*3/4)&#32;y=f(y),k++;
<anchor xml:id="_prime__factorize_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(k&lt;r&amp;&amp;g==1)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ys=y;
<anchor xml:id="_prime__factorize_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;min(m,r-k);&#32;i++)&#32;y=f(y),q=q*_abs(x-y)%n;
<anchor xml:id="_prime__factorize_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g=_gcd(q,n),k+=m;
<anchor xml:id="_prime__factorize_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k=r,r*=2;
<anchor xml:id="_prime__factorize_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g==n)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g=1,y=ys;
<anchor xml:id="_prime__factorize_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(g==1)&#32;y=f(y),g=_gcd(_abs(x-y),n);
<anchor xml:id="_prime__factorize_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g&lt;n)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(PrimalityTest(g))&#32;<emphasis role="keywordflow">return</emphasis>&#32;g;
<anchor xml:id="_prime__factorize_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(PrimalityTest(n/g))&#32;<emphasis role="keywordflow">return</emphasis>&#32;n/g;
<anchor xml:id="_prime__factorize_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;find_factor(find_factor,g);
<anchor xml:id="_prime__factorize_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_prime__factorize_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;};
<anchor xml:id="_prime__factorize_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;map&lt;ll,ll&gt;&#32;mp;
<anchor xml:id="_prime__factorize_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;ll&#32;i=2;
<anchor xml:id="_prime__factorize_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i*i&lt;=n)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;k=0;
<anchor xml:id="_prime__factorize_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(n%i==0)&#32;n/=i,k++;
<anchor xml:id="_prime__factorize_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(k)&#32;mp[i]=k;
<anchor xml:id="_prime__factorize_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i+=i%2+1;
<anchor xml:id="_prime__factorize_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i==101&amp;&amp;n&gt;=(1ll&lt;&lt;20))&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(n&gt;1)&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">PrimalityTest</link><link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">(</link>n<link linkend="_primality__test_8hpp_1a50c80146bd471b603303181ec724eaf9">)</link>)&#32;mp[n]=1,n=1;
<anchor xml:id="_prime__factorize_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_prime__factorize_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;j=find_factor(find_factor,n);
<anchor xml:id="_prime__factorize_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k=0;
<anchor xml:id="_prime__factorize_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(n%j==0)&#32;n/=j,k++;
<anchor xml:id="_prime__factorize_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mp[j]=k;
<anchor xml:id="_prime__factorize_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;}
<anchor xml:id="_prime__factorize_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(n&gt;1)&#32;mp[n]=1;
<anchor xml:id="_prime__factorize_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;VP&#32;ret;
<anchor xml:id="_prime__factorize_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&#32;p:mp)&#32;ret.push_back(p);
<anchor xml:id="_prime__factorize_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;sort(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(ret));
<anchor xml:id="_prime__factorize_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_prime__factorize_8hpp_source_1l00066"/>00066 }
</programlisting></section>
