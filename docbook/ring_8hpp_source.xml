<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_ring_8hpp_source" xml:lang="ja">
<title>ring.hpp</title>
<indexterm><primary>others/ring.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_ring_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00002"/>00002 
<anchor xml:id="_ring_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;円環上での計算</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00004"/><link linkend="_namespace_ring">00004</link> <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_ring">Ring</link>&#32;{
<anchor xml:id="_ring_8hpp_source_1l00005"/>00005 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;円環上で&#32;p1-&gt;p2&#32;に+方向に移動する際に&#32;target&#32;を通過するかを判定する。</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@ref&#32;verify:&#32;https://atcoder.jp/contests/abc367/tasks/abc367_a</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00007"/><link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">BetweenIncrement</link>(ll&#32;p1,&#32;ll&#32;p2,&#32;ll&#32;target)&#32;{
<anchor xml:id="_ring_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p1==p2)&#32;<emphasis role="keywordflow">return</emphasis>&#32;p1==target;
<anchor xml:id="_ring_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(target-p2)*(p2-p1)*(p1-target)&gt;=0;
<anchor xml:id="_ring_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ring_8hpp_source_1l00011"/>00011 
<anchor xml:id="_ring_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;円環上で&#32;p1-&gt;p2&#32;に-方向に移動する際に&#32;target&#32;を通過するかを判定する。</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00013"/><link linkend="_namespace_ring_1aa7be4526ac3dbffd587fa2940d69e45f">00013</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace_ring_1aa7be4526ac3dbffd587fa2940d69e45f">BetweenDecrement</link>(ll&#32;p1,&#32;ll&#32;p2,&#32;ll&#32;target)&#32;{
<anchor xml:id="_ring_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;swap(p1,p2);
<anchor xml:id="_ring_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">BetweenIncrement</link><link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">(</link>p1<link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">,</link>p2<link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">,</link>target<link linkend="_namespace_ring_1abd2be741ee7adfd0fad8590991e231bd">)</link>;
<anchor xml:id="_ring_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ring_8hpp_source_1l00017"/>00017 
<anchor xml:id="_ring_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;サイズ&#32;n&#32;の円環上で&#32;p1-&gt;p2&#32;に移動する距離を返す。</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00019"/><link linkend="_namespace_ring_1a51b59d6334dd0f6ffed02a0cfd26e69b">00019</link> &#32;&#32;&#32;&#32;ll&#32;<link linkend="_namespace_ring_1a51b59d6334dd0f6ffed02a0cfd26e69b">DistanceMin</link>(ll&#32;p1,&#32;ll&#32;p2,&#32;ll&#32;n)&#32;{
<anchor xml:id="_ring_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p1&gt;p2)&#32;swap(p1,p2);
<anchor xml:id="_ring_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;min(p2-p1,n-(p2-p1));
<anchor xml:id="_ring_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ring_8hpp_source_1l00023"/>00023 
<anchor xml:id="_ring_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;サイズ&#32;n&#32;の円環上で&#32;p1-&gt;p2&#32;に+方向に移動する距離を返す。</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00025"/><link linkend="_namespace_ring_1adbb40db1fb017775281f57556a1f3787">00025</link> &#32;&#32;&#32;&#32;ll&#32;<link linkend="_namespace_ring_1adbb40db1fb017775281f57556a1f3787">DistanceIncrement</link>(ll&#32;p1,&#32;ll&#32;p2,&#32;ll&#32;n)&#32;{
<anchor xml:id="_ring_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p1&lt;p2&#32;?&#32;p2-p1&#32;:&#32;(n+p2-p1)%n;
<anchor xml:id="_ring_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ring_8hpp_source_1l00028"/>00028 
<anchor xml:id="_ring_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;サイズ&#32;n&#32;の円環上で&#32;p1-&gt;p2&#32;に-方向に移動する距離を返す。</emphasis>
<anchor xml:id="_ring_8hpp_source_1l00030"/><link linkend="_namespace_ring_1ae9fa707dfac273441785771d1e0d647e">00030</link> &#32;&#32;&#32;&#32;ll&#32;<link linkend="_namespace_ring_1ae9fa707dfac273441785771d1e0d647e">DistanceDecrement</link>(ll&#32;p1,&#32;ll&#32;p2,&#32;ll&#32;n)&#32;{
<anchor xml:id="_ring_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p1&gt;p2&#32;?&#32;p1-p2&#32;:&#32;(n+p1-p2)%n;
<anchor xml:id="_ring_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="_ring_8hpp_source_1l00033"/>00033 }
</programlisting></section>
