<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_rolling__hash_8hpp_source" xml:lang="ja">
<title>rolling_hash.hpp</title>
<indexterm><primary>string/rolling_hash.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_rolling__hash_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_rolling__hash_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/xor128.hpp&quot;</emphasis>
<anchor xml:id="_rolling__hash_8hpp_source_1l00003"/>00003 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/modcal.hpp&quot;</emphasis>
<anchor xml:id="_rolling__hash_8hpp_source_1l00004"/>00004 
<anchor xml:id="_rolling__hash_8hpp_source_1l00005"/><link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">00005</link> <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>=1000000;
<anchor xml:id="_rolling__hash_8hpp_source_1l00006"/><link linkend="_rolling__hash_8hpp_1a404ac35e6b35b40321967f29d9f2c783">00006</link> <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_rolling__hash_8hpp_1a404ac35e6b35b40321967f29d9f2c783">HASH_C</link>=256;
<anchor xml:id="_rolling__hash_8hpp_source_1l00007"/><link linkend="_struct_hash">00007</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00008"/>00008 
<anchor xml:id="_rolling__hash_8hpp_source_1l00009"/><link linkend="_struct_hash_1a21e94320d986c15f38f83c0a1bc92e52">00009</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_hash">Type</link>=<link linkend="_struct_hash">array</link>&lt;<link linkend="_struct_hash">ll</link>,5&gt;;
<anchor xml:id="_rolling__hash_8hpp_source_1l00010"/><link linkend="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49">00010</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49">VL</link>&#32;<link linkend="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49">base</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00011"/><link linkend="_struct_hash_1a65e9a611ad519be5e54523e2845422dc">00011</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_hash_1a65e9a611ad519be5e54523e2845422dc">VVL</link>&#32;<link linkend="_struct_hash_1a65e9a611ad519be5e54523e2845422dc">inv</link>,<link linkend="_struct_hash_1a40b806f7e170c9454766807a0340696b">pow</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980">VL</link>&#32;<link linkend="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980">mod</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00013"/><link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">00013</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">array</link>&lt;<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">array</link>&lt;<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">ll</link>,5&gt;,256&gt;&#32;<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">num</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00015"/>00015 
<anchor xml:id="_rolling__hash_8hpp_source_1l00016"/><link linkend="_struct_hash_1a6a39c22a994feb6e341c48e1a9ac24cb">00016</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash_1a6a39c22a994feb6e341c48e1a9ac24cb">Type</link>&#32;<link linkend="_struct_hash_1a6a39c22a994feb6e341c48e1a9ac24cb">value</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00017"/>00017 
<anchor xml:id="_rolling__hash_8hpp_source_1l00018"/><link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">init</link>()&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link>)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link>=<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base=VL(5);&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;base[i]=Xor128(3000,mod[i]);
<anchor xml:id="_rolling__hash_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inv=VVL(5);&#32;pow=VVL(5);
<anchor xml:id="_rolling__hash_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow[i]=VL(<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>+1);&#32;inv[i]=VL(<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>+1);
<anchor xml:id="_rolling__hash_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow[i][0]=1;&#32;inv[i][<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>]=ModInv(ModPow&lt;ll&gt;(base[i],<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>,mod[i]),mod[i]);
<anchor xml:id="_rolling__hash_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pow[i][j+1]=(pow[i][j]*base[i])%mod[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inv[i][<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>-j-1]=(inv[i][<link linkend="_rolling__hash_8hpp_1a84e5a31f8ac23bac6f393494d0237d98">HASH_MAX</link>-j]*base[i])%mod[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,<link linkend="_rolling__hash_8hpp_1a404ac35e6b35b40321967f29d9f2c783">HASH_C</link>)&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(j,5)&#32;num[i][j]=<link linkend="_xor128_8hpp_1a1769a3e4e9794ae293252dc65f5c2425">Xor128</link><link linkend="_xor128_8hpp_1a1769a3e4e9794ae293252dc65f5c2425">(</link>1<link linkend="_xor128_8hpp_1a1769a3e4e9794ae293252dc65f5c2425">,</link>3000<link linkend="_xor128_8hpp_1a1769a3e4e9794ae293252dc65f5c2425">)</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00033"/>00033 
<anchor xml:id="_rolling__hash_8hpp_source_1l00034"/><link linkend="_struct_hash_1a2bb49844b818de3146548f868777e87b">00034</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash_1a2bb49844b818de3146548f868777e87b">Hash</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00035"/><link linkend="_struct_hash_1a0dabddca4882b6869a7cd3d130e9aad2">00035</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash_1a0dabddca4882b6869a7cd3d130e9aad2">Hash</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link>)&#32;<link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">init</link><link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">(</link><link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">)</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value=other.value;
<anchor xml:id="_rolling__hash_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00039"/><link linkend="_struct_hash_1aa2704fbc0e9be14105f061e71b8c144a">00039</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash_1aa2704fbc0e9be14105f061e71b8c144a">Hash</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link>)&#32;<link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">init</link><link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">(</link><link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">)</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.fill(0);
<anchor xml:id="_rolling__hash_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;value[i]=num[c][i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00044"/>00044 
<anchor xml:id="_rolling__hash_8hpp_source_1l00045"/><link linkend="_struct_hash_1ad788fc103417e8d81d2c140bb05c1447">00045</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;<link linkend="_struct_hash_1ad788fc103417e8d81d2c140bb05c1447">operator</link>+=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;value[i]=(value[i]+other.value[i])%mod[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00049"/><link linkend="_struct_hash_1ae8b7b557d9b0fdbd7709be1bfc4ca9f5">00049</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;<link linkend="_struct_hash_1ae8b7b557d9b0fdbd7709be1bfc4ca9f5">operator</link>-=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;value[i]=(value[i]-other.value[i]+mod[i])%mod[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00053"/><link linkend="_struct_hash_1a37354fe2736bdaca531b94e17c44b784">00053</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;<link linkend="_struct_hash_1a37354fe2736bdaca531b94e17c44b784">operator</link>+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;ret=*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret<link linkend="_struct_hash_1ad788fc103417e8d81d2c140bb05c1447">+=</link>other;
<anchor xml:id="_rolling__hash_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_rolling__hash_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00058"/><link linkend="_struct_hash_1a6c2d1e0f276c921cfc4e46b001100c06">00058</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;<link linkend="_struct_hash_1a6c2d1e0f276c921cfc4e46b001100c06">operator</link>-(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;ret=*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret<link linkend="_struct_hash_1ae8b7b557d9b0fdbd7709be1bfc4ca9f5">-=</link>other;
<anchor xml:id="_rolling__hash_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_rolling__hash_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00063"/><link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">00063</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;<link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">shift</link>(<emphasis role="keywordtype">int</emphasis>&#32;x)&#32;<emphasis role="keyword">const</emphasis>&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;ret=*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(x&lt;0)&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;(ret.value[i]*=inv[i][-x])%=mod[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;(ret.value[i]*=pow[i][x])%=mod[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_rolling__hash_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00069"/><link linkend="_struct_hash_1a06b1d032944f2169544b27ddedfe9abc">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_hash_1a06b1d032944f2169544b27ddedfe9abc">operator</link>==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;<emphasis role="keywordflow">if</emphasis>(value[i]!=other.value[i])&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00073"/><link linkend="_struct_hash_1af4e61589fbc15d41e10e54abecb77d9c">00073</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;<link linkend="_struct_hash_1af4e61589fbc15d41e10e54abecb77d9c">operator</link>=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash">Hash</link>&amp;&#32;other)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,5)&#32;value[i]=other.value[i];
<anchor xml:id="_rolling__hash_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00077"/>00077 };
<anchor xml:id="_rolling__hash_8hpp_source_1l00078"/>00078 
<anchor xml:id="_rolling__hash_8hpp_source_1l00079"/>00079 <link linkend="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49">VL</link>&#32;<link linkend="_struct_hash">Hash</link>::<link linkend="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49">base</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00080"/>00080 <link linkend="_struct_hash_1a65e9a611ad519be5e54523e2845422dc">VVL</link>&#32;<link linkend="_struct_hash">Hash</link>::<link linkend="_struct_hash_1a65e9a611ad519be5e54523e2845422dc">inv</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00081"/>00081 <link linkend="_struct_hash_1a40b806f7e170c9454766807a0340696b">VVL</link>&#32;<link linkend="_struct_hash">Hash</link>::<link linkend="_struct_hash_1a40b806f7e170c9454766807a0340696b">pow</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00082"/><link linkend="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980">00082</link> <emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980">VL</link>&#32;<link linkend="_struct_hash">Hash</link>::<link linkend="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980">mod</link>={1000000007,1000000009,1000000021,1000000033,1000000087};
<anchor xml:id="_rolling__hash_8hpp_source_1l00083"/>00083 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_hash">Hash</link>::<link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link>=<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00084"/><link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">00084</link> <link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">array</link>&lt;<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">array</link>&lt;<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">ll</link>,5&gt;,<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">HASH_C</link>&gt;&#32;<link linkend="_struct_hash">Hash</link>::<link linkend="_struct_hash_1a0265ebdf193428764f0b21cc2a9d324a">num</link>={};
<anchor xml:id="_rolling__hash_8hpp_source_1l00085"/>00085 
<anchor xml:id="_rolling__hash_8hpp_source_1l00086"/>00086 
<anchor xml:id="_rolling__hash_8hpp_source_1l00087"/>00087 <emphasis role="comment">///@brief&#32;Rolling&#32;Hash</emphasis>
<anchor xml:id="_rolling__hash_8hpp_source_1l00088"/><link linkend="_struct_rolling_hash">00088</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_rolling_hash">RollingHash</link>{
<anchor xml:id="_rolling__hash_8hpp_source_1l00089"/><link linkend="_struct_rolling_hash_1a71020424af6022b96f96117961ac4bc2">00089</link> &#32;&#32;&#32;&#32;<link linkend="_struct_rolling_hash_1a71020424af6022b96f96117961ac4bc2">RollingHash</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00090"/><link linkend="_struct_rolling_hash_1af6385ca8122334ec22fb8eb5819e320d">00090</link> &#32;&#32;&#32;&#32;<link linkend="_struct_rolling_hash_1af6385ca8122334ec22fb8eb5819e320d">vector</link>&lt;<link linkend="_struct_rolling_hash_1af6385ca8122334ec22fb8eb5819e320d">Hash</link>&gt;&#32;<link linkend="_struct_rolling_hash_1af6385ca8122334ec22fb8eb5819e320d">hash</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00091"/>00091 
<anchor xml:id="_rolling__hash_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;文字列&#32;s&#32;の&#32;Rolling&#32;Hash&#32;を構築する</emphasis>
<anchor xml:id="_rolling__hash_8hpp_source_1l00093"/><link linkend="_struct_rolling_hash_1aee33123a728c1df6d8c0b3550baa0c43">00093</link> &#32;&#32;&#32;&#32;<link linkend="_struct_rolling_hash_1aee33123a728c1df6d8c0b3550baa0c43">RollingHash</link>(<emphasis role="keyword">const</emphasis>&#32;string&amp;&#32;s)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=s.size();
<anchor xml:id="_rolling__hash_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash=vector&lt;Hash&gt;(n+1);
<anchor xml:id="_rolling__hash_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;hash[i+1]=hash[i]+Hash(s[i]).shift(i);
<anchor xml:id="_rolling__hash_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00098"/>00098 
<anchor xml:id="_rolling__hash_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[l,&#32;r)&#32;のハッシュ値を取得する</emphasis>
<anchor xml:id="_rolling__hash_8hpp_source_1l00100"/><link linkend="_struct_rolling_hash_1a86240a7668f2836709c800ae2ba5e206">00100</link> &#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;<link linkend="_struct_rolling_hash_1a86240a7668f2836709c800ae2ba5e206">get</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r)&#32;{
<anchor xml:id="_rolling__hash_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_hash">Hash</link>&#32;ret;
<anchor xml:id="_rolling__hash_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=hash[r]-hash[l];
<anchor xml:id="_rolling__hash_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret<link linkend="_struct_hash_1af4e61589fbc15d41e10e54abecb77d9c">=</link>ret<link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">.</link><link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">shift</link><link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">(</link>-l<link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">)</link>;
<anchor xml:id="_rolling__hash_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_rolling__hash_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;}
<anchor xml:id="_rolling__hash_8hpp_source_1l00106"/>00106 };
</programlisting></section>
