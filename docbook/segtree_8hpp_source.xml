<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_segtree_8hpp_source" xml:lang="ja">
<title>segtree.hpp</title>
<indexterm><primary>data_structure/segtree.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_segtree_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">pragma</emphasis>&#32;<emphasis role="preprocessor">once</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00003"/>00003 
<anchor xml:id="_segtree_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;セグメント木</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00005"/>00005 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid&gt;
<anchor xml:id="_segtree_8hpp_source_1l00006"/><link linkend="_struct_seg_tree">00006</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree">SegTree</link>&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00007"/><link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">typename</emphasis>&#32;Monoid::Type;
<anchor xml:id="_segtree_8hpp_source_1l00008"/><link linkend="_struct_seg_tree_1a791e801ba68339909a0be6b1b21af32a">00008</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_1a791e801ba68339909a0be6b1b21af32a">SegTree</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_segtree_8hpp_source_1l00009"/>00009 
<anchor xml:id="_segtree_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;要素数&#32;n&#32;のセグ木を構築する</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00011"/><link linkend="_struct_seg_tree_1acf1bec279e7ef62b88a4b734cd34051d">00011</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_1acf1bec279e7ef62b88a4b734cd34051d">SegTree</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;n=n;
<anchor xml:id="_segtree_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat.assign(n&lt;&lt;1,Monoid::id());
<anchor xml:id="_segtree_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand.reserve(100),cand_l.reserve(100),cand_r.reserve(100);
<anchor xml:id="_segtree_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00016"/>00016 
<anchor xml:id="_segtree_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;配列&#32;v&#32;からセグ木を構築する</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N)</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00019"/><link linkend="_struct_seg_tree_1a4b1322c2c40ed18503529433425955fe">00019</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_1a4b1322c2c40ed18503529433425955fe">SegTree</link>(<emphasis role="keyword">const</emphasis>&#32;vector&lt;Type&gt;&amp;&#32;v)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;n=v.size();
<anchor xml:id="_segtree_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat.assign(n&lt;&lt;1,Monoid::id());
<anchor xml:id="_segtree_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;n;&#32;i++)&#32;dat[i+n]=v[i];
<anchor xml:id="_segtree_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=n-1;&#32;i&gt;0;&#32;i--)&#32;dat[i]=Monoid::op(dat[i&lt;&lt;1],dat[i&lt;&lt;1|1]);
<anchor xml:id="_segtree_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand.reserve(100),cand_l.reserve(100),cand_r.reserve(100);
<anchor xml:id="_segtree_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00026"/>00026 
<anchor xml:id="_segtree_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目の要素を&#32;x&#32;に変更する</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(log(N))</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00029"/><link linkend="_struct_seg_tree_1abffaeb2310c009d4c80189a710a0254d">00029</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_seg_tree_1abffaeb2310c009d4c80189a710a0254d">set</link>(<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;Type&#32;x)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i+=n;
<anchor xml:id="_segtree_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[i]=x;
<anchor xml:id="_segtree_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i&gt;&gt;=1)&#32;dat[i]=Monoid::op(dat[i&lt;&lt;1],dat[i&lt;&lt;1|1]);
<anchor xml:id="_segtree_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00034"/>00034 
<anchor xml:id="_segtree_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[l,&#32;r)&#32;のモノイド積を返す</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(log(N))</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00037"/><link linkend="_struct_seg_tree_1ab9725a4dc2152446887d87195cc88c4d">00037</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_1ab9725a4dc2152446887d87195cc88c4d">fold</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;retl=Monoid::id(),retr=Monoid::id();
<anchor xml:id="_segtree_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l+=n,r+=n;
<anchor xml:id="_segtree_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(l&lt;r)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l&amp;1)&#32;retl=Monoid::op(retl,dat[l++]);
<anchor xml:id="_segtree_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r&amp;1)&#32;retr=Monoid::op(dat[--r],retr);
<anchor xml:id="_segtree_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l&gt;&gt;=1,r&gt;&gt;=1;
<anchor xml:id="_segtree_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Monoid::op(retl,retr);
<anchor xml:id="_segtree_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00047"/>00047 
<anchor xml:id="_segtree_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[l,&#32;x)&#32;のモノイド積が&#32;f&#32;を満たすような最大の&#32;x&#32;&gt;=&#32;l&#32;を返す</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@attention&#32;`f(Monoid::id())=true`&#32;が成り立つ必要がある</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(log(N))</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;F&gt;
<anchor xml:id="_segtree_8hpp_source_1l00052"/><link linkend="_struct_seg_tree_1ad2d7958e9a4bf972af9a17c75797f05b">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_seg_tree_1ad2d7958e9a4bf972af9a17c75797f05b">find_right</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;F&#32;f)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(f(Monoid::id()));
<anchor xml:id="_segtree_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l==n)&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
<anchor xml:id="_segtree_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l+=n;
<anchor xml:id="_segtree_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r=n+n;
<anchor xml:id="_segtree_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand_l.clear(),cand_r.clear();
<anchor xml:id="_segtree_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(l&lt;r)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l&amp;1)&#32;cand_l.push_back(l++);
<anchor xml:id="_segtree_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r&amp;1)&#32;cand_r.push_back(--r);
<anchor xml:id="_segtree_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l&gt;&gt;=1,r&gt;&gt;=1;
<anchor xml:id="_segtree_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand=cand_l;
<anchor xml:id="_segtree_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse(cand_r.begin(),cand_r.end());
<anchor xml:id="_segtree_8hpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand.insert(cand.end(),cand_r.begin(),cand_r.end());
<anchor xml:id="_segtree_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;val=Monoid::id();
<anchor xml:id="_segtree_8hpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i:cand)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(f(Monoid::op(val,dat[i])))&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val=Monoid::op(val,dat[i]);
<anchor xml:id="_segtree_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i&lt;n)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&lt;&lt;=1;
<anchor xml:id="_segtree_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(f(Monoid::op(val,dat[i])))&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val=Monoid::op(val,dat[i]);
<anchor xml:id="_segtree_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i|=1;
<anchor xml:id="_segtree_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i-n;
<anchor xml:id="_segtree_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
<anchor xml:id="_segtree_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00083"/>00083 
<anchor xml:id="_segtree_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[x,&#32;r)&#32;のモノイド積が&#32;f&#32;を満たすような最小の&#32;x&#32;&lt;=&#32;r&#32;を返す</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@attention&#32;`f(Monoid::id())=true`&#32;が成り立つ必要がある</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(log(N))</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;F&gt;
<anchor xml:id="_segtree_8hpp_source_1l00088"/><link linkend="_struct_seg_tree_1a42e25bc5f3c27da146721b6bc9099893">00088</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_seg_tree_1a42e25bc5f3c27da146721b6bc9099893">find_left</link>(<emphasis role="keywordtype">int</emphasis>&#32;r,F&#32;f)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(f(Monoid::id()));
<anchor xml:id="_segtree_8hpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r==0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_segtree_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r+=n;
<anchor xml:id="_segtree_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;l=n;
<anchor xml:id="_segtree_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand_l.clear(),cand_r.clear();
<anchor xml:id="_segtree_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(l&lt;r)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l&amp;1)&#32;cand_l.push_back(l++);
<anchor xml:id="_segtree_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r&amp;1)&#32;cand_r.push_back(--r);
<anchor xml:id="_segtree_8hpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l&gt;&gt;=1,r&gt;&gt;=1;
<anchor xml:id="_segtree_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand=cand_r;
<anchor xml:id="_segtree_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse(cand_l.begin(),cand_l.end());
<anchor xml:id="_segtree_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cand.insert(cand.end(),cand_l.begin(),cand_l.end());
<anchor xml:id="_segtree_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;val=Monoid::id();
<anchor xml:id="_segtree_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i:cand)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(f(Monoid::op(dat[i],val)))&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val=Monoid::op(dat[i],val);
<anchor xml:id="_segtree_8hpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i&lt;n)&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i=(i&lt;&lt;1)|1;
<anchor xml:id="_segtree_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(f(Monoid::op(dat[i],val)))&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;val=Monoid::op(dat[i],val);
<anchor xml:id="_segtree_8hpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i^=1;
<anchor xml:id="_segtree_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;i-n+1;
<anchor xml:id="_segtree_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_segtree_8hpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00119"/>00119 
<anchor xml:id="_segtree_8hpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目の要素を返す</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(1)</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00122"/><link linkend="_struct_seg_tree_1abaaec86084bfc4f3ea884347097d2277">00122</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_1abaaec86084bfc4f3ea884347097d2277">operator</link>[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;dat[i+n];&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00123"/>00123 
<anchor xml:id="_segtree_8hpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;配列のサイズを返す</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00125"/><link linkend="_struct_seg_tree_1a5df8a514cb63bc8845fa4077e183317f">00125</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_seg_tree_1a5df8a514cb63bc8845fa4077e183317f">size</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;&#32;}
<anchor xml:id="_segtree_8hpp_source_1l00126"/>00126 
<anchor xml:id="_segtree_8hpp_source_1l00127"/>00127 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_segtree_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;
<anchor xml:id="_segtree_8hpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;vector&lt;Type&gt;&#32;dat;
<anchor xml:id="_segtree_8hpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;vector&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;cand,cand_l,cand_r;
<anchor xml:id="_segtree_8hpp_source_1l00131"/>00131 };
<anchor xml:id="_segtree_8hpp_source_1l00132"/>00132 
<anchor xml:id="_segtree_8hpp_source_1l00133"/>00133 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/monoid.hpp&quot;</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00134"/>00134 
<anchor xml:id="_segtree_8hpp_source_1l00135"/>00135 <emphasis role="comment">///&#32;@brief&#32;区間クエリ</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00136"/><link linkend="_namespace_range_query">00136</link> <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_range_query">RangeQuery</link>&#32;{
<anchor xml:id="_segtree_8hpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1点変更&#32;/&#32;区間&#32;min</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T&#32;max_value=<link linkend="_template_8hpp_1a14c9dbab105f1b8b8182a022d73e610c">INF</link>&gt;
<anchor xml:id="_segtree_8hpp_source_1l00139"/><link linkend="_struct_range_query_1_1_min_1a9793be26578865309e936bc0da46dfc4">00139</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_min">Min</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_range_query_1_1_min">Type</link>=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_min">SegTree</link>&lt;<link linkend="_struct_range_query_1_1_min">Monoid</link>::<link linkend="_struct_range_query_1_1_min">Min</link>&lt;<link linkend="_struct_range_query_1_1_min">T</link>,<link linkend="_struct_range_query_1_1_min">max_value</link>&gt;&gt;;&#32;};
<anchor xml:id="_segtree_8hpp_source_1l00140"/>00140 
<anchor xml:id="_segtree_8hpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1点変更&#32;/&#32;区間&#32;max</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T&#32;min_value=-<link linkend="_template_8hpp_1a14c9dbab105f1b8b8182a022d73e610c">INF</link>&gt;
<anchor xml:id="_segtree_8hpp_source_1l00143"/><link linkend="_struct_range_query_1_1_max_1a4bf723142edc7447e6f0053f6683130e">00143</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_max">Max</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_range_query_1_1_max">Type</link>=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_max">SegTree</link>&lt;<link linkend="_struct_range_query_1_1_max">Monoid</link>::<link linkend="_struct_range_query_1_1_max">Max</link>&lt;<link linkend="_struct_range_query_1_1_max">T</link>,<link linkend="_struct_range_query_1_1_max">min_value</link>&gt;&gt;;&#32;};
<anchor xml:id="_segtree_8hpp_source_1l00144"/>00144 
<anchor xml:id="_segtree_8hpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1点変更&#32;/&#32;区間和</emphasis>
<anchor xml:id="_segtree_8hpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_segtree_8hpp_source_1l00147"/><link linkend="_struct_range_query_1_1_sum_1a0a173a347359d87514e8a186fb4db0c5">00147</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_sum">Sum</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree">SegTree</link>&lt;<link linkend="_namespace_monoid">Monoid</link>::<link linkend="_struct_monoid_1_1_sum">Sum</link>&lt;T&gt;&gt;;&#32;};
<anchor xml:id="_segtree_8hpp_source_1l00148"/>00148 }
</programlisting></section>
