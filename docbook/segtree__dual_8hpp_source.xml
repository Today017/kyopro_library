<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_segtree__dual_8hpp_source" xml:lang="ja">
<title>segtree_dual.hpp</title>
<indexterm><primary>data_structure/segtree_dual.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_segtree__dual_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">pragma</emphasis>&#32;<emphasis role="preprocessor">once</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00003"/>00003 
<anchor xml:id="_segtree__dual_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;双対セグメント木</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00005"/>00005 <emphasis role="comment">///&#32;@tparam&#32;CommutativeOperator&#32;作用素</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00006"/>00006 <emphasis role="comment">///&#32;@attention&#32;作用素は果敢である必要がある</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00007"/>00007 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;CommutativeOperator&gt;
<anchor xml:id="_segtree__dual_8hpp_source_1l00008"/><link linkend="_struct_seg_tree_dual">00008</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree_dual">SegTreeDual</link>&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00009"/><link linkend="_struct_seg_tree_dual_1a00bd09b2b812bf51b0bc2e724fbfd5a7">00009</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">typename</emphasis>&#32;CommutativeOperator::Type;
<anchor xml:id="_segtree__dual_8hpp_source_1l00010"/><link linkend="_struct_seg_tree_dual_1ac48a638afbe35ca9251883c2673498a0">00010</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dual_1ac48a638afbe35ca9251883c2673498a0">SegTreeDual</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_segtree__dual_8hpp_source_1l00011"/>00011 
<anchor xml:id="_segtree__dual_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;要素数&#32;n&#32;の双対セグ木を構築する</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00013"/><link linkend="_struct_seg_tree_dual_1a18acc9ec63cfe99180c12419e9308975">00013</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dual_1a18acc9ec63cfe99180c12419e9308975">SegTreeDual</link>(<emphasis role="keywordtype">int</emphasis>&#32;n)&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;n=n;
<anchor xml:id="_segtree__dual_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat.assign(n&lt;&lt;1,CommutativeOperator::id());
<anchor xml:id="_segtree__dual_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00017"/>00017 
<anchor xml:id="_segtree__dual_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;配列&#32;v&#32;から双対セグ木を構築する</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00019"/><link linkend="_struct_seg_tree_dual_1a4b660b709846d909a0c7918f5187fe3f">00019</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dual_1a4b660b709846d909a0c7918f5187fe3f">SegTreeDual</link>(<emphasis role="keyword">const</emphasis>&#32;vector&lt;Type&gt;&amp;&#32;v)&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;n=v.size();
<anchor xml:id="_segtree__dual_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat.assign(n&lt;&lt;1,CommutativeOperator::id());
<anchor xml:id="_segtree__dual_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;n;&#32;i++)&#32;dat[i+n]=v[i];
<anchor xml:id="_segtree__dual_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=n-1;&#32;i&gt;0;&#32;i--)&#32;dat[i]=CommutativeOperator::op(dat[i&lt;&lt;1],dat[i&lt;&lt;1|1]);
<anchor xml:id="_segtree__dual_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00025"/>00025 
<anchor xml:id="_segtree__dual_8hpp_source_1l00026"/><link linkend="_struct_seg_tree_dual_1a1a1257683cef6cd97451518b480c2a9a">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_seg_tree_dual_1a1a1257683cef6cd97451518b480c2a9a">apply</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r,&#32;Type&#32;x)&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l+=n,r+=n;
<anchor xml:id="_segtree__dual_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(l&lt;r)&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l&amp;1)&#32;dat[l]=CommutativeOperator::op(dat[l],x),l++;
<anchor xml:id="_segtree__dual_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(r&amp;1)&#32;r--,dat[r]=CommutativeOperator::op(dat[r],x);
<anchor xml:id="_segtree__dual_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l&gt;&gt;=1,r&gt;&gt;=1;
<anchor xml:id="_segtree__dual_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00034"/><link linkend="_struct_seg_tree_dual_1a61bfbf2af340c5dc6e3b9785df156031">00034</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_dual_1a61bfbf2af340c5dc6e3b9785df156031">get</link>(<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i+=n;
<anchor xml:id="_segtree__dual_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;ret=CommutativeOperator::id();
<anchor xml:id="_segtree__dual_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i)&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=CommutativeOperator::op(ret,dat[i]);
<anchor xml:id="_segtree__dual_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&gt;&gt;=1;
<anchor xml:id="_segtree__dual_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_segtree__dual_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00043"/>00043 
<anchor xml:id="_segtree__dual_8hpp_source_1l00044"/><link linkend="_struct_seg_tree_dual_1a127fdf2679469328fd1a4c451e88412e">00044</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_seg_tree_dual_1a127fdf2679469328fd1a4c451e88412e">size</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00045"/><link linkend="_struct_seg_tree_dual_1a9196f5976be9aa2cd4f25e1e38177646">00045</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_dual_1a9196f5976be9aa2cd4f25e1e38177646">operator</link>[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_seg_tree_dual_1a61bfbf2af340c5dc6e3b9785df156031">get</link><link linkend="_struct_seg_tree_dual_1a61bfbf2af340c5dc6e3b9785df156031">(</link>i<link linkend="_struct_seg_tree_dual_1a61bfbf2af340c5dc6e3b9785df156031">)</link>;&#32;}
<anchor xml:id="_segtree__dual_8hpp_source_1l00046"/>00046 
<anchor xml:id="_segtree__dual_8hpp_source_1l00047"/>00047 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_segtree__dual_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;
<anchor xml:id="_segtree__dual_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;vector&lt;Type&gt;&#32;dat;
<anchor xml:id="_segtree__dual_8hpp_source_1l00050"/>00050 };
<anchor xml:id="_segtree__dual_8hpp_source_1l00051"/>00051 
<anchor xml:id="_segtree__dual_8hpp_source_1l00052"/>00052 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/operator.hpp&quot;</emphasis>
<anchor xml:id="_segtree__dual_8hpp_source_1l00053"/>00053 
<anchor xml:id="_segtree__dual_8hpp_source_1l00054"/>00054 <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_range_query">RangeQuery</link>&#32;{
<anchor xml:id="_segtree__dual_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_segtree__dual_8hpp_source_1l00056"/><link linkend="_struct_range_query_1_1_apply_add_1acb6a4132536b43d23cddf16a81956290">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_apply_add">ApplyAdd</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree_dual">SegTreeDual</link>&lt;<link linkend="_namespace_operator">Operator</link>::<link linkend="_struct_operator_1_1_add">Add</link>&lt;T&gt;&gt;;&#32;};
<anchor xml:id="_segtree__dual_8hpp_source_1l00057"/>00057 
<anchor xml:id="_segtree__dual_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_segtree__dual_8hpp_source_1l00059"/><link linkend="_struct_range_query_1_1_apply_update_1a9c5b3aee9b4881cd927cec0e19e69b9b">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_apply_update">ApplyUpdate</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree_dual">SegTreeDual</link>&lt;<link linkend="_namespace_operator">Operator</link>::<link linkend="_struct_operator_1_1_update_time_stamp">UpdateTimeStamp</link>&lt;T&gt;&gt;;&#32;};
<anchor xml:id="_segtree__dual_8hpp_source_1l00060"/>00060 }
</programlisting></section>
