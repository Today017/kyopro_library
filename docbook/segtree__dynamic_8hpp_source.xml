<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_segtree__dynamic_8hpp_source" xml:lang="ja">
<title>segtree_dynamic.hpp</title>
<indexterm><primary>data_structure/segtree_dynamic.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_segtree__dynamic_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00002"/>00002 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;動的セグ木</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00004"/>00004 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid&gt;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00005"/><link linkend="_struct_seg_tree_dynamic">00005</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree_dynamic">SegTreeDynamic</link>&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00006"/><link linkend="_struct_seg_tree_dynamic_1a227357d02ccd09e86117b2bdae1b70e3">00006</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">typename</emphasis>&#32;Monoid::Type;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00007"/><link linkend="_struct_seg_tree_dynamic_1_1_node">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node">Node</link>&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00008"/><link linkend="_struct_seg_tree_dynamic_1_1_node_1ac7d6cfcac693ae3e2b7b5b9b715d9f6d">00008</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1ac7d6cfcac693ae3e2b7b5b9b715d9f6d">value</link>;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00009"/><link linkend="_struct_seg_tree_dynamic_1_1_node_1aa0985c92d95f9616e6f6ed8eb0b139ee">00009</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1aa0985c92d95f9616e6f6ed8eb0b139ee">array</link>&lt;<emphasis role="keywordtype">int</emphasis>,2&gt;&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1aa0985c92d95f9616e6f6ed8eb0b139ee">to</link>;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00010"/><link linkend="_struct_seg_tree_dynamic_1_1_node_1a21084953c5c967a88f3850702a81d9c1">00010</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1a21084953c5c967a88f3850702a81d9c1">left</link>,<link linkend="_struct_seg_tree_dynamic_1_1_node_1a58f60b6c23afbe3578321b809a045602">right</link>;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00011"/><link linkend="_struct_seg_tree_dynamic_1_1_node_1a748b85797d95f6df43c8e5b6acd46900">00011</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1a748b85797d95f6df43c8e5b6acd46900">Node</link>(ll&#32;l,&#32;ll&#32;r)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to.fill(-1);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1a21084953c5c967a88f3850702a81d9c1">left</link>=l;&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1a58f60b6c23afbe3578321b809a045602">right</link>=r;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1_1_node_1ac7d6cfcac693ae3e2b7b5b9b715d9f6d">value</link>=Monoid::id();
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;};
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00017"/><link linkend="_struct_seg_tree_dynamic_1ac3c641dd98da348fee0d3bea19ccb708">00017</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1ac3c641dd98da348fee0d3bea19ccb708">vector</link>&lt;<link linkend="_struct_seg_tree_dynamic_1ac3c641dd98da348fee0d3bea19ccb708">Node</link>&gt;&#32;<link linkend="_struct_seg_tree_dynamic_1ac3c641dd98da348fee0d3bea19ccb708">node</link>;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00018"/>00018 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00019"/><link linkend="_struct_seg_tree_dynamic_1a4b665cea167c726d364e045eb2943f00">00019</link> &#32;&#32;&#32;&#32;ll&#32;<link linkend="_struct_seg_tree_dynamic_1a4b665cea167c726d364e045eb2943f00">mx</link>=1e9;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00020"/><link linkend="_struct_seg_tree_dynamic_1a64fcf4dcb58a2d8b17592d72110e8e91">00020</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1a64fcf4dcb58a2d8b17592d72110e8e91">vector</link>&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<link linkend="_struct_seg_tree_dynamic_1a64fcf4dcb58a2d8b17592d72110e8e91">route</link>;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00021"/>00021 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;サイズ&#32;mx&#32;の動的セグ木を宣言する</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00023"/><link linkend="_struct_seg_tree_dynamic_1a59a06ec2a8d6964629a6a789a6d50c6e">00023</link> &#32;&#32;&#32;&#32;<link linkend="_struct_seg_tree_dynamic_1a59a06ec2a8d6964629a6a789a6d50c6e">SegTreeDynamic</link>(ll&#32;mx=1e9,&#32;<emphasis role="keywordtype">int</emphasis>&#32;q=5e5)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis><link linkend="_struct_seg_tree_dynamic_1a4b665cea167c726d364e045eb2943f00">-&gt;</link><link linkend="_struct_seg_tree_dynamic_1a4b665cea167c726d364e045eb2943f00">mx</link>=mx;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node.reserve(q);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node.push_back(Node(0,mx));
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;route.reserve(100);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00029"/>00029 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目の要素を&#32;v&#32;に変える</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00031"/><link linkend="_struct_seg_tree_dynamic_1aabe5d1774f4bd10f1d1d23de51c14969">00031</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_seg_tree_dynamic_1aabe5d1774f4bd10f1d1d23de51c14969">set</link>(ll&#32;i,&#32;Type&#32;v)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;left=0,right=<link linkend="_struct_seg_tree_dynamic_1a4b665cea167c726d364e045eb2943f00">mx</link>,cur=0;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;route.clear();
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(left&lt;right-1)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;mid=(left+right)/2;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00036"/>00036 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nxt,toi;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&lt;mid)&#32;nxt=node[cur].to[0],toi=0;&#32;<emphasis role="comment">//左</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;nxt=node[cur].to[1],toi=1;&#32;<emphasis role="comment">//右</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00040"/>00040 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==-1)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nxt=node.size();
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node[cur].to[toi]=nxt;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00044"/>00044 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(toi==0)&#32;node.push_back(Node(left,mid));
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;node.push_back(Node(mid,right));
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00048"/>00048 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&lt;mid)&#32;right=mid;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;left=mid;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00051"/>00051 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;route.push_back(cur);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur=nxt;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse(<link linkend="_template_8hpp_1a7ab29d3bd6e8d66e320f4224e75f6cea">ALL</link>(route));
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node[cur].value=v;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00057"/>00057 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;r:route)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;leftc=node[r].to[0],rightc=node[r].to[1];
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;leftv=&#32;leftc==-1&#32;?&#32;Monoid::id()&#32;:&#32;node[leftc].value;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;rightv=&#32;rightc==-1&#32;?&#32;Monoid::id()&#32;:&#32;node[rightc].value;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node[r].value=Monoid::op(leftv,rightv);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00065"/>00065 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[l,&#32;r)&#32;のモノイド積を返す</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00067"/><link linkend="_struct_seg_tree_dynamic_1a94bcb75b9656636184cf16e39aad8a51">00067</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_dynamic_1a94bcb75b9656636184cf16e39aad8a51">fold</link>(ll&#32;l,&#32;ll&#32;r,&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx,&#32;ll&#32;left,&#32;ll&#32;right)&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(right&lt;l||left&gt;r)&#32;<emphasis role="keywordflow">return</emphasis>&#32;Monoid::id();
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l&lt;=left&amp;&amp;right&lt;=r)&#32;<emphasis role="keywordflow">return</emphasis>&#32;node[idx].value;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00070"/>00070 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ll&#32;mid=(left+right)/2;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;leftc=node[idx].to[0],rightc=node[idx].to[1];
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00073"/>00073 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Type&#32;leftv,rightv;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(leftc==-1)&#32;leftv=Monoid::id();
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;leftv=fold(l,r,leftc,left,mid);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rightc==-1)&#32;rightv=Monoid::id();
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;rightv=fold(l,r,rightc,mid,right);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00079"/>00079 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Monoid::op(leftv,rightv);
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00082"/><link linkend="_struct_seg_tree_dynamic_1aae80e1181ba66952873e2cfa9b0865f9">00082</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_dynamic_1aae80e1181ba66952873e2cfa9b0865f9">fold</link>(ll&#32;l,&#32;ll&#32;r)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fold(l,r,0,0,<link linkend="_struct_seg_tree_dynamic_1a4b665cea167c726d364e045eb2943f00">mx</link>);&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00083"/>00083 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00084"/><link linkend="_struct_seg_tree_dynamic_1aa257624ddaf92d127067a1d950c2c65c">00084</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_seg_tree_dynamic_1aa257624ddaf92d127067a1d950c2c65c">operator</link>[](ll&#32;i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fold(i,i+1);&#32;}
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00085"/>00085 };
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00086"/>00086 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00087"/>00087 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/others/monoid.hpp&quot;</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00088"/>00088 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00089"/>00089 <emphasis role="comment">///&#32;@brief&#32;区間クエリ</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00090"/>00090 <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_range_query">RangeQuery</link>&#32;{
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1点変更&#32;/&#32;区間&#32;min</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T&#32;max_value=<link linkend="_template_8hpp_1a14c9dbab105f1b8b8182a022d73e610c">INF</link>&gt;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00093"/><link linkend="_struct_range_query_1_1_min_dynamic_1a33a90e5acb47e9f3ff9a86d3a0c0089f">00093</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_min_dynamic">MinDynamic</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_range_query_1_1_min_dynamic">Type</link>=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_min_dynamic">SegTreeDynamic</link>&lt;<link linkend="_struct_range_query_1_1_min_dynamic">Monoid</link>::<link linkend="_struct_range_query_1_1_min_dynamic">Min</link>&lt;<link linkend="_struct_range_query_1_1_min_dynamic">T</link>,<link linkend="_struct_range_query_1_1_min_dynamic">max_value</link>&gt;&gt;;&#32;};
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00094"/>00094 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1点変更&#32;/&#32;区間&#32;max</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;T&#32;min_value=-<link linkend="_template_8hpp_1a14c9dbab105f1b8b8182a022d73e610c">INF</link>&gt;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00097"/><link linkend="_struct_range_query_1_1_max_dynamic_1a3e636d48607365b24b60234a1fb32a34">00097</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_max_dynamic">MaxDynamic</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_range_query_1_1_max_dynamic">Type</link>=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_max_dynamic">SegTreeDynamic</link>&lt;<link linkend="_struct_range_query_1_1_max_dynamic">Monoid</link>::<link linkend="_struct_range_query_1_1_max_dynamic">Max</link>&lt;<link linkend="_struct_range_query_1_1_max_dynamic">T</link>,<link linkend="_struct_range_query_1_1_max_dynamic">min_value</link>&gt;&gt;;&#32;};
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00098"/>00098 
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;1点変更&#32;/&#32;区間和</emphasis>
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00101"/><link linkend="_struct_range_query_1_1_sum_dynamic_1af67269cbfabefd01a04c8322da8aac8c">00101</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_range_query_1_1_sum_dynamic">SumDynamic</link>&#32;{&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_seg_tree_dynamic">SegTreeDynamic</link>&lt;<link linkend="_namespace_monoid">Monoid</link>::<link linkend="_struct_monoid_1_1_sum">Sum</link>&lt;T&gt;&gt;;&#32;};
<anchor xml:id="_segtree__dynamic_8hpp_source_1l00102"/>00102 }
</programlisting></section>
