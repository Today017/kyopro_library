<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sorted__multitree_8hpp_source" xml:lang="ja">
<title>sorted_multitree.hpp</title>
<indexterm><primary>data_structure/sorted_multitree.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_sorted__multitree_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00002"/>00002 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00003"/>00003 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&lt;</emphasis><emphasis role="preprocessor">ext</emphasis><emphasis role="preprocessor">/</emphasis><emphasis role="preprocessor">pb_ds</emphasis><emphasis role="preprocessor">/</emphasis><emphasis role="preprocessor">assoc_container</emphasis><emphasis role="preprocessor">.</emphasis><emphasis role="preprocessor">hpp</emphasis><emphasis role="preprocessor">&gt;</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00004"/>00004 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&lt;</emphasis><emphasis role="preprocessor">ext</emphasis><emphasis role="preprocessor">/</emphasis><emphasis role="preprocessor">pb_ds</emphasis><emphasis role="preprocessor">/</emphasis><emphasis role="preprocessor">tree_policy</emphasis><emphasis role="preprocessor">.</emphasis><emphasis role="preprocessor">hpp</emphasis><emphasis role="preprocessor">&gt;</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00005"/>00005 <emphasis role="keyword">using</emphasis>&#32;<emphasis role="keyword">namespace</emphasis>&#32;__gnu_pbds;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00006"/>00006 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00007"/><link linkend="_struct_sorted_multi_tree">00007</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_sorted_multi_tree">SortedMultiTree</link>:<link linkend="_struct_sorted_multi_tree">tree</link>&lt;<link linkend="_struct_sorted_multi_tree">pair</link>&lt;<link linkend="_struct_sorted_multi_tree">T</link>,<emphasis role="keywordtype">int</emphasis>&gt;,<link linkend="_struct_sorted_multi_tree">null_type</link>,<link linkend="_struct_sorted_multi_tree">less</link>&lt;<link linkend="_struct_sorted_multi_tree">pair</link>&lt;<link linkend="_struct_sorted_multi_tree">T</link>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;,<link linkend="_struct_sorted_multi_tree">rb_tree_tag</link>,<link linkend="_struct_sorted_multi_tree">tree_order_statistics_node_update</link>&gt;&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_sorted_multi_tree">tree</link>&lt;<link linkend="_struct_sorted_multi_tree">pair</link>&lt;<link linkend="_struct_sorted_multi_tree">T</link>,<emphasis role="keywordtype">int</emphasis>&gt;,<link linkend="_struct_sorted_multi_tree">null_type</link>,<link linkend="_struct_sorted_multi_tree">less</link>&lt;<link linkend="_struct_sorted_multi_tree">pair</link>&lt;<link linkend="_struct_sorted_multi_tree">T</link>,<emphasis role="keywordtype">int</emphasis>&gt;&gt;,<link linkend="_struct_sorted_multi_tree">rb_tree_tag</link>,<link linkend="_struct_sorted_multi_tree">tree_order_statistics_node_update</link>&gt;::<link linkend="_struct_sorted_multi_tree">tree</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00009"/><link linkend="_struct_sorted_multi_tree_1a9add5e4ba3456a20a6e531f3b056b93f">00009</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_struct_sorted_multi_tree">P</link>=<link linkend="_struct_sorted_multi_tree">pair</link>&lt;<link linkend="_struct_sorted_multi_tree">T</link>,<emphasis role="keywordtype">int</emphasis>&gt;;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00010"/><link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">00010</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>=-1;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00011"/><link linkend="_struct_sorted_multi_tree_1a5c802af68f298ac3e73e0dba0ad75e79">00011</link> &#32;&#32;&#32;&#32;<link linkend="_struct_sorted_multi_tree_1a5c802af68f298ac3e73e0dba0ad75e79">SortedMultiTree</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00012"/>00012 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;コンストラクタ</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@param&#32;not_found&#32;指定の値が見つからなかったときに返す値</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00015"/><link linkend="_struct_sorted_multi_tree_1ab8c36e4170f299dbe68b00cd2c9d2305">00015</link> &#32;&#32;&#32;&#32;<link linkend="_struct_sorted_multi_tree_1ab8c36e4170f299dbe68b00cd2c9d2305">SortedMultiTree</link>(T&#32;not_found=-1)&#32;{&#32;<emphasis role="keyword">this</emphasis><link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">-&gt;</link><link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>=not_found;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00016"/>00016 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;を追加する</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00018"/><link linkend="_struct_sorted_multi_tree_1aeaeff7f2d03c7046a82a0971b1e52272">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1aeaeff7f2d03c7046a82a0971b1e52272">add</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>-&gt;size()==0)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;insert(P{x,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound(P{x+1,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;begin())&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;insert(P{x,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itr--;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr-&gt;first!=x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;insert(P{x,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;insert(P{x,itr-&gt;second+1});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00035"/>00035 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最小値を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00037"/><link linkend="_struct_sorted_multi_tree_1a002d58401bbd7c496de2a493225dc462">00037</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a002d58401bbd7c496de2a493225dc462">min</link>()&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>-&gt;empty())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>*<emphasis role="keyword">this</emphasis>-&gt;begin()-&gt;first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00041"/>00041 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最大値を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00043"/><link linkend="_struct_sorted_multi_tree_1a34080f5436802049e526dbcfcdb4657c">00043</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a34080f5436802049e526dbcfcdb4657c">max</link>()&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>-&gt;empty())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>*<emphasis role="keyword">this</emphasis>-&gt;rbegin()-&gt;first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00047"/>00047 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最小値を返し、削除する</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00049"/><link linkend="_struct_sorted_multi_tree_1a57e225a43a6ffe8a2c40f792375d04bc">00049</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a57e225a43a6ffe8a2c40f792375d04bc">pop_min</link>()&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>-&gt;empty())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mn=*<emphasis role="keyword">this</emphasis>-&gt;begin();
<anchor xml:id="_sorted__multitree_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;ret=mn.first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;erase(mn);
<anchor xml:id="_sorted__multitree_8hpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00056"/>00056 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;最大値を返し、削除する</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00058"/><link linkend="_struct_sorted_multi_tree_1a8c295dcfe5327e9219f013dc159ab1f0">00058</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a8c295dcfe5327e9219f013dc159ab1f0">pop_max</link>()&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>-&gt;empty())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;mx=*<emphasis role="keyword">this</emphasis>-&gt;rbegin();
<anchor xml:id="_sorted__multitree_8hpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;ret=mx.first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;erase(mx);
<anchor xml:id="_sorted__multitree_8hpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00065"/>00065 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;が含まれているか否かを返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00067"/><link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">00067</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">contains</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;end())<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;itr-&gt;first==x;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00072"/>00072 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00074"/><link linkend="_struct_sorted_multi_tree_1a4eebce5fa541af30d00aa76bfd6fce25">00074</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a4eebce5fa541af30d00aa76bfd6fce25">count</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">contains</link><link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">(</link>x<link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">)</link>)<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x+1,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itr--;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;itr-&gt;second+1;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00080"/>00080 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;を削除する</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;が含まれていたか否かを返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00083"/><link linkend="_struct_sorted_multi_tree_1af0e3cfa5d92c2eaf249cac5db2653119">00083</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1af0e3cfa5d92c2eaf249cac5db2653119">discard</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">contains</link><link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">(</link>x<link linkend="_struct_sorted_multi_tree_1a1ed109943dfb52d97cc4c88f917abef7">)</link>)<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=prev(<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x+1,0}));
<anchor xml:id="_sorted__multitree_8hpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;end())<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>-&gt;erase(itr);
<anchor xml:id="_sorted__multitree_8hpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00090"/>00090 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;より大きい最小の値を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00092"/><link linkend="_struct_sorted_multi_tree_1a20bc2b91712e2d3b78967ff278626c0f">00092</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a20bc2b91712e2d3b78967ff278626c0f">gt</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x+1,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;end())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;itr-&gt;first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00097"/>00097 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;以上最小の値を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00099"/><link linkend="_struct_sorted_multi_tree_1abe622762de7d4549d60bfb03013c6f26">00099</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1abe622762de7d4549d60bfb03013c6f26">ge</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;end())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;itr-&gt;first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00104"/>00104 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;未満最大の値を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00106"/><link linkend="_struct_sorted_multi_tree_1a563ca712d94965facf1e69b881440a32">00106</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a563ca712d94965facf1e69b881440a32">lt</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;begin())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(--itr)-&gt;first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00111"/>00111 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;以下最大の値を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00113"/><link linkend="_struct_sorted_multi_tree_1a62f7b68b894a4a44ae4a0ae0c09cbc19">00113</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a62f7b68b894a4a44ae4a0ae0c09cbc19">le</link>(T&#32;x)&#32;{
<anchor xml:id="_sorted__multitree_8hpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;itr=<emphasis role="keyword">this</emphasis>-&gt;lower_bound({x+1,0});
<anchor xml:id="_sorted__multitree_8hpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(itr==<emphasis role="keyword">this</emphasis>-&gt;begin())<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a744d411af0375f528be6ad7f1ec21c9c">not_found</link>;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>(--itr)-&gt;first;
<anchor xml:id="_sorted__multitree_8hpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00118"/>00118 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;未満の値の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00120"/><link linkend="_struct_sorted_multi_tree_1a8320fbeb312ae3cb068401e6fab4b303">00120</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a8320fbeb312ae3cb068401e6fab4b303">count_lt</link>(T&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>-&gt;order_of_key({x,0});&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00121"/>00121 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;以下の値の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00123"/><link linkend="_struct_sorted_multi_tree_1a43a38d17a649bfb671db1c1372f2fbec">00123</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1a43a38d17a649bfb671db1c1372f2fbec">count_le</link>(T&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>-&gt;order_of_key({x+1,0});&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00124"/>00124 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;より大きい値の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00126"/><link linkend="_struct_sorted_multi_tree_1aa74800e39c3a6d6e04b4a56a881de478">00126</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1aa74800e39c3a6d6e04b4a56a881de478">count_gt</link>(T&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>-&gt;size()-<emphasis role="keyword">this</emphasis>-&gt;order_of_key({x+1,0});&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00127"/>00127 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;x&#32;以上の値の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00129"/><link linkend="_struct_sorted_multi_tree_1afa4ee14f9f701a9e8bd5d8b4e3c2d945">00129</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_sorted_multi_tree_1afa4ee14f9f701a9e8bd5d8b4e3c2d945">count_ge</link>(T&#32;x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>-&gt;size()-<emphasis role="keyword">this</emphasis>-&gt;order_of_key({x,0});&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00130"/>00130 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;k(0-indexed)&#32;番目に小さい値の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00132"/><link linkend="_struct_sorted_multi_tree_1a2925d903b778ceea8042accb4b318f4a">00132</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a2925d903b778ceea8042accb4b318f4a">kth_min</link>(<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>-&gt;find_by_order(k)-&gt;first;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00133"/>00133 
<anchor xml:id="_sorted__multitree_8hpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;k(0-indexed)&#32;番目に大きい値の個数を返す</emphasis>
<anchor xml:id="_sorted__multitree_8hpp_source_1l00135"/><link linkend="_struct_sorted_multi_tree_1a73f728a83e21417917a9d35185322dcb">00135</link> &#32;&#32;&#32;&#32;T&#32;<link linkend="_struct_sorted_multi_tree_1a73f728a83e21417917a9d35185322dcb">kth_max</link>(<emphasis role="keywordtype">int</emphasis>&#32;k)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>-&gt;find_by_order(<emphasis role="keyword">this</emphasis>-&gt;size()-k-1)-&gt;first;&#32;}
<anchor xml:id="_sorted__multitree_8hpp_source_1l00136"/>00136 };
</programlisting></section>
