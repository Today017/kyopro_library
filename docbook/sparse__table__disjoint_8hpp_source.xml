<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_sparse__table__disjoint_8hpp_source" xml:lang="ja">
<title>sparse_table_disjoint.hpp</title>
<indexterm><primary>data_structure/sparse_table_disjoint.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis>&#32;<emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00002"/>00002 
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;スパーステーブル（Disjoint）</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@tparam&#32;Semigroup&#32;半群（結合則が成り立つこと）</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00005"/>00005 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Semigroup&gt;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00006"/><link linkend="_struct_sparse_table_disjoint">00006</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_sparse_table_disjoint">SparseTableDisjoint</link>&#32;{
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00007"/><link linkend="_struct_sparse_table_disjoint_1a57c52b4b8bdc6bc40f230c7313a7dc38">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;Type=<emphasis role="keyword">typename</emphasis>&#32;Semigroup::Type;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00008"/><link linkend="_struct_sparse_table_disjoint_1adc3bde9f28ff2430266ca1536c1afd25">00008</link> &#32;&#32;&#32;&#32;<link linkend="_struct_sparse_table_disjoint_1adc3bde9f28ff2430266ca1536c1afd25">SparseTableDisjoint</link>()=<emphasis role="keywordflow">default</emphasis>;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00009"/>00009 
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;配列&#32;v&#32;からDisjoint&#32;Sparse&#32;Tableを構築する</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N&#32;log(N))</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00012"/><link linkend="_struct_sparse_table_disjoint_1a48075adf65cef80776b5c5ad914240d5">00012</link> &#32;&#32;&#32;&#32;<link linkend="_struct_sparse_table_disjoint_1a48075adf65cef80776b5c5ad914240d5">SparseTableDisjoint</link>(<emphasis role="keyword">const</emphasis>&#32;vector&lt;Type&gt;&amp;&#32;v)&#32;{
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n=v.size();
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat.assign(__lg(n)+1,vector&lt;Type&gt;(n));
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[0]=v;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_template_8hpp_1a9af2de86c4be813e9c60ede438bb4cd7">FOR</link>(i,1,dat.size())&#32;{
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;w=1&lt;&lt;i;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;j=0;&#32;j&lt;n;&#32;j+=w&lt;&lt;1)&#32;{
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;t=min(j+w,n);
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[i][t-1]=v[t-1];
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=t-2;&#32;k&gt;=j;&#32;k--)&#32;dat[i][k]=Semigroup::op(v[k],dat[i][k+1]);
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(t&gt;=n)&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dat[i][t]=v[t];
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=t+1;&#32;k&lt;min(j+(w&lt;&lt;1),n);&#32;k++)&#32;dat[i][k]=Semigroup::op(dat[i][k-1],v[k]);
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00028"/>00028 
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;区間&#32;[l,&#32;r)&#32;の半群積を返す</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(1)</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00031"/><link linkend="_struct_sparse_table_disjoint_1aa984a0d78a9e15251a151cbb8953d10e">00031</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_sparse_table_disjoint_1aa984a0d78a9e15251a151cbb8953d10e">fold</link>(<emphasis role="keywordtype">int</emphasis>&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;r)&#32;{
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r--;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(l==r)&#32;<emphasis role="keywordflow">return</emphasis>&#32;dat[0][l];
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i=__lg(l^r);
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Semigroup::op(dat[i][l],dat[i][r]);
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00037"/>00037 
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;i&#32;番目の要素を返す</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00039"/><link linkend="_struct_sparse_table_disjoint_1abace0a4798ea72d6d063b68b4b218ff1">00039</link> &#32;&#32;&#32;&#32;Type&#32;<link linkend="_struct_sparse_table_disjoint_1abace0a4798ea72d6d063b68b4b218ff1">operator</link>[](<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_sparse_table_disjoint_1aa984a0d78a9e15251a151cbb8953d10e">fold</link><link linkend="_struct_sparse_table_disjoint_1aa984a0d78a9e15251a151cbb8953d10e">(</link>i<link linkend="_struct_sparse_table_disjoint_1aa984a0d78a9e15251a151cbb8953d10e">,</link>i+1<link linkend="_struct_sparse_table_disjoint_1aa984a0d78a9e15251a151cbb8953d10e">)</link>;&#32;}
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00040"/>00040 
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;配列のサイズを返す</emphasis>
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00042"/><link linkend="_struct_sparse_table_disjoint_1a0b726f6dedf26f0b28affebff1e0674d">00042</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_sparse_table_disjoint_1a0b726f6dedf26f0b28affebff1e0674d">size</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;&#32;}
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00043"/>00043 
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00044"/>00044 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;vector&lt;vector&lt;Type&gt;&gt;&#32;dat;
<anchor xml:id="_sparse__table__disjoint_8hpp_source_1l00047"/>00047 };
</programlisting></section>
