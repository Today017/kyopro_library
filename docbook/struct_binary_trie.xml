<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_binary_trie" xml:lang="ja">
<title>BinaryTrie&lt; T, Log &gt; 構造体テンプレート</title>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary></indexterm>
<para>

<para>Binary <link linkend="_struct_trie">Trie</link> </para>
 
</para>
<para>
<computeroutput>#include &quot;binary_trie.hpp&quot;</computeroutput>
</para>
<simplesect>
    <title>公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_binary_trie_1a6d72a8971d396ba065b3aaac8ec97f88">BinaryTrie</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_struct_binary_trie_1a8894b19178488ed5a376fc2f62fe774e">size</link> () const</para>

<para><link linkend="_struct_binary_trie">BinaryTrie</link> のサイズを返す </para>
</listitem>
            <listitem><para>void <link linkend="_struct_binary_trie_1a74c72898c1aa1970a149a895b50d533a">insert</link> (T x, int t=1)</para>

<para>x を t 個挿入する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_binary_trie_1ab383a881f8c83b83bd3b2c2978c543ad">erase</link> (T x, int t=1)</para>

<para>x を min(count(x), t) 個削除する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_binary_trie_1a206bee98568661600b0148bfc0f9a902">apply_xor</link> (T x)</para>

<para>要素全体に x を xor する </para>
</listitem>
            <listitem><para>T <link linkend="_struct_binary_trie_1a574e1542d7930e058e8ac8949424063f">max</link> ()</para>

<para>最大値を返す </para>
</listitem>
            <listitem><para>T <link linkend="_struct_binary_trie_1aa535fa5b5a9c4a43be753790348b940d">min</link> ()</para>

<para>最小値を返す </para>
</listitem>
            <listitem><para>T <link linkend="_struct_binary_trie_1a2580a67854d4e8fe057c0e2bfcd173bc">kth_min</link> (int k)</para>

<para>k(0-indexed) 番目に小さい要素を返す </para>
</listitem>
            <listitem><para>int <link linkend="_struct_binary_trie_1a89a91b195e0f2f46ecf75b0e40745189">lower_bound</link> (T x)</para>

<para>x 以上の最小の要素が何番目に小さいかを返す </para>
</listitem>
            <listitem><para>int <link linkend="_struct_binary_trie_1a8414d307e624d792b9e7cf1d498e499d">count</link> (T x)</para>

<para>x がいくつ含まれているかを返す </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>詳解</title>
<simplesect><title>template&lt;typename T = uint32_t, int Log = 32&gt;<?linebreak?>struct BinaryTrie&lt; T, Log &gt;</title></simplesect>

<para>Binary <link linkend="_struct_trie">Trie</link> </para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00005">5</link> 行目に定義があります。</para>
</section>
<section>
<title>構築子と解体子</title>
<anchor xml:id="_struct_binary_trie_1a6d72a8971d396ba065b3aaac8ec97f88"/><section>
    <title>BinaryTrie()</title>
<indexterm><primary>BinaryTrie</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>BinaryTrie</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput><link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;<link linkend="_struct_binary_trie">::BinaryTrie</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00006">6</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_struct_binary_trie_1a8894b19178488ed5a376fc2f62fe774e"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para><link linkend="_struct_binary_trie">BinaryTrie</link> のサイズを返す </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00009">9</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_binary_trie_1a74c72898c1aa1970a149a895b50d533a"/><section>
    <title>insert()</title>
<indexterm><primary>insert</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::insert (T x, int t = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>x を t 個挿入する </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00015">15</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_binary_trie_1ab383a881f8c83b83bd3b2c2978c543ad"/><section>
    <title>erase()</title>
<indexterm><primary>erase</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::erase (T x, int t = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>x を min(count(x), t) 個削除する </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00020">20</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_binary__trie_8hpp_source_1l00053">count()</link>.</para>
</section>
<anchor xml:id="_struct_binary_trie_1a206bee98568661600b0148bfc0f9a902"/><section>
    <title>apply_xor()</title>
<indexterm><primary>apply_xor</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>apply_xor</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::apply_xor (T x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>要素全体に x を xor する </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00027">27</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_binary_trie_1a574e1542d7930e058e8ac8949424063f"/><section>
    <title>max()</title>
<indexterm><primary>max</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>max</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>T <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::max ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>最大値を返す </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00032">32</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_binary_trie_1aa535fa5b5a9c4a43be753790348b940d"/><section>
    <title>min()</title>
<indexterm><primary>min</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>min</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>T <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::min ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>最小値を返す </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00037">37</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_binary_trie_1a2580a67854d4e8fe057c0e2bfcd173bc"/><section>
    <title>kth_min()</title>
<indexterm><primary>kth_min</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>kth_min</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>T <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::kth_min (int k)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>k(0-indexed) 番目に小さい要素を返す </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00042">42</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_binary__trie_8hpp_source_1l00009">size()</link>.</para>
</section>
<anchor xml:id="_struct_binary_trie_1a89a91b195e0f2f46ecf75b0e40745189"/><section>
    <title>lower_bound()</title>
<indexterm><primary>lower_bound</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>lower_bound</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::lower_bound (T x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>x 以上の最小の要素が何番目に小さいかを返す </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00048">48</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_binary_trie_1a8414d307e624d792b9e7cf1d498e499d"/><section>
    <title>count()</title>
<indexterm><primary>count</primary><secondary>BinaryTrie&lt; T, Log &gt;</secondary></indexterm>
<indexterm><primary>BinaryTrie&lt; T, Log &gt;</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;typename T = uint32_t, int Log = 32&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_binary_trie">BinaryTrie</link>&lt; T, Log &gt;::count (T x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>x がいくつ含まれているかを返す </para>
</para>
<para>
 <link linkend="_binary__trie_8hpp_source">binary_trie.hpp</link> の <link linkend="_binary__trie_8hpp_source_1l00053">53</link> 行目に定義があります。</para>
</section>
<para>
この構造体詳解は次のファイルから抽出されました:</para>
data_structure/<link linkend="_binary__trie_8hpp">binary_trie.hpp</link></section>
</section>
