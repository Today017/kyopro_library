<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_hash" xml:lang="ja">
<title>Hash 構造体</title>
<indexterm><primary>Hash</primary></indexterm>
<para>
<computeroutput>#include &quot;rolling_hash.hpp&quot;</computeroutput>
</para>
<simplesect>
    <title>公開型    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_hash_1a093390f17c113dc150020dac86c6ddd4">Type</link> = array&lt;<link linkend="_template_8hpp_1adcb0b6ef4cd780a895c7089c0191cd62">ll</link>,HASH_PRIME&gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_struct_hash_1a525ce897ce585256fd241baf51c165b9">init</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_hash_1a2bb49844b818de3146548f868777e87b">Hash</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_struct_hash_1a0dabddca4882b6869a7cd3d130e9aad2">Hash</link> (const <link linkend="_struct_hash">Hash</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_struct_hash_1aa2704fbc0e9be14105f061e71b8c144a">Hash</link> (char c)</para>
</listitem>
            <listitem><para><link linkend="_struct_hash">Hash</link> &amp; <link linkend="_struct_hash_1ad788fc103417e8d81d2c140bb05c1447">operator+=</link> (const <link linkend="_struct_hash">Hash</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_struct_hash">Hash</link> &amp; <link linkend="_struct_hash_1ae8b7b557d9b0fdbd7709be1bfc4ca9f5">operator-=</link> (const <link linkend="_struct_hash">Hash</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_struct_hash">Hash</link> <link linkend="_struct_hash_1a37354fe2736bdaca531b94e17c44b784">operator+</link> (const <link linkend="_struct_hash">Hash</link> &amp;other) const</para>
</listitem>
            <listitem><para><link linkend="_struct_hash">Hash</link> <link linkend="_struct_hash_1a6c2d1e0f276c921cfc4e46b001100c06">operator-</link> (const <link linkend="_struct_hash">Hash</link> &amp;other) const</para>
</listitem>
            <listitem><para><link linkend="_struct_hash">Hash</link> <link linkend="_struct_hash_1ad96321a44bb502422139b5c06f484be3">shift</link> (int x) const</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_hash_1a06b1d032944f2169544b27ddedfe9abc">operator==</link> (const <link linkend="_struct_hash">Hash</link> &amp;other) const</para>
</listitem>
            <listitem><para><link linkend="_struct_hash">Hash</link> &amp; <link linkend="_struct_hash_1af4e61589fbc15d41e10e54abecb77d9c">operator=</link> (const <link linkend="_struct_hash">Hash</link> &amp;other)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>公開変数類    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_hash_1a093390f17c113dc150020dac86c6ddd4">Type</link> <link linkend="_struct_hash_1a6a39c22a994feb6e341c48e1a9ac24cb">value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>静的公開変数類    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_template_8hpp_1a5ee21b75b07f2ccf9eeb9e89922eb532">VL</link> <link linkend="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49">base</link></para>
</listitem>
            <listitem><para>static <link linkend="_template_8hpp_1a11a9e4e46b8b410aee9374e030feb3de">VVL</link> <link linkend="_struct_hash_1a65e9a611ad519be5e54523e2845422dc">inv</link></para>
</listitem>
            <listitem><para>static <link linkend="_template_8hpp_1a11a9e4e46b8b410aee9374e030feb3de">VVL</link> <link linkend="_struct_hash_1a40b806f7e170c9454766807a0340696b">pow</link></para>
</listitem>
            <listitem><para>static const <link linkend="_template_8hpp_1a5ee21b75b07f2ccf9eeb9e89922eb532">VL</link> <link linkend="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980">mod</link> ={1000000007,1000000009,1000000021,1000000033,1000000087}</para>
</listitem>
            <listitem><para>static bool <link linkend="_struct_hash_1a07623ca4117730eb67bce9817f146810">flag</link> =false</para>
</listitem>
            <listitem><para>static array&lt; array&lt; <link linkend="_template_8hpp_1adcb0b6ef4cd780a895c7089c0191cd62">ll</link>, HASH_PRIME &gt;, 256 &gt; <link linkend="_struct_hash_1afec174db8743f3050d2f39baef2a0e51">num</link> ={}</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>詳解</title>

<para><caution><title>注意</title>

<para>問題の成約に合わせて書き換えること </para>
</caution>
</para>
<para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00010">10</link> 行目に定義があります。</para>
</section>
<section>
<title>型定義メンバ詳解</title>
<anchor xml:id="_struct_hash_1a093390f17c113dc150020dac86c6ddd4"/><section>
    <title>Type</title>
<indexterm><primary>Type</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>Type</secondary></indexterm>
<para><computeroutput>using <link linkend="_struct_hash_1a093390f17c113dc150020dac86c6ddd4">Hash::Type</link> = array&lt;<link linkend="_template_8hpp_1adcb0b6ef4cd780a895c7089c0191cd62">ll</link>,HASH_PRIME&gt;</computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00012">12</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>構築子と解体子</title>
<anchor xml:id="_struct_hash_1a2bb49844b818de3146548f868777e87b"/><section>
    <title>Hash()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Hash</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>Hash</secondary></indexterm>
<para><computeroutput>Hash::Hash ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_hash_1a0dabddca4882b6869a7cd3d130e9aad2"/><section>
    <title>Hash()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Hash</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>Hash</secondary></indexterm>
<para><computeroutput>Hash::Hash (const <link linkend="_struct_hash">Hash</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00038">38</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_rolling__hash_8hpp_source_1l00016">flag</link>, <link linkend="_rolling__hash_8hpp_source_1l00021">init()</link>.</para>
</section>
<anchor xml:id="_struct_hash_1aa2704fbc0e9be14105f061e71b8c144a"/><section>
    <title>Hash()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Hash</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>Hash</secondary></indexterm>
<para><computeroutput>Hash::Hash (char c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00042">42</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_rolling__hash_8hpp_source_1l00016">flag</link>, <link linkend="_rolling__hash_8hpp_source_1l00021">init()</link>.</para>
</section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_struct_hash_1a525ce897ce585256fd241baf51c165b9"/><section>
    <title>init()</title>
<indexterm><primary>init</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>init</secondary></indexterm>
<para><computeroutput>void Hash::init ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00021">21</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_rolling__hash_8hpp_source_1l00016">flag</link>, <link linkend="_xor128_8hpp_source_1l00018">Xor128()</link>.</para>
</section>
<anchor xml:id="_struct_hash_1ad788fc103417e8d81d2c140bb05c1447"/><section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash">Hash</link> &amp; Hash::operator+= (const <link linkend="_struct_hash">Hash</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00048">48</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1ae8b7b557d9b0fdbd7709be1bfc4ca9f5"/><section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash">Hash</link> &amp; Hash::operator-= (const <link linkend="_struct_hash">Hash</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00052">52</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a37354fe2736bdaca531b94e17c44b784"/><section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash">Hash</link> Hash::operator+ (const <link linkend="_struct_hash">Hash</link> &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00056">56</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_rolling__hash_8hpp_source_1l00048">operator+=()</link>.</para>
</section>
<anchor xml:id="_struct_hash_1a6c2d1e0f276c921cfc4e46b001100c06"/><section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash">Hash</link> Hash::operator- (const <link linkend="_struct_hash">Hash</link> &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00061">61</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_rolling__hash_8hpp_source_1l00052">operator-=()</link>.</para>
</section>
<anchor xml:id="_struct_hash_1ad96321a44bb502422139b5c06f484be3"/><section>
    <title>shift()</title>
<indexterm><primary>shift</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>shift</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash">Hash</link> Hash::shift (int x) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00066">66</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a06b1d032944f2169544b27ddedfe9abc"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Hash::operator== (const <link linkend="_struct_hash">Hash</link> &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00072">72</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1af4e61589fbc15d41e10e54abecb77d9c"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash">Hash</link> &amp; Hash::operator= (const <link linkend="_struct_hash">Hash</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00076">76</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>メンバ詳解</title>
<anchor xml:id="_struct_hash_1add9e6e3f9a1816111f3d1b03c1174d49"/><section>
    <title>base</title>
<indexterm><primary>base</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>base</secondary></indexterm>
<para><computeroutput><link linkend="_template_8hpp_1a5ee21b75b07f2ccf9eeb9e89922eb532">VL</link> Hash::base<computeroutput>[static]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00013">13</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a65e9a611ad519be5e54523e2845422dc"/><section>
    <title>inv</title>
<indexterm><primary>inv</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>inv</secondary></indexterm>
<para><computeroutput><link linkend="_template_8hpp_1a11a9e4e46b8b410aee9374e030feb3de">VVL</link> Hash::inv<computeroutput>[static]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00014">14</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a40b806f7e170c9454766807a0340696b"/><section>
    <title>pow</title>
<indexterm><primary>pow</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>pow</secondary></indexterm>
<para><computeroutput><link linkend="_template_8hpp_1a11a9e4e46b8b410aee9374e030feb3de">VVL</link> Hash::pow<computeroutput>[static]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00014">14</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a3bd24b140ac1c70ae98a01974b0c9980"/><section>
    <title>mod</title>
<indexterm><primary>mod</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>mod</secondary></indexterm>
<para><computeroutput>const <link linkend="_template_8hpp_1a5ee21b75b07f2ccf9eeb9e89922eb532">VL</link> Hash::mod ={1000000007,1000000009,1000000021,1000000033,1000000087}<computeroutput>[static]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00085">85</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a07623ca4117730eb67bce9817f146810"/><section>
    <title>flag</title>
<indexterm><primary>flag</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>flag</secondary></indexterm>
<para><computeroutput>bool Hash::flag =false<computeroutput>[static]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00016">16</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1afec174db8743f3050d2f39baef2a0e51"/><section>
    <title>num</title>
<indexterm><primary>num</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>num</secondary></indexterm>
<para><computeroutput>array&lt; array&lt; <link linkend="_template_8hpp_1adcb0b6ef4cd780a895c7089c0191cd62">ll</link>, HASH_PRIME &gt;, HASH_C &gt; Hash::num ={}<computeroutput>[static]</computeroutput></computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00087">87</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_hash_1a6a39c22a994feb6e341c48e1a9ac24cb"/><section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>Hash</secondary></indexterm>
<indexterm><primary>Hash</primary><secondary>value</secondary></indexterm>
<para><computeroutput><link linkend="_struct_hash_1a093390f17c113dc150020dac86c6ddd4">Type</link> Hash::value</computeroutput></para><para>
 <link linkend="_rolling__hash_8hpp_source">rolling_hash.hpp</link> の <link linkend="_rolling__hash_8hpp_source_1l00019">19</link> 行目に定義があります。</para>
</section>
<para>
この構造体詳解は次のファイルから抽出されました:</para>
string/<link linkend="_rolling__hash_8hpp">rolling_hash.hpp</link></section>
</section>
