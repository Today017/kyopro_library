<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t" xml:lang="ja">
<title>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt; 構造体テンプレート</title>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary></indexterm>
<para>
<computeroutput>#include &quot;insert_reverse_array.hpp&quot;</computeroutput>
</para>
<para>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt; の継承関係図    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>公開型    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2cc0713f1bac2dc605fe22990c2ee1bd">Node</link> = <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;</para>
</listitem>
            <listitem><para>using <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab7db3c0fa906d85207ff1443d0164612">base</link> = <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">RBSTBase</link>&lt;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;&gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
基底クラス <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase&lt; LazyReversibleRBSTNode&lt; T, E &gt; &gt;</link> に属する継承公開型        <itemizedlist>
            <listitem><para>using <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link></para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a6b57cd7c8c2abdf621c86e76aa2f5a58">LazyReversibleRBST</link> ()=default</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6">toggle</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t)</para>
</listitem>
            <listitem><para>T <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ae69875869036c22d87735c9e5b433bb5">fold</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int a, int b)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2ac842d27b458b66c5b113307dfe28ea">reverse</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int a, int b)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab4b0701f2e1deed723bd75eed1e9cf86">apply</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int a, int b, const E &amp;<link linkend="_namespace_insertable_reversible_array_impl_1a37fafc5a9cb6ce08b2dbc5e775fbf79f">e</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1aee7676fe4681e1812dabfdd680159f73">merge</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> l, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> r)</para>
</listitem>
            <listitem><para>pair&lt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link>, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &gt; <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a05a84e982cd08e2d1daab87d2d0ec78e">split</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t, int k)</para>
</listitem>
        </itemizedlist>
</simplesect>
基底クラス <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase&lt; LazyReversibleRBSTNode&lt; T, E &gt; &gt;</link> に属する継承公開メンバ関数        <itemizedlist>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1aa8b6128c8a3a8fefe6919c8068788f5e">my_new</link> (Args...args)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">my_del</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a9337a3fcb64ce0db1512ab250b0776b5">make_tree</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a61257b4dedade09e42d6f79c48b3938c">size</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) const</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> l, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> r)</para>
</listitem>
            <listitem><para>pair&lt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link>, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &gt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">split</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t, int k)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae1c4c75a693123736e99ff1ab285f4bc">build</link> (int l, int r, const vector&lt; decltype(<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt; T, E &gt;::key)&gt; &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1acf244c4471e356a85278e993db8201b3">build</link> (const vector&lt; decltype(<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt; T, E &gt;::key)&gt; &amp;v)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a6b8d4d3825b9d530359ee07fc0a51b30">insert</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int k, const Args &amp;...args)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a8fe3d734da7206c01b3598bde497dd83">erase</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int k)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1aa8b6128c8a3a8fefe6919c8068788f5e">my_new</link> (Args...args)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ad3073c30f3809a630a7a90ae2a877c74">my_del</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a9337a3fcb64ce0db1512ab250b0776b5">make_tree</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a61257b4dedade09e42d6f79c48b3938c">size</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) const</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a786a13ae117b5d6a66e4fdee580da88e">merge</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> l, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> r)</para>
</listitem>
            <listitem><para>pair&lt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link>, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &gt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a09ee6014e81276efd5df9af49f61e735">split</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t, int k)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae1c4c75a693123736e99ff1ab285f4bc">build</link> (int l, int r, const vector&lt; decltype(<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt; T, E &gt;::key)&gt; &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1acf244c4471e356a85278e993db8201b3">build</link> (const vector&lt; decltype(<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt; T, E &gt;::key)&gt; &amp;v)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a6b8d4d3825b9d530359ee07fc0a51b30">insert</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int k, const Args &amp;...args)</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a8fe3d734da7206c01b3598bde497dd83">erase</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp;t, int k)</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>限定公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para>T <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1">sum</link> (const <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) const</para>
</listitem>
            <listitem><para><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a10c534293743a5329c0fc6f66b9135ae">update</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) override</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04">push</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) override</para>
</listitem>
            <listitem><para>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584">propagate</link> (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t, const E &amp;x)</para>
</listitem>
        </itemizedlist>
</simplesect>
基底クラス <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase&lt; LazyReversibleRBSTNode&lt; T, E &gt; &gt;</link> に属する継承限定公開メンバ関数        <itemizedlist>
            <listitem><para>int <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">count</link> (const <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ab3be2623dd83bcea2293de98495a848a">count</link> (const <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) const</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>その他の継承メンバ    </title>
基底クラス <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase&lt; LazyReversibleRBSTNode&lt; T, E &gt; &gt;</link> に属する継承静的限定公開メンバ関数        <itemizedlist>
            <listitem><para>static uint64_t <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1af5b7726452c97a737444c3281ddc7749">rng</link> ()</para>
</listitem>
            <listitem><para>static uint64_t <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1af5b7726452c97a737444c3281ddc7749">rng</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>詳解</title>
<simplesect><title>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt;<?linebreak?>struct InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</title></simplesect>
<para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00081">81</link> 行目に定義があります。</para>
</section>
<section>
<title>型定義メンバ詳解</title>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2cc0713f1bac2dc605fe22990c2ee1bd"/><section>
    <title>Node</title>
<indexterm><primary>Node</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>Node</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::Node = <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;</computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00082">82</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab7db3c0fa906d85207ff1443d0164612"/><section>
    <title>base</title>
<indexterm><primary>base</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>base</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::base = <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">RBSTBase</link>&lt;<link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt;T,E&gt;&gt;</computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00083">83</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>構築子と解体子</title>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a6b57cd7c8c2abdf621c86e76aa2f5a58"/><section>
    <title>LazyReversibleRBST()</title>
<indexterm><primary>LazyReversibleRBST</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>LazyReversibleRBST</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput><link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::LazyReversibleRBST ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a5d5b09055fdf296094fbe78c064b2ba6"/><section>
    <title>toggle()</title>
<indexterm><primary>toggle</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>toggle</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::toggle (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00088">88</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ae69875869036c22d87735c9e5b433bb5"/><section>
    <title>fold()</title>
<indexterm><primary>fold</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>fold</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>T <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::fold (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp; t, int a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00094">94</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_insert__reverse__array_8hpp_source_1l00115">sum()</link>.</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a2ac842d27b458b66c5b113307dfe28ea"/><section>
    <title>reverse()</title>
<indexterm><primary>reverse</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>reverse</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::reverse (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp; t, int a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00101">101</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_insert__reverse__array_8hpp_source_1l00088">toggle()</link>.</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ab4b0701f2e1deed723bd75eed1e9cf86"/><section>
    <title>apply()</title>
<indexterm><primary>apply</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>apply</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::apply (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &amp; t, int a, int b, const E &amp; e)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00107">107</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_insert__reverse__array_8hpp_source_1l00136">propagate()</link>.</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a857cf302508618d6944585d711f033d1"/><section>
    <title>sum()</title>
<indexterm><primary>sum</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>sum</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>T <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::sum (const <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00115">115</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a10c534293743a5329c0fc6f66b9135ae"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>update</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::update (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t)<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1afc27924b11d50cb74621f223c1f5408d">InsertableReversibleArrayImpl::RBSTBase&lt; LazyReversibleRBSTNode&lt; T, E &gt; &gt;</link>を実装しています。</para>
<para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00116">116</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_insert__reverse__array_8hpp_source_1l00124">push()</link>.</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1ac8db7d48192fd143cf9c100bc8ca1a04"/><section>
    <title>push()</title>
<indexterm><primary>push</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>push</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::push (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t)<computeroutput>[inline]</computeroutput>, <computeroutput>[override]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1ae6287f00bdcec7ba70119cf3eabed5c8">InsertableReversibleArrayImpl::RBSTBase&lt; LazyReversibleRBSTNode&lt; T, E &gt; &gt;</link>を実装しています。</para>
<para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00124">124</link> 行目に定義があります。</para>
<para>
参照先 <link linkend="_insert__reverse__array_8hpp_source_1l00136">propagate()</link>, <link linkend="_insert__reverse__array_8hpp_source_1l00088">toggle()</link>.</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1af0ac4721b9dbe26f52dda5cc875ed584"/><section>
    <title>propagate()</title>
<indexterm><primary>propagate</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>propagate</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t">InsertableReversibleArrayImpl::LazyReversibleRBST</link>&lt; T, E, f, g, <link linkend="_sparse__table__2d_8hpp_1a16611451551e3d15916bae723c3f59f7">h</link>, ts &gt;::propagate (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t, const E &amp; x)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00136">136</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1aee7676fe4681e1812dabfdd680159f73"/><section>
    <title>merge()</title>
<indexterm><primary>merge</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>merge</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput><link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase</link>&lt; <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt; T, E &gt; &gt;::merge (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> l, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> r)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00012">12</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_1a05a84e982cd08e2d1daab87d2d0ec78e"/><section>
    <title>split()</title>
<indexterm><primary>split</primary><secondary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</secondary></indexterm>
<indexterm><primary>InsertableReversibleArrayImpl::LazyReversibleRBST&lt; T, E, f, g, h, ts &gt;</primary><secondary>split</secondary></indexterm>
<computeroutput>template&lt;typename T, typename E, T(*)(T, T) f, T(*)(T, E) g, E(*)(E, E) h, T(*)(T) ts&gt; </computeroutput><para><computeroutput>pair&lt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link>, <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> &gt; <link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base">InsertableReversibleArrayImpl::RBSTBase</link>&lt; <link linkend="_struct_insertable_reversible_array_impl_1_1_lazy_reversible_r_b_s_t_node">LazyReversibleRBSTNode</link>&lt; T, E &gt; &gt;::split (<link linkend="_struct_insertable_reversible_array_impl_1_1_r_b_s_t_base_1a180ae88301ad385924163bd074675c64">Ptr</link> t, int k)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_insert__reverse__array_8hpp_source">insert_reverse_array.hpp</link> の <link linkend="_insert__reverse__array_8hpp_source_1l00024">24</link> 行目に定義があります。</para>
</section>
<para>
この構造体詳解は次のファイルから抽出されました:</para>
data_structure/<link linkend="_insert__reverse__array_8hpp">insert_reverse_array.hpp</link></section>
</section>
