<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_seg_tree" xml:lang="ja">
<title>SegTree&lt; Monoid &gt; 構造体テンプレート</title>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary></indexterm>
<para>

<para>セグメント木 </para>
 
</para>
<para>
<computeroutput>#include &quot;segtree.hpp&quot;</computeroutput>
</para>
<simplesect>
    <title>公開型    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> = typename Monoid::Type</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_seg_tree_1a791e801ba68339909a0be6b1b21af32a">SegTree</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_1acf1bec279e7ef62b88a4b734cd34051d">SegTree</link> (int n)</para>

<para>要素数 n のセグ木を構築する </para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_1a4b1322c2c40ed18503529433425955fe">SegTree</link> (const vector&lt; <link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> &gt; &amp;v)</para>

<para>配列 v からセグ木を構築する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_seg_tree_1abffaeb2310c009d4c80189a710a0254d">set</link> (int i, <link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> x)</para>

<para>i 番目の要素を x に変更する </para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> <link linkend="_struct_seg_tree_1ab9725a4dc2152446887d87195cc88c4d">fold</link> (int l, int r)</para>

<para>区間 [l, r) のモノイド積を返す </para>
</listitem>
            <listitem><para>template&lt;typename F&gt; </para><para>int <link linkend="_struct_seg_tree_1ad2d7958e9a4bf972af9a17c75797f05b">find_right</link> (int l, F f)</para>

<para>区間 [l, x) のモノイド積が f を満たすような最大の x &gt;= l を返す </para>
</listitem>
            <listitem><para>template&lt;typename F&gt; </para><para>int <link linkend="_struct_seg_tree_1a42e25bc5f3c27da146721b6bc9099893">find_left</link> (int r, F f)</para>

<para>区間 [x, r) のモノイド積が f を満たすような最小の x &lt;= r を返す </para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> <link linkend="_struct_seg_tree_1abaaec86084bfc4f3ea884347097d2277">operator[]</link> (int i)</para>

<para>i 番目の要素を返す </para>
</listitem>
            <listitem><para>int <link linkend="_struct_seg_tree_1a5df8a514cb63bc8845fa4077e183317f">size</link> ()</para>

<para>配列のサイズを返す </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>詳解</title>
<simplesect><title>template&lt;typename Monoid&gt;<?linebreak?>struct SegTree&lt; Monoid &gt;</title></simplesect>

<para>セグメント木 </para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00006">6</link> 行目に定義があります。</para>
</section>
<section>
<title>型定義メンバ詳解</title>
<anchor xml:id="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460"/><section>
    <title>Type</title>
<indexterm><primary>Type</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>Type</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::Type = typename Monoid::Type</computeroutput></para><para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00007">7</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>構築子と解体子</title>
<anchor xml:id="_struct_seg_tree_1a791e801ba68339909a0be6b1b21af32a"/><section>
    <title>SegTree()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>SegTree</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>SegTree</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;<link linkend="_struct_seg_tree">::SegTree</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_seg_tree_1acf1bec279e7ef62b88a4b734cd34051d"/><section>
    <title>SegTree()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>SegTree</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>SegTree</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;<link linkend="_struct_seg_tree">::SegTree</link> (int n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>要素数 n のセグ木を構築する </para>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00011">11</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_1a4b1322c2c40ed18503529433425955fe"/><section>
    <title>SegTree()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>SegTree</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>SegTree</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;<link linkend="_struct_seg_tree">::SegTree</link> (const vector&lt; <link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>配列 v からセグ木を構築する </para>
</para>

<para><note><title>覚え書き</title>

<para>O(N) </para>
</note>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00019">19</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_struct_seg_tree_1abffaeb2310c009d4c80189a710a0254d"/><section>
    <title>set()</title>
<indexterm><primary>set</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::set (int i, <link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>i 番目の要素を x に変更する </para>
</para>

<para><note><title>覚え書き</title>

<para>O(log(N)) </para>
</note>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00029">29</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_1ab9725a4dc2152446887d87195cc88c4d"/><section>
    <title>fold()</title>
<indexterm><primary>fold</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>fold</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::fold (int l, int r)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [l, r) のモノイド積を返す </para>
</para>

<para><note><title>覚え書き</title>

<para>O(log(N)) </para>
</note>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00037">37</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_1ad2d7958e9a4bf972af9a17c75797f05b"/><section>
    <title>find_right()</title>
<indexterm><primary>find_right</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>find_right</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><computeroutput>template&lt;typename F&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::find_right (int l, F f)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [l, x) のモノイド積が f を満たすような最大の x &gt;= l を返す </para>
</para>

<para><caution><title>注意</title>

<para><computeroutput>f(Monoid::id())=true</computeroutput> が成り立つ必要がある </para>
</caution>
<note><title>覚え書き</title>

<para>O(log(N)) </para>
</note>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00052">52</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_1a42e25bc5f3c27da146721b6bc9099893"/><section>
    <title>find_left()</title>
<indexterm><primary>find_left</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>find_left</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><computeroutput>template&lt;typename F&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::find_left (int r, F f)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [x, r) のモノイド積が f を満たすような最小の x &lt;= r を返す </para>
</para>

<para><caution><title>注意</title>

<para><computeroutput>f(Monoid::id())=true</computeroutput> が成り立つ必要がある </para>
</caution>
<note><title>覚え書き</title>

<para>O(log(N)) </para>
</note>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00088">88</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_1abaaec86084bfc4f3ea884347097d2277"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_1aac5a3f0410edaa464604856c1a182460">Type</link> <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>i 番目の要素を返す </para>
</para>

<para><note><title>覚え書き</title>

<para>O(1) </para>
</note>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00122">122</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_1a5df8a514cb63bc8845fa4077e183317f"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>SegTree&lt; Monoid &gt;</secondary></indexterm>
<indexterm><primary>SegTree&lt; Monoid &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Monoid&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_seg_tree">SegTree</link>&lt; Monoid &gt;::size ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>配列のサイズを返す </para>
</para>
<para>
 <link linkend="_segtree_8hpp_source">segtree.hpp</link> の <link linkend="_segtree_8hpp_source_1l00125">125</link> 行目に定義があります。</para>
</section>
<para>
この構造体詳解は次のファイルから抽出されました:</para>
data_structure/<link linkend="_segtree_8hpp">segtree.hpp</link></section>
</section>
