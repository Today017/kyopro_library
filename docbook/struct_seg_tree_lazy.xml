<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_seg_tree_lazy" xml:lang="ja">
<title>SegTreeLazy&lt; Monoid, Operator, mapping &gt; 構造体テンプレート</title>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary></indexterm>
<para>

<para>遅延評価セグメント木 </para>
 
</para>
<para>
<computeroutput>#include &quot;segtree_lazy.hpp&quot;</computeroutput>
</para>
<simplesect>
    <title>公開型    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> = typename Monoid::Type</para>
</listitem>
            <listitem><para>using <link linkend="_struct_seg_tree_lazy_1a85ccbd9400631857c24066af7f230c18">OperatorType</link> = typename Operator::Type</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_seg_tree_lazy_1ad7fdb9653e028ff01ed90da72d1570dd">SegTreeLazy</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_lazy_1ae01e57c4f628819bbf6f08691e4b77e7">SegTreeLazy</link> (int n)</para>

<para>要素数 n の遅延セグ木を構築する </para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_lazy_1a2d23d454ba4728c7c0ba4b1a67bc01b7">SegTreeLazy</link> (const vector&lt; <link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> &gt; &amp;v)</para>

<para>配列 v から遅延セグ木を構築する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_seg_tree_lazy_1ad0b49b3ff4b8c6b57c733449ffdf5b85">set</link> (int i, <link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> x)</para>

<para>i 番目の要素を x に更新する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_seg_tree_lazy_1a3d2684a4b4fbc1995a2d1790eba427a3">apply</link> (int l, int r, <link linkend="_struct_seg_tree_lazy_1a85ccbd9400631857c24066af7f230c18">OperatorType</link> x)</para>

<para>区間 [l, r) に x を作用させる </para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> <link linkend="_struct_seg_tree_lazy_1a7f424f5acb8639d9ec9f5b42005dd567">fold</link> (int l, int r)</para>

<para>区間 [l, r) のモノイド積を返す </para>
</listitem>
            <listitem><para>template&lt;typename F&gt; </para><para>int <link linkend="_struct_seg_tree_lazy_1abf01c743ea6b8648ab8fbb5590de0065">find_right</link> (int l, F f)</para>

<para>区間 [l, x) のモノイド積が f を満たすような最大の x &gt;= l を返す </para>
</listitem>
            <listitem><para>template&lt;typename F&gt; </para><para>int <link linkend="_struct_seg_tree_lazy_1a96ee12dc05c4296b4176ea1a91564558">find_left</link> (int r, F f)</para>

<para>区間 [x, r) のモノイド積が f を満たすような最小の x&lt;=r を返す </para>
</listitem>
            <listitem><para>int <link linkend="_struct_seg_tree_lazy_1ad04a20cae43ac18270ee7b1b509c51f9">size</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> <link linkend="_struct_seg_tree_lazy_1abc1293d5bcbb6b175fc749044e0c2c52">operator[]</link> (int i)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>詳解</title>
<simplesect><title>template&lt;typename Monoid, typename Operator, auto mapping&gt;<?linebreak?>struct SegTreeLazy&lt; Monoid, Operator, mapping &gt;</title></simplesect>

<para>遅延評価セグメント木 </para>



<para>
                <formalpara>
                    <title>
テンプレート引数</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry><link linkend="_namespace_monoid">Monoid</link></entry><entry>
<para>モノイド </para>
</entry>
                            </row>
                            <row>
<entry><link linkend="_namespace_operator">Operator</link></entry><entry>
<para>作用素 </para>
</entry>
                            </row>
                            <row>
<entry>mapping</entry><entry>
<para>（モノイドの元，作用素の元）→モノイドの元を返す関数 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00009">9</link> 行目に定義があります。</para>
</section>
<section>
<title>型定義メンバ詳解</title>
<anchor xml:id="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4"/><section>
    <title>MonoidType</title>
<indexterm><primary>MonoidType</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>MonoidType</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::MonoidType = typename Monoid::Type</computeroutput></para><para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00010">10</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1a85ccbd9400631857c24066af7f230c18"/><section>
    <title>OperatorType</title>
<indexterm><primary>OperatorType</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>OperatorType</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::OperatorType = typename Operator::Type</computeroutput></para><para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00011">11</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>構築子と解体子</title>
<anchor xml:id="_struct_seg_tree_lazy_1ad7fdb9653e028ff01ed90da72d1570dd"/><section>
    <title>SegTreeLazy()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>SegTreeLazy</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>SegTreeLazy</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;<link linkend="_struct_seg_tree_lazy">::SegTreeLazy</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_seg_tree_lazy_1ae01e57c4f628819bbf6f08691e4b77e7"/><section>
    <title>SegTreeLazy()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>SegTreeLazy</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>SegTreeLazy</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;<link linkend="_struct_seg_tree_lazy">::SegTreeLazy</link> (int n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>要素数 n の遅延セグ木を構築する </para>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00015">15</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1a2d23d454ba4728c7c0ba4b1a67bc01b7"/><section>
    <title>SegTreeLazy()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>SegTreeLazy</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>SegTreeLazy</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;<link linkend="_struct_seg_tree_lazy">::SegTreeLazy</link> (const vector&lt; <link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>配列 v から遅延セグ木を構築する </para>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00022">22</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_struct_seg_tree_lazy_1ad0b49b3ff4b8c6b57c733449ffdf5b85"/><section>
    <title>set()</title>
<indexterm><primary>set</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::set (int i, <link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>i 番目の要素を x に更新する </para>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00031">31</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1a3d2684a4b4fbc1995a2d1790eba427a3"/><section>
    <title>apply()</title>
<indexterm><primary>apply</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>apply</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::apply (int l, int r, <link linkend="_struct_seg_tree_lazy_1a85ccbd9400631857c24066af7f230c18">OperatorType</link> x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [l, r) に x を作用させる </para>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00040">40</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1a7f424f5acb8639d9ec9f5b42005dd567"/><section>
    <title>fold()</title>
<indexterm><primary>fold</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>fold</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::fold (int l, int r)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [l, r) のモノイド積を返す </para>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00062">62</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1abf01c743ea6b8648ab8fbb5590de0065"/><section>
    <title>find_right()</title>
<indexterm><primary>find_right</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>find_right</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><computeroutput>template&lt;typename F&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::find_right (int l, F f)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [l, x) のモノイド積が f を満たすような最大の x &gt;= l を返す </para>
</para>

<para><caution><title>注意</title>

<para><computeroutput>f(Monoid::id())=true</computeroutput> が成り立つ必要がある </para>
</caution>
<note><title>覚え書き</title>

<para>O(log(N)) </para>
</note>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00080">80</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1a96ee12dc05c4296b4176ea1a91564558"/><section>
    <title>find_left()</title>
<indexterm><primary>find_left</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>find_left</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><computeroutput>template&lt;typename F&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::find_left (int r, F f)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [x, r) のモノイド積が f を満たすような最小の x&lt;=r を返す </para>
</para>

<para><caution><title>注意</title>

<para><computeroutput>f(Monoid::id())=true</computeroutput> が成り立つ必要がある </para>
</caution>
<note><title>覚え書き</title>

<para>O(log(N)) </para>
</note>
</para>
<para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00119">119</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1ad04a20cae43ac18270ee7b1b509c51f9"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::size ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00154">154</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_seg_tree_lazy_1abc1293d5bcbb6b175fc749044e0c2c52"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</secondary></indexterm>
<indexterm><primary>SegTreeLazy&lt; Monoid, Operator, mapping &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Monoid, typename Operator, auto mapping&gt; </computeroutput><para><computeroutput><link linkend="_struct_seg_tree_lazy_1ab20ca57d57ff4a47c60f50ef5a1265e4">MonoidType</link> <link linkend="_struct_seg_tree_lazy">SegTreeLazy</link>&lt; Monoid, Operator, mapping &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_segtree__lazy_8hpp_source">segtree_lazy.hpp</link> の <link linkend="_segtree__lazy_8hpp_source_1l00155">155</link> 行目に定義があります。</para>
</section>
<para>
この構造体詳解は次のファイルから抽出されました:</para>
data_structure/<link linkend="_segtree__lazy_8hpp">segtree_lazy.hpp</link></section>
</section>
