<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_sqrt_tree" xml:lang="ja">
<title>SqrtTree&lt; Abel &gt; 構造体テンプレート</title>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary></indexterm>
<para>

<para>更新 O(1) クエリ O(sqrt(N)) の改造版セグ木 </para>
 
</para>
<para>
<computeroutput>#include &quot;sqrt_tree.hpp&quot;</computeroutput>
</para>
<simplesect>
    <title>公開型    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> = typename Abel::Type</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>公開メンバ関数    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_sqrt_tree_1ab0fbb1c94e236f7e18f8bf06ef6427b9">SqrtTree</link> ()=default</para>
</listitem>
            <listitem><para><link linkend="_struct_sqrt_tree_1ae0a29057985de7b015ad1150826067fe">SqrtTree</link> (int n)</para>
</listitem>
            <listitem><para><link linkend="_struct_sqrt_tree_1a8628edad00e39182bd82bb2fd04add3d">SqrtTree</link> (const vector&lt; <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> &gt; &amp;v)</para>

<para>配列 v で初期化する </para>
</listitem>
            <listitem><para><link linkend="_struct_sqrt_tree_1a1a36223247e599446425fdb14c14e941">SqrtTree</link> (const vector&lt; <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> &gt; &amp;v, const vector&lt; <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> &gt; &amp;v_inv)</para>

<para>配列 v とその逆元 v_inv で初期化する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_sqrt_tree_1a3842c3c8ecc681bab6867d2e34979669">set</link> (int i, <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> x)</para>

<para>i 番目の要素を x に更新する </para>
</listitem>
            <listitem><para>void <link linkend="_struct_sqrt_tree_1a7c3e46e49b2b52b2fbf432ed0220a3e6">set</link> (int i, <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> x, <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> x_inv)</para>

<para>i 番目の要素を x に更新し、その逆元を x_inv に更新する </para>
</listitem>
            <listitem><para><link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> <link linkend="_struct_sqrt_tree_1a14f3772f850e992950cde4b07af50bee">fold</link> (int l, int r)</para>

<para>区間 [l, r) の群積を返す </para>
</listitem>
            <listitem><para><link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> <link linkend="_struct_sqrt_tree_1a5c6518d9bea2c100fb8f7da9ef440657">operator[]</link> (int i) const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_sqrt_tree_1a9f5050f5c479d4714b05a200625ca3fe">size</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>詳解</title>
<simplesect><title>template&lt;typename Abel&gt;<?linebreak?>struct SqrtTree&lt; Abel &gt;</title></simplesect>

<para>更新 O(1) クエリ O(sqrt(N)) の改造版セグ木 </para>



<para><link linkend="_struct_mo">Mo</link>&apos;s Algorithmとの相性が良い <note><title>覚え書き</title>

<para>モノイドではなくアーベル群が乗る（モノイドや群の場合、更新が Θ(√N) でメリットがない） <link xlink:href="https://atcoder.jp/contests/abc405/submissions/65704867">https://atcoder.jp/contests/abc405/submissions/65704867</link> </para>
</note>
</para>
<para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00008">8</link> 行目に定義があります。</para>
</section>
<section>
<title>型定義メンバ詳解</title>
<anchor xml:id="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0"/><section>
    <title>Type</title>
<indexterm><primary>Type</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>Type</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput>using <link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;::Type = typename Abel::Type</computeroutput></para><para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00009">9</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>構築子と解体子</title>
<anchor xml:id="_struct_sqrt_tree_1ab0fbb1c94e236f7e18f8bf06ef6427b9"/><section>
    <title>SqrtTree()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>SqrtTree</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>SqrtTree</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput><link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;<link linkend="_struct_sqrt_tree">::SqrtTree</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_sqrt_tree_1ae0a29057985de7b015ad1150826067fe"/><section>
    <title>SqrtTree()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>SqrtTree</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>SqrtTree</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput><link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;<link linkend="_struct_sqrt_tree">::SqrtTree</link> (int n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00012">12</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_sqrt_tree_1a8628edad00e39182bd82bb2fd04add3d"/><section>
    <title>SqrtTree()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>SqrtTree</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>SqrtTree</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput><link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;<link linkend="_struct_sqrt_tree">::SqrtTree</link> (const vector&lt; <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> &gt; &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>配列 v で初期化する </para>
</para>
<para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00022">22</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_sqrt_tree_1a1a36223247e599446425fdb14c14e941"/><section>
    <title>SqrtTree()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>SqrtTree</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>SqrtTree</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput><link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;<link linkend="_struct_sqrt_tree">::SqrtTree</link> (const vector&lt; <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> &gt; &amp; v, const vector&lt; <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> &gt; &amp; v_inv)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>配列 v とその逆元 v_inv で初期化する </para>
</para>
<para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00037">37</link> 行目に定義があります。</para>
</section>
</section>
<section>
<title>関数詳解</title>
<anchor xml:id="_struct_sqrt_tree_1a3842c3c8ecc681bab6867d2e34979669"/><section>
    <title>set()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;::set (int i, <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>i 番目の要素を x に更新する </para>
</para>

<para><note><title>覚え書き</title>

<para>O(f) （f : 逆元を求めるのにかかる計算量） </para>
</note>
</para>
<para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00053">53</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_sqrt_tree_1a7c3e46e49b2b52b2fbf432ed0220a3e6"/><section>
    <title>set()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput>void <link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;::set (int i, <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> x, <link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> x_inv)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>i 番目の要素を x に更新し、その逆元を x_inv に更新する </para>
</para>
<para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00062">62</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_sqrt_tree_1a14f3772f850e992950cde4b07af50bee"/><section>
    <title>fold()</title>
<indexterm><primary>fold</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>fold</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput><link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> <link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;::fold (int l, int r)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>区間 [l, r) の群積を返す </para>
</para>

<para><note><title>覚え書き</title>

<para>O(√N) </para>
</note>
</para>
<para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00072">72</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_sqrt_tree_1a5c6518d9bea2c100fb8f7da9ef440657"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput><link linkend="_struct_sqrt_tree_1a46ab9cd6f10fedeb28683788e8f9dff0">Type</link> <link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00086">86</link> 行目に定義があります。</para>
</section>
<anchor xml:id="_struct_sqrt_tree_1a9f5050f5c479d4714b05a200625ca3fe"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>SqrtTree&lt; Abel &gt;</secondary></indexterm>
<indexterm><primary>SqrtTree&lt; Abel &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Abel&gt; </computeroutput><para><computeroutput>int <link linkend="_struct_sqrt_tree">SqrtTree</link>&lt; Abel &gt;::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>
 <link linkend="_sqrt__tree_8hpp_source">sqrt_tree.hpp</link> の <link linkend="_sqrt__tree_8hpp_source_1l00087">87</link> 行目に定義があります。</para>
</section>
<para>
この構造体詳解は次のファイルから抽出されました:</para>
data_structure/<link linkend="_sqrt__tree_8hpp">sqrt_tree.hpp</link></section>
</section>
