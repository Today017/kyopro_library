<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_trie_8hpp_source" xml:lang="ja">
<title>trie.hpp</title>
<indexterm><primary>string/trie.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_trie_8hpp_source_1l00001"/><link linkend="_struct_trie">00001</link> <emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_trie">Trie</link>&#32;{
<anchor xml:id="_trie_8hpp_source_1l00002"/><link linkend="_struct_trie_1_1_node">00002</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct_trie_1_1_node">Node</link>{
<anchor xml:id="_trie_8hpp_source_1l00003"/><link linkend="_struct_trie_1_1_node_1a16b96d3f7a49d34a7259a5ec4e30d60c">00003</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_trie_1_1_node_1a16b96d3f7a49d34a7259a5ec4e30d60c">array</link>&lt;<emphasis role="keywordtype">int</emphasis>,26&gt;&#32;<link linkend="_struct_trie_1_1_node_1a16b96d3f7a49d34a7259a5ec4e30d60c">to</link>;
<anchor xml:id="_trie_8hpp_source_1l00004"/><link linkend="_struct_trie_1_1_node_1a27c0ac65cfbf93e381123681f6610679">00004</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_trie_1_1_node_1a27c0ac65cfbf93e381123681f6610679">count_of_end</link>=0,<link linkend="_struct_trie_1_1_node_1aebe335b7f8f0cef44dff4eeaafefcc74">count_of_node</link>=0;
<anchor xml:id="_trie_8hpp_source_1l00005"/><link linkend="_struct_trie_1_1_node_1aeb43ae0f05e236bdaac77ea555fe280c">00005</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_trie_1_1_node_1aeb43ae0f05e236bdaac77ea555fe280c">Node</link>()&#32;{&#32;fill(ALL(to),-1);&#32;}
<anchor xml:id="_trie_8hpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;};
<anchor xml:id="_trie_8hpp_source_1l00007"/>00007 
<anchor xml:id="_trie_8hpp_source_1l00008"/><link linkend="_struct_trie_1a061fbd5e9f5453de8558c078c9d371e8">00008</link> &#32;&#32;&#32;&#32;<link linkend="_struct_trie_1a061fbd5e9f5453de8558c078c9d371e8">Trie</link>(<emphasis role="keywordtype">int</emphasis>&#32;len)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes.reserve(len);
<anchor xml:id="_trie_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_trie_1_1_node">Node</link>&#32;root;
<anchor xml:id="_trie_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes.push_back(root);
<anchor xml:id="_trie_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00013"/>00013 
<anchor xml:id="_trie_8hpp_source_1l00014"/><link linkend="_struct_trie_1abfe4a4f10e3662529a07c66f42c54405">00014</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_trie_1abfe4a4f10e3662529a07c66f42c54405">insert</link>(<emphasis role="keyword">const</emphasis>&#32;string&amp;&#32;s)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cur=0;
<anchor xml:id="_trie_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;c:s)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nxt=nodes[cur].to[c-<emphasis role="stringliteral">&apos;a&apos;</emphasis>];
<anchor xml:id="_trie_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==-1)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[cur].to[c-<emphasis role="stringliteral">&apos;a&apos;</emphasis>]=nodes.size();
<anchor xml:id="_trie_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nxt=nodes.size();
<anchor xml:id="_trie_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes.push_back(Node());
<anchor xml:id="_trie_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur=nxt;
<anchor xml:id="_trie_8hpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[cur].count_of_node++;
<anchor xml:id="_trie_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[cur].count_of_end++;
<anchor xml:id="_trie_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00028"/>00028 
<anchor xml:id="_trie_8hpp_source_1l00029"/><link linkend="_struct_trie_1a40c92cc6339d52134619f1a2aad28109">00029</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_trie_1a40c92cc6339d52134619f1a2aad28109">count</link>(<emphasis role="keyword">const</emphasis>&#32;string&amp;&#32;s)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cur=0,ret=0;
<anchor xml:id="_trie_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;c:s)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nxt=nodes[cur].to[c-<emphasis role="stringliteral">&apos;a&apos;</emphasis>];
<anchor xml:id="_trie_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==-1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_trie_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur=nxt;
<anchor xml:id="_trie_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=nodes[cur].count_of_end;
<anchor xml:id="_trie_8hpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00038"/>00038 
<anchor xml:id="_trie_8hpp_source_1l00039"/><link linkend="_struct_trie_1a6531d8fb5e75df10735b6ce33297879b">00039</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_trie_1a6531d8fb5e75df10735b6ce33297879b">erase</link>(<emphasis role="keyword">const</emphasis>&#32;string&amp;&#32;s)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cur=0;
<anchor xml:id="_trie_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;c:s)&#32;{
<anchor xml:id="_trie_8hpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nxt=nodes[cur].to[c-<emphasis role="stringliteral">&apos;a&apos;</emphasis>];
<anchor xml:id="_trie_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(nxt==-1)&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_trie_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cur=nxt;
<anchor xml:id="_trie_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[cur].count_of_node--;
<anchor xml:id="_trie_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nodes[cur].count_of_end--;
<anchor xml:id="_trie_8hpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;}
<anchor xml:id="_trie_8hpp_source_1l00049"/>00049 
<anchor xml:id="_trie_8hpp_source_1l00050"/>00050 <emphasis role="keyword">private</emphasis>:
<anchor xml:id="_trie_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;vector&lt;Node&gt;&#32;nodes;
<anchor xml:id="_trie_8hpp_source_1l00052"/>00052 };
</programlisting></section>
