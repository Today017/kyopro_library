<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_z__algorithm_8hpp_source" xml:lang="ja">
<title>z_algorithm.hpp</title>
<indexterm><primary>string/z_algorithm.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_z__algorithm_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_z__algorithm_8hpp_source_1l00002"/>00002 
<anchor xml:id="_z__algorithm_8hpp_source_1l00003"/>00003 <emphasis role="comment">///&#32;@brief&#32;Z&#32;Algorithm</emphasis>
<anchor xml:id="_z__algorithm_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;`ret[i]&#32;=&#32;[0,&#32;n)&#32;と&#32;[i,&#32;n)&#32;の最長共通接頭辞の長さ`</emphasis>
<anchor xml:id="_z__algorithm_8hpp_source_1l00005"/>00005 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T=<link linkend="_z__algorithm_8hpp_1af550579ff39c6ff9baa4b70854b23cf5">string</link>&gt;
<anchor xml:id="_z__algorithm_8hpp_source_1l00006"/><link linkend="_z__algorithm_8hpp_1af550579ff39c6ff9baa4b70854b23cf5">00006</link> <link linkend="_z__algorithm_8hpp_1af550579ff39c6ff9baa4b70854b23cf5">VI</link>&#32;<link linkend="_z__algorithm_8hpp_1af550579ff39c6ff9baa4b70854b23cf5">ZAlgorithm</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;s)&#32;{
<anchor xml:id="_z__algorithm_8hpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=s.size();
<anchor xml:id="_z__algorithm_8hpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;VI&#32;A(n);&#32;<link linkend="_template_8hpp_1a17daffa35db12daabc89c90df168e706">REP</link>(i,n)&#32;A[i]=s[i];
<anchor xml:id="_z__algorithm_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;VI&#32;ret(n);&#32;ret[0]=n;
<anchor xml:id="_z__algorithm_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i=1,j=0;
<anchor xml:id="_z__algorithm_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i&lt;n)&#32;{
<anchor xml:id="_z__algorithm_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i+j&lt;n&#32;&amp;&amp;&#32;A[j]==A[i+j])&#32;j++;
<anchor xml:id="_z__algorithm_8hpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret[i]=j;
<anchor xml:id="_z__algorithm_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(j==0)&#32;{
<anchor xml:id="_z__algorithm_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
<anchor xml:id="_z__algorithm_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_z__algorithm_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_z__algorithm_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;k=1;
<anchor xml:id="_z__algorithm_8hpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(i+k&lt;n&#32;&amp;&amp;&#32;k+ret[k]&lt;j)&#32;ret[i+k]=ret[k],++k;
<anchor xml:id="_z__algorithm_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i+=k;&#32;j-=k;
<anchor xml:id="_z__algorithm_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;}
<anchor xml:id="_z__algorithm_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
<anchor xml:id="_z__algorithm_8hpp_source_1l00023"/>00023 }
</programlisting></section>
