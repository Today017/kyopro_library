<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_zeta__mobius__div__mul_8hpp_source" xml:lang="ja">
<title>zeta_mobius_div_mul.hpp</title>
<indexterm><primary>algorithm/zeta_mobius_div_mul.hpp</primary></indexterm>
[詳解]<programlisting linenumbering="unnumbered"><anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00001"/>00001 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/template.hpp&quot;</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00002"/>00002 <emphasis role="preprocessor">#</emphasis><emphasis role="preprocessor">include</emphasis><emphasis role="preprocessor">&quot;../../kyopro_library/math/prime_enumerate.hpp&quot;</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00003"/>00003 
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00004"/>00004 <emphasis role="comment">///&#32;@brief&#32;倍数・約数ゼータ・メビウス変換</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00005"/><link linkend="_namespace_zeta_mobius_div_mul">00005</link> <emphasis role="keyword">namespace</emphasis>&#32;<link linkend="_namespace_zeta_mobius_div_mul">ZetaMobiusDivMul</link>&#32;{
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00006"/><link linkend="_namespace_zeta_mobius_div_mul_1a0a1025ad27bd1edb07d16fbcf56cb471">00006</link> &#32;&#32;&#32;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a0a1025ad27bd1edb07d16fbcf56cb471">VI</link>&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a0a1025ad27bd1edb07d16fbcf56cb471">primes</link>;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00007"/><link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">Init</link>(<emphasis role="keywordtype">int</emphasis>&#32;n=1e6)&#32;{&#32;primes=PrimeEnumerate(n);&#32;}
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00008"/>00008 
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;倍数高速ゼータ変換</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@details&#32;v&apos;[k]&#32;=&#32;Σ_{k|d}&#32;v[d]&#32;なる&#32;v&apos;&#32;を返す</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N&#32;log(log(N)))</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid&gt;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00013"/><link linkend="_namespace_zeta_mobius_div_mul_1a3464457ced48ed60b5726ff223b31af4">00013</link> &#32;&#32;&#32;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a3464457ced48ed60b5726ff223b31af4">vector</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a3464457ced48ed60b5726ff223b31af4">Monoid</link>::<link linkend="_namespace_zeta_mobius_div_mul_1a3464457ced48ed60b5726ff223b31af4">Type</link>&gt;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a3464457ced48ed60b5726ff223b31af4">MultipleZeta</link>(vector&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid::Type&gt;&#32;v)&#32;{
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=v.size()-1;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((<emphasis role="keywordtype">int</emphasis>)primes.size()&lt;n)&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">Init</link><link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">(</link>n<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">)</link>;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;p:primes)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=n/p;&#32;k&gt;0;&#32;k--)&#32;v[k]=Monoid::op(v[k],v[k*p]);
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00019"/>00019 
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;約数高速ゼータ変換</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@details&#32;v&apos;[k]&#32;=&#32;Σ_{d|k}&#32;v[d]&#32;なる&#32;v&apos;&#32;を返す</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N&#32;log(log(N)))</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid&gt;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00024"/><link linkend="_namespace_zeta_mobius_div_mul_1a0eb786dcdc175107ad43dfdb12461c51">00024</link> &#32;&#32;&#32;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a0eb786dcdc175107ad43dfdb12461c51">vector</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a0eb786dcdc175107ad43dfdb12461c51">Monoid</link>::<link linkend="_namespace_zeta_mobius_div_mul_1a0eb786dcdc175107ad43dfdb12461c51">Type</link>&gt;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a0eb786dcdc175107ad43dfdb12461c51">DivisorZeta</link>(vector&lt;<emphasis role="keyword">typename</emphasis>&#32;Monoid::Type&gt;&#32;v)&#32;{
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=v.size()-1;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((<emphasis role="keywordtype">int</emphasis>)primes.size()&lt;n)&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">Init</link><link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">(</link>n<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">)</link>;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;p:primes)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=1;&#32;k*p&lt;=n;&#32;k++)&#32;v[k*p]=Monoid::op(v[k*p],v[k]);
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00030"/>00030 
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;倍数高速メビウス変換</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@details&#32;v&apos;[k]&#32;=&#32;Σ_{k|d}&#32;μ(d)&#32;v[d]&#32;なる&#32;v&apos;&#32;を返す</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;逆変換が必要なので、v&#32;は可換群の元である必要がある</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N&#32;log(log(N)))</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Abel&gt;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00036"/><link linkend="_namespace_zeta_mobius_div_mul_1a17972686c127951d7816aef375120758">00036</link> &#32;&#32;&#32;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a17972686c127951d7816aef375120758">vector</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a17972686c127951d7816aef375120758">Abel</link>::<link linkend="_namespace_zeta_mobius_div_mul_1a17972686c127951d7816aef375120758">Type</link>&gt;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a17972686c127951d7816aef375120758">MultipleMobius</link>(vector&lt;<emphasis role="keyword">typename</emphasis>&#32;Abel::Type&gt;&#32;v)&#32;{
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=v.size()-1;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((<emphasis role="keywordtype">int</emphasis>)primes.size()&lt;n)&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">Init</link><link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">(</link>n<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">)</link>;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;p:primes)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=1;&#32;k*p&lt;=n;&#32;k++)&#32;v[k]=Abel::op(v[k],Abel::inv(v[k*p]));
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00042"/>00042 
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@brief&#32;約数高速メビウス変換</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@details&#32;v&apos;[k]&#32;=&#32;Σ_{d|k}&#32;μ(d)&#32;v[k/d]&#32;なる&#32;v&apos;&#32;を返す</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;逆変換が必要なので、v&#32;は可換群の元である必要がある</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="comment">///&#32;@note&#32;O(N&#32;log(log(N)))</emphasis>
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Abel&gt;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00048"/><link linkend="_namespace_zeta_mobius_div_mul_1afe1e6c2c7d8180ade6e65334eec8368f">00048</link> &#32;&#32;&#32;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1afe1e6c2c7d8180ade6e65334eec8368f">vector</link>&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_namespace_zeta_mobius_div_mul_1afe1e6c2c7d8180ade6e65334eec8368f">Abel</link>::<link linkend="_namespace_zeta_mobius_div_mul_1afe1e6c2c7d8180ade6e65334eec8368f">Type</link>&gt;&#32;<link linkend="_namespace_zeta_mobius_div_mul_1afe1e6c2c7d8180ade6e65334eec8368f">DivisorMobius</link>(vector&lt;<emphasis role="keyword">typename</emphasis>&#32;Abel::Type&gt;&#32;v)&#32;{
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n=v.size()-1;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((<emphasis role="keywordtype">int</emphasis>)primes.size()&lt;n)&#32;<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">Init</link><link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">(</link>n<link linkend="_namespace_zeta_mobius_div_mul_1a60c1e6ce641275a4ee75d229514c1691">)</link>;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;p:primes)&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;k=n/p;&#32;k&gt;0;&#32;k--)&#32;v[k*p]=Abel::op(v[k*p],Abel::inv(v[k]));
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v;
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;}
<anchor xml:id="_zeta__mobius__div__mul_8hpp_source_1l00054"/>00054 };
</programlisting></section>
