#!/bin/bash

# カラーテキスト用のANSIエスケープコード
RED='\033[0;31m'
NC='\033[0m' # 色をリセットするコード

# C++ファイルをコンパイルして実行する関数
compile_cpp() {
	local cpp_file=$1
	/opt/homebrew/bin/g++-13 $cpp_file -std=c++20 -I . -O2
	if [ $? -ne 0 ]; then
		echo -e "${RED}Compilation failed.${NC}"
		exit 1
	fi
	./a.out
	if [ $? -ne 0 ]; then
		echo -e "${RED}Execution failed.${NC}"
		exit 1
	fi
	python3 ./kyopro_library/kyopro_tools/exp.py $cpp_file
	clang-format --style=file:./kyopro_library/kyopro_tools/.clang-format combined.cpp | pbcopy
	
	# ベース名と拡張子を分ける
	local basename="${cpp_file%.*}"
	local extension="${cpp_file##*.}"
	
	# 同名ファイルのカウントを取得し、新しい連番を作成
	local counter=$(ls esc/"$basename"*.$extension 2>/dev/null | wc -l)
	counter=$((counter + 1))
	
	# 新しいファイル名を作成
	local new_filename="$basename$(printf "%02d" "$counter").$extension"
	
	# ファイルをコピー
	cp "$cpp_file" "esc/$new_filename"
	echo "Copied $cpp_file to esc/$new_filename"
}

# C++ファイルをLOCALフラグでコンパイルして実行する関数
compile_cpp_local() {
	local cpp_file=$1
	/opt/homebrew/bin/g++-13 $cpp_file -std=c++20 -D=LOCAL -I . -O2
	if [ $? -ne 0 ];then
		echo -e "${RED}Compilation failed.${NC}"
		exit 1
	fi
	./a.out
	if [ $? -ne 0 ];then
		echo -e "${RED}Execution failed.${NC}"
		exit 1
	fi
}

# メインロジック
if [ -z "$1" ]; then
	echo "Usage: $0 {a|b|c|d|e|f|g|h|<file.cpp>} [t]"
	exit 1
fi

# コマンド省略用のファイルマッピング
case $1 in
	a) cpp_file="a.cpp" ;;
	b) cpp_file="b.cpp" ;;
	c) cpp_file="c.cpp" ;;
	d) cpp_file="d.cpp" ;;
	e) cpp_file="e.cpp" ;;
	f) cpp_file="f.cpp" ;;
	g) cpp_file="g.cpp" ;;
	h) cpp_file="h.cpp" ;;
	*) cpp_file=$1 ;;  # 任意のC++ファイルに対応
esac

# tオプションが指定された場合はcompile_cpp_local()を呼び出し、それ以外はcompile_cpp()を呼び出す
if [ "$2" == "t" ]; then
	compile_cpp_local "$cpp_file"
else
	compile_cpp "$cpp_file"
fi
