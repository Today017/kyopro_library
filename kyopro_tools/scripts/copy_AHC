#!/bin/bash

copy_cpp() {
    local cpp_file=$1
    python3 ./kyopro_library/kyopro_tools/exp_AHC.py $cpp_file

    if [ $2 == "true" ]; then
        python3 ./atcoder/ac-library/expander.py combined.cpp
    fi

    # ベース名と拡張子を分ける
    local basename="${cpp_file%.*}"
    local extension="${cpp_file##*.}"
    
    # 同名ファイルのカウントを取得し、新しい連番を作成
    local counter=$(ls esc/"$basename"*.$extension 2>/dev/null | wc -l)
    counter=$((counter + 1))
    
    # 新しいファイル名を作成
    local new_filename="$basename$(printf "%02d" "$counter").$extension"
    
    # ファイルをコピー
    cp "$cpp_file" "esc/$new_filename"
    echo "Copied $cpp_file to esc/$new_filename"
}

# メインロジック
if [ -z "$1" ]; then
    echo "Usage: $0 {a|b|c|d|e|f|g|h|<file.cpp>} [t]"
    exit 1
fi

# コマンド省略用のファイルマッピング
case $1 in
    a) cpp_file="a.cpp" ;;
    b) cpp_file="b.cpp" ;;
    c) cpp_file="c.cpp" ;;
    d) cpp_file="d.cpp" ;;
    e) cpp_file="e.cpp" ;;
    f) cpp_file="f.cpp" ;;
    g) cpp_file="g.cpp" ;;
    h) cpp_file="h.cpp" ;;
    *) cpp_file=$1 ;;  # 任意のC++ファイルに対応
esac
shift

acl_flag="false"

while getopts "t" opt; do
    case "$opt" in
        t) acl_flag="true" ;;
    esac
done

copy_cpp $cpp_file $acl_flag