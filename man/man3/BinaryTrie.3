.TH "BinaryTrie< T, Log >" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinaryTrie< T, Log > \- Binary \fBTrie\fP  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include 'binary_trie\&.hpp'\fP
.SS "公開メンバ関数"

.in +1c
.ti -1c
.RI "\fBBinaryTrie\fP ()"
.br
.ti -1c
.RI "int \fBsize\fP () const"
.br
.RI "\fBBinaryTrie\fP のサイズを返す "
.ti -1c
.RI "void \fBinsert\fP (T x, int t=1)"
.br
.RI "x を t 個挿入する "
.ti -1c
.RI "void \fBerase\fP (T x, int t=1)"
.br
.RI "x を min(count(x), t) 個削除する "
.ti -1c
.RI "void \fBapply_xor\fP (T x)"
.br
.RI "要素全体に x を xor する "
.ti -1c
.RI "T \fBmax\fP ()"
.br
.RI "最大値を返す "
.ti -1c
.RI "T \fBmin\fP ()"
.br
.RI "最小値を返す "
.ti -1c
.RI "T \fBkth_min\fP (int k)"
.br
.RI "k(0-indexed) 番目に小さい要素を返す "
.ti -1c
.RI "int \fBlower_bound\fP (T x)"
.br
.RI "x 以上の最小の要素が何番目に小さいかを返す "
.ti -1c
.RI "int \fBcount\fP (T x)"
.br
.RI "x がいくつ含まれているかを返す "
.in -1c
.SH "詳解"
.PP 

.SS "template<typename T = uint32_t, int Log = 32>
.br
struct BinaryTrie< T, Log >"Binary \fBTrie\fP 
.PP
 \fBbinary_trie\&.hpp\fP の \fB5\fP 行目に定義があります。
.SH "構築子と解体子"
.PP 
.SS "template<typename T = uint32_t, int Log = 32> \fBBinaryTrie\fP< T, Log >\fB::BinaryTrie\fP ()\fR [inline]\fP"

.PP
 \fBbinary_trie\&.hpp\fP の \fB6\fP 行目に定義があります。
.SH "関数詳解"
.PP 
.SS "template<typename T = uint32_t, int Log = 32> int \fBBinaryTrie\fP< T, Log >::size () const\fR [inline]\fP"

.PP
\fBBinaryTrie\fP のサイズを返す 
.PP
 \fBbinary_trie\&.hpp\fP の \fB9\fP 行目に定義があります。
.SS "template<typename T = uint32_t, int Log = 32> void \fBBinaryTrie\fP< T, Log >::insert (T x, int t = \fR1\fP)\fR [inline]\fP"

.PP
x を t 個挿入する 
.PP
 \fBbinary_trie\&.hpp\fP の \fB15\fP 行目に定義があります。
.SS "template<typename T = uint32_t, int Log = 32> void \fBBinaryTrie\fP< T, Log >::erase (T x, int t = \fR1\fP)\fR [inline]\fP"

.PP
x を min(count(x), t) 個削除する 
.PP
 \fBbinary_trie\&.hpp\fP の \fB20\fP 行目に定義があります。
.PP
参照先 \fBcount()\fP\&.
.SS "template<typename T = uint32_t, int Log = 32> void \fBBinaryTrie\fP< T, Log >::apply_xor (T x)\fR [inline]\fP"

.PP
要素全体に x を xor する 
.PP
 \fBbinary_trie\&.hpp\fP の \fB27\fP 行目に定義があります。
.SS "template<typename T = uint32_t, int Log = 32> T \fBBinaryTrie\fP< T, Log >::max ()\fR [inline]\fP"

.PP
最大値を返す 
.PP
 \fBbinary_trie\&.hpp\fP の \fB32\fP 行目に定義があります。
.SS "template<typename T = uint32_t, int Log = 32> T \fBBinaryTrie\fP< T, Log >::min ()\fR [inline]\fP"

.PP
最小値を返す 
.PP
 \fBbinary_trie\&.hpp\fP の \fB37\fP 行目に定義があります。
.SS "template<typename T = uint32_t, int Log = 32> T \fBBinaryTrie\fP< T, Log >::kth_min (int k)\fR [inline]\fP"

.PP
k(0-indexed) 番目に小さい要素を返す 
.PP
 \fBbinary_trie\&.hpp\fP の \fB42\fP 行目に定義があります。
.PP
参照先 \fBsize()\fP\&.
.SS "template<typename T = uint32_t, int Log = 32> int \fBBinaryTrie\fP< T, Log >::lower_bound (T x)\fR [inline]\fP"

.PP
x 以上の最小の要素が何番目に小さいかを返す 
.PP
 \fBbinary_trie\&.hpp\fP の \fB48\fP 行目に定義があります。
.SS "template<typename T = uint32_t, int Log = 32> int \fBBinaryTrie\fP< T, Log >::count (T x)\fR [inline]\fP"

.PP
x がいくつ含まれているかを返す 
.PP
 \fBbinary_trie\&.hpp\fP の \fB53\fP 行目に定義があります。

.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
