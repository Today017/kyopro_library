.TH "MergeSortTree< T >" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MergeSortTree< T > \- マージソート木  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include 'merge_sort_tree\&.hpp'\fP
.SS "公開メンバ関数"

.in +1c
.ti -1c
.RI "\fBMergeSortTree\fP ()=default"
.br
.ti -1c
.RI "\fBMergeSortTree\fP (const vector< T > &v)"
.br
.RI "配列 v からマージソート木を構築する "
.ti -1c
.RI "int \fBcount_lt\fP (int l, int r, T val)"
.br
.RI "区間 [l, r) に存在する val 未満の値の個数を返す "
.ti -1c
.RI "int \fBcount_le\fP (int l, int r, T val)"
.br
.RI "区間 [l, r) に存在する val 以下の値の個数を返す "
.ti -1c
.RI "int \fBcount_gt\fP (int l, int r, T val)"
.br
.RI "区間 [l, r) に存在する val より大きい値の個数を返す "
.ti -1c
.RI "int \fBcount_ge\fP (int l, int r, T val)"
.br
.RI "区間 [l, r) に存在する val 以上の値の個数を返す "
.ti -1c
.RI "T \fBkth\fP (int l, int r, int k)"
.br
.RI "区間 [l, r) の小さい方から k(1-indexed) 番目の値を返す "
.in -1c
.SH "詳解"
.PP 

.SS "template<typename T>
.br
struct MergeSortTree< T >"マージソート木 
.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB5\fP 行目に定義があります。
.SH "構築子と解体子"
.PP 
.SS "template<typename T> \fBMergeSortTree\fP< T >\fB::MergeSortTree\fP ()\fR [default]\fP"

.SS "template<typename T> \fBMergeSortTree\fP< T >\fB::MergeSortTree\fP (const vector< T > & v)\fR [inline]\fP"

.PP
配列 v からマージソート木を構築する 
.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB9\fP 行目に定義があります。
.SH "関数詳解"
.PP 
.SS "template<typename T> int \fBMergeSortTree\fP< T >::count_lt (int l, int r, T val)\fR [inline]\fP"

.PP
区間 [l, r) に存在する val 未満の値の個数を返す 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)^2) 
.RE
.PP

.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB21\fP 行目に定義があります。
.SS "template<typename T> int \fBMergeSortTree\fP< T >::count_le (int l, int r, T val)\fR [inline]\fP"

.PP
区間 [l, r) に存在する val 以下の値の個数を返す 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)^2) 
.RE
.PP

.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB34\fP 行目に定義があります。
.PP
参照先 \fBcount_lt()\fP\&.
.SS "template<typename T> int \fBMergeSortTree\fP< T >::count_gt (int l, int r, T val)\fR [inline]\fP"

.PP
区間 [l, r) に存在する val より大きい値の個数を返す 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)^2) 
.RE
.PP

.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB40\fP 行目に定義があります。
.PP
参照先 \fBcount_le()\fP\&.
.SS "template<typename T> int \fBMergeSortTree\fP< T >::count_ge (int l, int r, T val)\fR [inline]\fP"

.PP
区間 [l, r) に存在する val 以上の値の個数を返す 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)^2) 
.RE
.PP

.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB46\fP 行目に定義があります。
.PP
参照先 \fBcount_lt()\fP\&.
.SS "template<typename T> T \fBMergeSortTree\fP< T >::kth (int l, int r, int k)\fR [inline]\fP"

.PP
区間 [l, r) の小さい方から k(1-indexed) 番目の値を返す 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)^3) 
.RE
.PP

.PP
 \fBmerge_sort_tree\&.hpp\fP の \fB52\fP 行目に定義があります。
.PP
参照先 \fBcount_lt()\fP\&.

.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
