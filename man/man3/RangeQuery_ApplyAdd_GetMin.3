.TH "RangeQuery::ApplyAdd_GetMin< T, max_value >" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RangeQuery::ApplyAdd_GetMin< T, max_value > \- 区間加算 / 区間min  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include 'segtree_lazy\&.hpp'\fP
.SS "公開型"

.in +1c
.ti -1c
.RI "using \fBType\fP = struct \fBSegTreeLazy\fP<\fBMonoid::Min\fP<T,max_value>,\fBOperator::Add\fP<T>,\fBmapping\fP>"
.br
.in -1c
.SS "静的公開メンバ関数"

.in +1c
.ti -1c
.RI "static T \fBmapping\fP (const T &a, const T &b)"
.br
.in -1c
.SH "詳解"
.PP 

.SS "template<typename T, T max_value>
.br
struct RangeQuery::ApplyAdd_GetMin< T, max_value >"区間加算 / 区間min 
.PP
 \fBsegtree_lazy\&.hpp\fP の \fB232\fP 行目に定義があります。
.SH "型定義メンバ詳解"
.PP 
.SS "template<typename T, T max_value> using \fBRangeQuery::ApplyAdd_GetMin\fP< T, max_value >::Type = struct \fBSegTreeLazy\fP<\fBMonoid::Min\fP<T,max_value>,\fBOperator::Add\fP<T>,\fBmapping\fP>"

.PP
 \fBsegtree_lazy\&.hpp\fP の \fB234\fP 行目に定義があります。
.SH "関数詳解"
.PP 
.SS "template<typename T, T max_value> static T \fBRangeQuery::ApplyAdd_GetMin\fP< T, max_value >::mapping (const T & a, const T & b)\fR [inline]\fP, \fR [static]\fP"

.PP
 \fBsegtree_lazy\&.hpp\fP の \fB233\fP 行目に定義があります。

.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
