.TH "RangeQuery::ApplyUpdate_GetMin< T, max_value, not_exist >" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RangeQuery::ApplyUpdate_GetMin< T, max_value, not_exist > \- 区間更新 / 区間min  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include 'segtree_lazy\&.hpp'\fP
.SS "公開型"

.in +1c
.ti -1c
.RI "using \fBType\fP = struct \fBSegTreeLazy\fP<\fBMonoid::Min\fP<T,max_value>,\fBOperator::Update\fP<T,not_exist>,\fBmapping\fP>"
.br
.in -1c
.SS "静的公開メンバ関数"

.in +1c
.ti -1c
.RI "static T \fBmapping\fP (const T &a, const T &b)"
.br
.in -1c
.SH "詳解"
.PP 

.SS "template<typename T, T max_value, T not_exist>
.br
struct RangeQuery::ApplyUpdate_GetMin< T, max_value, not_exist >"区間更新 / 区間min 


.PP
\fBテンプレート引数\fP
.RS 4
\fImax_value\fP 最大値 
.br
\fInot_exist\fP 存在しない値 
.RE
.PP

.PP
 \fBsegtree_lazy\&.hpp\fP の \fB207\fP 行目に定義があります。
.SH "型定義メンバ詳解"
.PP 
.SS "template<typename T, T max_value, T not_exist> using \fBRangeQuery::ApplyUpdate_GetMin\fP< T, max_value, not_exist >::Type = struct \fBSegTreeLazy\fP<\fBMonoid::Min\fP<T,max_value>,\fBOperator::Update\fP<T,not_exist>,\fBmapping\fP>"

.PP
 \fBsegtree_lazy\&.hpp\fP の \fB209\fP 行目に定義があります。
.SH "関数詳解"
.PP 
.SS "template<typename T, T max_value, T not_exist> static T \fBRangeQuery::ApplyUpdate_GetMin\fP< T, max_value, not_exist >::mapping (const T & a, const T & b)\fR [inline]\fP, \fR [static]\fP"

.PP
 \fBsegtree_lazy\&.hpp\fP の \fB208\fP 行目に定義があります。

.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
