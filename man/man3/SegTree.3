.TH "SegTree< Monoid >" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SegTree< Monoid > \- セグメント木  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include 'segtree\&.hpp'\fP
.SS "公開型"

.in +1c
.ti -1c
.RI "using \fBType\fP = typename Monoid::Type"
.br
.in -1c
.SS "公開メンバ関数"

.in +1c
.ti -1c
.RI "\fBSegTree\fP ()=default"
.br
.ti -1c
.RI "\fBSegTree\fP (int n)"
.br
.RI "要素数 n のセグ木を構築する "
.ti -1c
.RI "\fBSegTree\fP (const vector< \fBType\fP > &v)"
.br
.RI "配列 v からセグ木を構築する "
.ti -1c
.RI "void \fBset\fP (int i, \fBType\fP x)"
.br
.RI "i 番目の要素を x に変更する "
.ti -1c
.RI "\fBType\fP \fBfold\fP (int l, int r)"
.br
.RI "区間 [l, r) のモノイド積を返す "
.ti -1c
.RI "template<typename F> int \fBfind_right\fP (int l, F f)"
.br
.RI "区間 [l, x) のモノイド積が f を満たすような最大の x >= l を返す "
.ti -1c
.RI "template<typename F> int \fBfind_left\fP (int r, F f)"
.br
.RI "区間 [x, r) のモノイド積が f を満たすような最小の x <= r を返す "
.ti -1c
.RI "\fBType\fP \fBoperator[]\fP (int i)"
.br
.RI "i 番目の要素を返す "
.ti -1c
.RI "int \fBsize\fP ()"
.br
.RI "配列のサイズを返す "
.in -1c
.SH "詳解"
.PP 

.SS "template<typename Monoid>
.br
struct SegTree< Monoid >"セグメント木 
.PP
 \fBsegtree\&.hpp\fP の \fB6\fP 行目に定義があります。
.SH "型定義メンバ詳解"
.PP 
.SS "template<typename Monoid> using \fBSegTree\fP< Monoid >::Type = typename Monoid::Type"

.PP
 \fBsegtree\&.hpp\fP の \fB7\fP 行目に定義があります。
.SH "構築子と解体子"
.PP 
.SS "template<typename Monoid> \fBSegTree\fP< Monoid >\fB::SegTree\fP ()\fR [default]\fP"

.SS "template<typename Monoid> \fBSegTree\fP< Monoid >\fB::SegTree\fP (int n)\fR [inline]\fP"

.PP
要素数 n のセグ木を構築する 
.PP
 \fBsegtree\&.hpp\fP の \fB11\fP 行目に定義があります。
.SS "template<typename Monoid> \fBSegTree\fP< Monoid >\fB::SegTree\fP (const vector< \fBType\fP > & v)\fR [inline]\fP"

.PP
配列 v からセグ木を構築する 
.PP
\fB覚え書き\fP
.RS 4
O(N) 
.RE
.PP

.PP
 \fBsegtree\&.hpp\fP の \fB19\fP 行目に定義があります。
.SH "関数詳解"
.PP 
.SS "template<typename Monoid> void \fBSegTree\fP< Monoid >::set (int i, \fBType\fP x)\fR [inline]\fP"

.PP
i 番目の要素を x に変更する 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)) 
.RE
.PP

.PP
 \fBsegtree\&.hpp\fP の \fB29\fP 行目に定義があります。
.SS "template<typename Monoid> \fBType\fP \fBSegTree\fP< Monoid >::fold (int l, int r)\fR [inline]\fP"

.PP
区間 [l, r) のモノイド積を返す 
.PP
\fB覚え書き\fP
.RS 4
O(log(N)) 
.RE
.PP

.PP
 \fBsegtree\&.hpp\fP の \fB37\fP 行目に定義があります。
.SS "template<typename Monoid> template<typename F> int \fBSegTree\fP< Monoid >::find_right (int l, F f)\fR [inline]\fP"

.PP
区間 [l, x) のモノイド積が f を満たすような最大の x >= l を返す 
.PP
\fB注意\fP
.RS 4
\fRf(Monoid::id())=true\fP が成り立つ必要がある 
.RE
.PP
\fB覚え書き\fP
.RS 4
O(log(N)) 
.RE
.PP

.PP
 \fBsegtree\&.hpp\fP の \fB52\fP 行目に定義があります。
.SS "template<typename Monoid> template<typename F> int \fBSegTree\fP< Monoid >::find_left (int r, F f)\fR [inline]\fP"

.PP
区間 [x, r) のモノイド積が f を満たすような最小の x <= r を返す 
.PP
\fB注意\fP
.RS 4
\fRf(Monoid::id())=true\fP が成り立つ必要がある 
.RE
.PP
\fB覚え書き\fP
.RS 4
O(log(N)) 
.RE
.PP

.PP
 \fBsegtree\&.hpp\fP の \fB88\fP 行目に定義があります。
.SS "template<typename Monoid> \fBType\fP \fBSegTree\fP< Monoid >::operator[] (int i)\fR [inline]\fP"

.PP
i 番目の要素を返す 
.PP
\fB覚え書き\fP
.RS 4
O(1) 
.RE
.PP

.PP
 \fBsegtree\&.hpp\fP の \fB122\fP 行目に定義があります。
.SS "template<typename Monoid> int \fBSegTree\fP< Monoid >::size ()\fR [inline]\fP"

.PP
配列のサイズを返す 
.PP
 \fBsegtree\&.hpp\fP の \fB125\fP 行目に定義があります。

.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
