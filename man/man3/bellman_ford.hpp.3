.TH "graph/shortest_path/bellman_ford.hpp" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
graph/shortest_path/bellman_ford.hpp
.SH SYNOPSIS
.br
.PP
\fR#include '\&.\&./\&.\&./\&.\&./kyopro_library/template\&.hpp'\fP
.br

.SS "関数"

.in +1c
.ti -1c
.RI "pair< bool, \fBVL\fP > \fBBellmanFord\fP (const \fBWG\fP &g, int start)"
.br
.RI "ベルマンフォード法 "
.in -1c
.SH "関数詳解"
.PP 
.SS "pair< bool, \fBVL\fP > BellmanFord (const \fBWG\fP & g, int start)"

.PP
ベルマンフォード法 負の閉路が存在するか否かの bool 値と、各頂点までの最短距離を記録した配列の組を返す 
.PP
\fB覚え書き\fP
.RS 4
O(VE) 
.RE
.PP
\fB注意\fP
.RS 4
負閉路が存在する場合、最短経路が正しく計算されない場合がある。 このときは逆辺を張ったグラフで BFS 等を行い、目的の終点から到達可能である頂点を列挙し、 そのような頂点のみでベルマンフォード法を実行して調べる必要がある。 \fBhttps://yukicoder.me/submissions/967952\fP \fBhttps://mhrb-minase.hatenablog.com/entry/2019/08/20/003915\fP 
.RE
.PP

.PP
 \fBbellman_ford\&.hpp\fP の \fB14\fP 行目に定義があります。
.PP
参照先 \fBINFL\fP\&.
.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
