.TH "algorithm/binary_search.hpp" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
algorithm/binary_search.hpp
.SH SYNOPSIS
.br
.PP
\fR#include '\&.\&./\&.\&./kyopro_library/template\&.hpp'\fP
.br

.SS "関数"

.in +1c
.ti -1c
.RI "template<typename T, typename Judge> T \fBBinarySearch\fP (T ok, T ng, Judge judge)"
.br
.RI "二分探索 "
.ti -1c
.RI "template<typename T, typename Judge> T \fBBinarySearchIteration\fP (T ok, T ng, Judge judge, int iter=100)"
.br
.RI "回数指定二分探索 "
.ti -1c
.RI "template<typename T, typename Judge> bool \fBCheckMonotonicity\fP (T start, T step, \fBll\fP iter, Judge judge)"
.br
.RI "単調性の確認 "
.in -1c
.SH "関数詳解"
.PP 
.SS "template<typename T, typename Judge> T BinarySearch (T ok, T ng, Judge judge)"

.PP
二分探索 条件 judge を満たす ok と ng の境界を二分探索によって求める。 
.PP
\fB覚え書き\fP
.RS 4
O(log(|ok - ng|) * f) 
.RE
.PP

.PP
 \fBbinary_search\&.hpp\fP の \fB7\fP 行目に定義があります。
.SS "template<typename T, typename Judge> T BinarySearchIteration (T ok, T ng, Judge judge, int iter = \fR100\fP)"

.PP
回数指定二分探索 条件 judge を満たす ok と ng の境界を二分探索によって求める。 
.PP
\fB覚え書き\fP
.RS 4
O(iter * f) 
.RE
.PP

.PP
 \fBbinary_search\&.hpp\fP の \fB20\fP 行目に定義があります。
.SS "template<typename T, typename Judge> bool CheckMonotonicity (T start, T step, \fBll\fP iter, Judge judge)"

.PP
単調性の確認 関数 judge が単調性を満たすか否かを確認する 
.PP
\fB引数\fP
.RS 4
\fIstart\fP 開始要素 
.br
\fIstep\fP 探索幅 
.br
\fIiter\fP 探索回数 
.RE
.PP

.PP
 \fBbinary_search\&.hpp\fP の \fB35\fP 行目に定義があります。
.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
