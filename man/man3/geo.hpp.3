.TH "geometry/geo.hpp" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
geometry/geo.hpp
.SH SYNOPSIS
.br
.PP
\fR#include '\&.\&./\&.\&./kyopro_library/template\&.hpp'\fP
.br

.SS "クラス"

.in +1c
.ti -1c
.RI "struct \fBGeometry::Point\fP"
.br
.RI "２次元平面上の位置ベクトル "
.ti -1c
.RI "struct \fBGeometry::Line\fP"
.br
.RI "直線 "
.ti -1c
.RI "struct \fBGeometry::Segment\fP"
.br
.RI "線分 "
.ti -1c
.RI "struct \fBGeometry::Circle\fP"
.br
.RI "円 "
.in -1c
.SS "名前空間"

.in +1c
.ti -1c
.RI "namespace \fBGeometry\fP"
.br
.RI "幾何ライブラリ "
.in -1c
.SS "型定義"

.in +1c
.ti -1c
.RI "using \fBGeometry::Real\fP = long double"
.br
.in -1c
.SS "列挙型"

.in +1c
.ti -1c
.RI "enum \fBGeometry::Orientation\fP { \fBGeometry::COUNTER_CLOCKWISE\fP, \fBGeometry::CLOCKWISE\fP, \fBGeometry::ONLINE_BACK\fP, \fBGeometry::ONLINE_FRONT\fP, \fBGeometry::ON_SEGMENT\fP }"
.br
.in -1c
.SS "関数"

.in +1c
.ti -1c
.RI "bool \fBGeometry::almostEqual\fP (\fBReal\fP a, \fBReal\fP b)"
.br
.ti -1c
.RI "bool \fBGeometry::lessThan\fP (\fBReal\fP a, \fBReal\fP b)"
.br
.ti -1c
.RI "bool \fBGeometry::greaterThan\fP (\fBReal\fP a, \fBReal\fP b)"
.br
.ti -1c
.RI "bool \fBGeometry::lessThanOrEqual\fP (\fBReal\fP a, \fBReal\fP b)"
.br
.ti -1c
.RI "bool \fBGeometry::greaterThanOrEqual\fP (\fBReal\fP a, \fBReal\fP b)"
.br
.ti -1c
.RI "\fBOrientation\fP \fBGeometry::ccw\fP (const \fBPoint\fP &p0, const \fBPoint\fP &p1, const \fBPoint\fP &p2)"
.br
.RI "3点 p0, p1, p2 の進行方向を返す "
.ti -1c
.RI "string \fBGeometry::orientationToString\fP (\fBOrientation\fP o)"
.br
.ti -1c
.RI "\fBPoint\fP \fBGeometry::projection\fP (const \fBPoint\fP &p1, const \fBPoint\fP &p2, const \fBPoint\fP &p)"
.br
.RI "ベクトル p の直線 p1, p2 への正射影ベクトルを返す "
.ti -1c
.RI "\fBPoint\fP \fBGeometry::projection\fP (const \fBLine\fP &l, const \fBPoint\fP &p)"
.br
.RI "ベクトル p の直線 l への正射影ベクトルを返す "
.ti -1c
.RI "\fBPoint\fP \fBGeometry::reflection\fP (const \fBPoint\fP &p1, const \fBPoint\fP &p2, const \fBPoint\fP &p)"
.br
.RI "ベクトル p の直線 p1, p2 に対する鏡像ベクトルを返す "
.ti -1c
.RI "\fBPoint\fP \fBGeometry::reflection\fP (const \fBLine\fP &l, const \fBPoint\fP &p)"
.br
.RI "ベクトル p の直線 l に対する鏡像ベクトルを返す "
.ti -1c
.RI "bool \fBGeometry::isParallel\fP (const \fBLine\fP &l1, const \fBLine\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isOrthogonal\fP (const \fBLine\fP &l1, const \fBLine\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isParallel\fP (const \fBSegment\fP &l1, const \fBSegment\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isOrthogonal\fP (const \fBSegment\fP &l1, const \fBSegment\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isParallel\fP (const \fBLine\fP &l1, const \fBSegment\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isOrthogonal\fP (const \fBLine\fP &l1, const \fBSegment\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isParallel\fP (const \fBSegment\fP &l1, const \fBLine\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isOrthogonal\fP (const \fBSegment\fP &l1, const \fBLine\fP &l2)"
.br
.ti -1c
.RI "bool \fBGeometry::isPointOnLine\fP (const \fBPoint\fP &p, const \fBLine\fP &l)"
.br
.ti -1c
.RI "bool \fBGeometry::isPointOnSegment\fP (const \fBPoint\fP &p, const \fBSegment\fP &s)"
.br
.ti -1c
.RI "bool \fBGeometry::isIntersecting\fP (const \fBSegment\fP &s1, const \fBSegment\fP &s2)"
.br
.ti -1c
.RI "\fBPoint\fP \fBGeometry::getIntersection\fP (const \fBSegment\fP &s1, const \fBSegment\fP &s2)"
.br
.ti -1c
.RI "\fBReal\fP \fBGeometry::distancePointToSegment\fP (const \fBPoint\fP &p, const \fBSegment\fP &s)"
.br
.ti -1c
.RI "\fBReal\fP \fBGeometry::distanceSegmentToSegment\fP (const \fBSegment\fP &s1, const \fBSegment\fP &s2)"
.br
.ti -1c
.RI "\fBReal\fP \fBGeometry::getPolygonArea\fP (const vector< \fBPoint\fP > &points)"
.br
.ti -1c
.RI "bool \fBGeometry::isConvex\fP (const vector< \fBPoint\fP > &points)"
.br
.ti -1c
.RI "bool \fBGeometry::isPointOnPolygon\fP (const vector< \fBPoint\fP > &polygon, const \fBPoint\fP &p)"
.br
.ti -1c
.RI "bool \fBGeometry::isPointInsidePolygon\fP (const vector< \fBPoint\fP > &polygon, const \fBPoint\fP &p)"
.br
.ti -1c
.RI "vector< \fBPoint\fP > \fBGeometry::convexHull\fP (vector< \fBPoint\fP > &points, bool include_collinear=false)"
.br
.ti -1c
.RI "\fBReal\fP \fBGeometry::convexHullDiameter\fP (const vector< \fBPoint\fP > &hull)"
.br
.ti -1c
.RI "vector< \fBPoint\fP > \fBGeometry::cutPolygon\fP (const vector< \fBPoint\fP > &g, const \fBLine\fP &l)"
.br
.ti -1c
.RI "\fBReal\fP \fBGeometry::closestPair\fP (vector< \fBPoint\fP > &points, int l, int r)"
.br
.ti -1c
.RI "int \fBGeometry::countIntersections\fP (vector< \fBSegment\fP >segments)"
.br
.ti -1c
.RI "int \fBGeometry::countCirclesIntersection\fP (const \fBCircle\fP &c1, const \fBCircle\fP &c2)"
.br
.ti -1c
.RI "\fBCircle\fP \fBGeometry::getInCircle\fP (const \fBPoint\fP &A, const \fBPoint\fP &B, const \fBPoint\fP &C)"
.br
.ti -1c
.RI "\fBCircle\fP \fBGeometry::getCircumCircle\fP (const \fBPoint\fP &A, const \fBPoint\fP &B, const \fBPoint\fP &C)"
.br
.ti -1c
.RI "vector< \fBPoint\fP > \fBGeometry::getCircleLineIntersection\fP (const \fBCircle\fP &c, \fBPoint\fP p1, \fBPoint\fP p2)"
.br
.ti -1c
.RI "vector< \fBPoint\fP > \fBGeometry::getCirclesIntersect\fP (const \fBCircle\fP &c1, const \fBCircle\fP &c2)"
.br
.ti -1c
.RI "vector< \fBPoint\fP > \fBGeometry::getTangentLinesFromPoint\fP (const \fBCircle\fP &c, const \fBPoint\fP &p)"
.br
.ti -1c
.RI "vector< \fBSegment\fP > \fBGeometry::getCommonTangentsLine\fP (const \fBCircle\fP &c1, const \fBCircle\fP &c2)"
.br
.in -1c
.SS "変数"

.in +1c
.ti -1c
.RI "const \fBReal\fP \fBGeometry::EPS\fP =1e\-9"
.br
.in -1c
.SH "著者"
.PP 
 Kyopro Libraryのソースコードから抽出しました。
