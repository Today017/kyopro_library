.TH "md__r_e_a_d_m_e" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__r_e_a_d_m_e \- Today03 
.PP


.PP
.IP "\(bu" 2
\fRAtCoder\fP
.IP "\(bu" 2
\fRCodeforces\fP
.IP "\(bu" 2
\fRyukicoder\fP
.PP

.PP
\fRライブラリのドキュメント\fP
.SH "環境構築"
.PP
.IP "1." 4
Docker, Git, make のインストール
.IP "3." 4
\fRbuild\fP （AHCの場合は \fRbuild_AHC\fP）をコピペ、実行
.IP "4." 4
\fRmake build\fP でDockerイメージをビルドする（初回のみ）
.IP "5." 4
\fRmake run\fP でコンテナを起動して入る
.PP
.SH "スクリプト"
.PP
.IP "\(bu" 2
\fR\&./cmp <file>\fP \fR<file>\fP をコンパイルする。
.IP "\(bu" 2
\fR\&./copy <file>\fP \fR<file>\fP にincludeしたライブラリを展開し、\fR\&./combinded\&.cpp\fP に保存する。
.IP "\(bu" 2
\fR\&./test <solve> <generate> <naive>\fP ランダムテスト用スクリプト。\fR<solve>\fP を実行し、\fR<generate>\fP で生成した入力を与え、\fR<naive>\fP で生成した出力と比較する。
.IP "\(bu" 2
\fR\&./contest\fP カレントディレクトリで作成したファイルを削除する。スクリプトやライブラリは削除しない。コンテスト前に実行する。
.PP
.SH "使い方"
.PP
.IP "1." 4
\fRvim a\&.cpp\fP 
.PP
.nf
#include<kyopro_library/template\&.hpp>
#include<kyopro_library/graph/dsu\&.hpp> // 使うライブラリをincludeする

int main(){
    // ここにコードを実装する
}

.fi
.PP

.IP "2." 4
\fR\&./cmp a\fP
.IP "3." 4
\fR\&./a\&.out\fP
.IP "4." 4
\fR\&./copy a\fP
.PP
.SH "データ構造に載せる代数構造の定義の仕方"
.PP
.SS "例) モノイド"
.PP
.nf
struct Monoid {
    using Type = hoge;
    static Type id() { return hoge; }
    static Type op(const Type& l, const Type& r) { return hoge; }
};
.fi
.PP
.SS "各構造の要件"
.IP "\(bu" 2
モノイド
.IP "  \(bu" 4
\fRType id()\fP
.IP "  \(bu" 4
\fRType op(const Type& l, const Type& r)\fP
.PP

.IP "\(bu" 2
半群
.IP "  \(bu" 4
\fRType op(const Type& l, const Type& r)\fP
.PP

.IP "\(bu" 2
群
.IP "  \(bu" 4
\fRType inv(const Type& x)\fP
.IP "  \(bu" 4
\fRType op(const Type& l, const Type& r)\fP
.IP "  \(bu" 4
\fRType id()\fP
.PP

.IP "\(bu" 2
作用素
.IP "  \(bu" 4
\fRType id()\fP
.IP "  \(bu" 4
\fRType op(const Type& l, const Type& r)\fP 
.PP

.PP

