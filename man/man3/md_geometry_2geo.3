.TH "md_geometry_2geo" 3 "Kyopro Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_geometry_2geo \- geo 
.PP
\fBtop\fP
.SH "\fRTemplate\fP"
.PP
このライブラリのドキュメント・実装は ICPC のために、チーム HokkaidoDekkaido のメンバーによって verify の上、提供されました。
.SS "Inequality"
\fRbool almostEqual(long double a, long double b)\fP

.PP
\fRbool lessThan(long double a, long double b)\fP

.PP
\fRbool greaterThan(long double a, long double b)\fP

.PP
\fRbool lessThanOrEqual(long double a, long double b)\fP

.PP
\fRbool greaterThanOrEqual(long double a, long double b)\fP
.IP "\(bu" 2
EPSを用いた不等式評価
.PP
.SS "Structure"
.SS "Point"
\fRPoint(long double x, long double y)\fP
.IP "\(bu" 2
二次元平面状の位置ベクトル $(x, y)$
.PP

.PP
\fRPoint::dot(Point p)\fP
.IP "\(bu" 2
$p$ との内積を返す。
.PP

.PP
\fRPoint::cross(Point p)\fP
.IP "\(bu" 2
$p$ との外積を返す。
.PP

.PP
\fRPoint::cross(Point p1, Point p2)\fP
.IP "\(bu" 2
$p1$ と $p2$ を端点とするベクトルとの外積を返す。
.PP

.PP
\fRPoint::norm()\fP
.IP "\(bu" 2
ベクトルの長さの二乗を返す。
.PP

.PP
\fRPoint::abs()\fP
.IP "\(bu" 2
ベクトルの長さを返す。
.PP

.PP
\fRPoint::arg()\fP
.IP "\(bu" 2
ベクトルの偏角を返す。
.PP
.SS "Segment"
\fRSegment(Point a, Point b)\fP

.PP
\fRSegment(long double A, long double B, long double C)\fP
.IP "\(bu" 2
線分
.PP
.SS "Line"
\fRLine(Point a, Point b)\fP

.PP
\fRLine(long double A, long double B, long double C)\fP
.IP "\(bu" 2
直線
.PP

.PP
(一般には==が壊れるので注意)
.SS "Circle"
\fRCircle(long double x, long double y, long double r)\fP

.PP
\fRCircle(Point _center, long double r)\fP
.IP "\(bu" 2
円
.PP
.SS "Point and Vector"
.SS "Counter Clockwise"
\fROrientation ccw(Point p0, Point p1, Point p2)\fP
.IP "\(bu" 2
点の進行方向
.PP

.PP
.PP
.nf
enum Orientation {
    COUNTER_CLOCKWISE,
    CLOCKWISE,
    ONLINE_BACK,
    ONLINE_FRONT,
    ON_SEGMENT
};
.fi
.PP
.SS "射影"
\fRPoint projection(Point p1, Point p2, Point p)\fP

.PP
\fRPoint projection(Line l, Point p)\fP
.SS "反射"
\fRPoint reflection(Point p1, Point p2, Point p)\fP

.PP
\fRPoint reflection(Line l, Point p)\fP
.SS "Segment and Line"
.SS "平行判定"
\fRbool isParallel(Line(Segment) l1, Line(Segment) l2)\fP
.SS "垂直判定"
\fRbool isOrthogonal(Line(Segment) l1, Line(Segment) l2)\fP

.PP
.PP
.SS "直線上に点が存在するか判定"
\fRbool isPointOnLine(Point p, Line l)\fP
.SS "線分上に点が存在するか判定"
\fRbool isPointOnSegment(Point p, Line l)\fP
.SS "線分と線分の交差"
\fRbool isIntersecting(Segment s1, Segment s2)\fP
.SS "線分と線分の交点"
\fRPoint getIntersection(Segment s1, Segment s2)\fP

.PP
.PP
.SS "点と直線の距離"
\fRlong double distancePointToSegment(Point p, Segment s)\fP
.SS "線分と線分の距離"
\fRlong double distanceSegmentToSegment(Segment s1, Segment s2)\fP
.SS "Polygon"
.SS "多角形の面積"
\fRlong double getPolygonArea(vector<Point> points)\fP

.PP
.PP
.SS "凸多角形の判定"
\fRbool isConvex(vector<Point> points)\fP

.PP
.PP
.SS "点が凸多角形の辺上に存在するか判定"
\fRbool isPointOnPolygon(vector<Point> polygon, Point p)\fP
.SS "点が凸多角形の内部に存在するか判定"
\fRbool isPointInsidePolygon(vector<Point> polygon, Point p)\fP
.IP "\(bu" 2
たまに↑を包含
.PP
.SS "Convex Polygon"
.SS "凸包"
\fRvector<Point> convexHull(vector<Point> points, bool include_collinear = false)\fP

.PP
.PP
.SS "凸包の直径"
\fRlong double convexHullDiameter(vector<Point> hull)\fP

.PP
.PP
.SS "凸包をカットして左側を返す"
\fRvector<Point> cutPolygon(vector<Point> g, Point p1, Point p2)\fP
.SS "Point Set"
.SS "最近点対"
\fRlong double closestPair(vector<Point> points, int l, int r)\fP
.IP "\(bu" 2
x座標の値でソートされた点列を渡す
.PP
.SS "Segment Set"
.SS "線分集合の交点の個数"
\fRint countIntersections(vector<Segment> segments)\fP
.SS "Circle"
.SS "2つの円の交点の個数"
\fRint countCirclesIntersection(Circle c1, Circle c2)\fP

.PP
.PP
.SS "内接円"
\fRCircle getInCircle(Point A, Point B, Point C)\fP

.PP
.PP
.SS "外接円"
\fRCircle getCircumCircle(Point A, Point B, Point C)\fP

.PP
.PP
.SS "円と直線の交点"
\fRvector<Point> getCircleLineIntersection(Circle c, Point p1, Point p2)\fP
.SS "2つの円の交点"
\fRvector<Point> getCirclesIntersect(Circle c1, Circle c2)\fP
.SS "点 $p$ を通る接線との接点"
\fRvector<Point> getTangentLinesFromPoint(Circle c, Point p)\fP
.SS "2つの円の共通接線"
\fRvector<Segment> getCommonTangentsLine(Circle c1, Circle c2)\fP 
